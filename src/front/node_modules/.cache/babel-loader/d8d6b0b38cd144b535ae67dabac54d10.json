{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst CapabilitiesSetStub = require('../../../Stubs/mysqlx_connection_pb').CapabilitiesSet;\n\nconst capabilities = require('./Capabilities');\n\nconst serializable = require('../../Traits/Serializable');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Connection.CapabilitiesSet\n * @param {proto.Mysqlx.Connection.CapabilitiesSet} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Connection.CapabilitiesSet}\n */\n\n\nfunction CapabilitiesSet(proto) {\n  return Object.assign({}, serializable(proto), wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Connection.CapabilitiesSet#toJSON\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        capabilities: capabilities(proto.getCapabilities()).toJSON()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a Mysqlx.Connection.CapabilitiesSet instance for the given properties.\n * @param {Object} properties - object with a key-value mapping of the properties\n * @returns {module:adapters.Mysqlx.Connection.CapabilitiesSet}\n */\n\n\nCapabilitiesSet.create = function (properties) {\n  const proto = new CapabilitiesSetStub();\n  proto.setCapabilities(capabilities.create(properties).valueOf());\n  return CapabilitiesSet(proto);\n};\n\nmodule.exports = CapabilitiesSet;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Connection/CapabilitiesSet.js"],"names":["CapabilitiesSetStub","require","CapabilitiesSet","capabilities","serializable","wraps","proto","Object","assign","toJSON","getCapabilities","create","properties","setCapabilities","valueOf","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,mBAAmB,GAAGC,OAAO,CAAC,qCAAD,CAAP,CAA+CC,eAA3E;;AACA,MAAMC,YAAY,GAAGF,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,eAAT,CAA0BI,KAA1B,EAAiC;AAC7B,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,YAAY,CAACE,KAAD,CAA9B,EAAuCD,KAAK,CAACC,KAAD,CAA5C,EAAqD;AACxD;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAO;AAAEN,QAAAA,YAAY,EAAEA,YAAY,CAACG,KAAK,CAACI,eAAN,EAAD,CAAZ,CAAsCD,MAAtC;AAAhB,OAAP;AACH;;AATuD,GAArD,CAAP;AAWH;AAED;AACA;AACA;AACA;AACA;;;AACAP,eAAe,CAACS,MAAhB,GAAyB,UAAUC,UAAV,EAAsB;AAC3C,QAAMN,KAAK,GAAG,IAAIN,mBAAJ,EAAd;AACAM,EAAAA,KAAK,CAACO,eAAN,CAAsBV,YAAY,CAACQ,MAAb,CAAoBC,UAApB,EAAgCE,OAAhC,EAAtB;AAEA,SAAOZ,eAAe,CAACI,KAAD,CAAtB;AACH,CALD;;AAOAS,MAAM,CAACC,OAAP,GAAiBd,eAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst CapabilitiesSetStub = require('../../../Stubs/mysqlx_connection_pb').CapabilitiesSet;\nconst capabilities = require('./Capabilities');\nconst serializable = require('../../Traits/Serializable');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Connection.CapabilitiesSet\n * @param {proto.Mysqlx.Connection.CapabilitiesSet} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Connection.CapabilitiesSet}\n */\nfunction CapabilitiesSet (proto) {\n    return Object.assign({}, serializable(proto), wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Connection.CapabilitiesSet#toJSON\n         * @returns {Object}\n         */\n        toJSON () {\n            return { capabilities: capabilities(proto.getCapabilities()).toJSON() };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a Mysqlx.Connection.CapabilitiesSet instance for the given properties.\n * @param {Object} properties - object with a key-value mapping of the properties\n * @returns {module:adapters.Mysqlx.Connection.CapabilitiesSet}\n */\nCapabilitiesSet.create = function (properties) {\n    const proto = new CapabilitiesSetStub();\n    proto.setCapabilities(capabilities.create(properties).valueOf());\n\n    return CapabilitiesSet(proto);\n};\n\nmodule.exports = CapabilitiesSet;\n"]},"metadata":{},"sourceType":"script"}