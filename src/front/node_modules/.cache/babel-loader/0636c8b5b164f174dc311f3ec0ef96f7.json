{"ast":null,"code":"/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst authPlugin = require('./AuthPlugin');\n\nconst errors = require('../constants/errors');\n\nconst util = require('util');\n\nconst Name = 'PLAIN';\n\nfunction PlainAuth(state) {\n  return Object.assign({}, authPlugin(state), {\n    /**\n     * Generate the payload for the first authentication step.\n     * @function\n     * @name module:PlainAuth#getInitialAuthData\n     * @returns {Buffer} A Node.js buffer with a hexadecimal value in the format of \"[SCHEMA]\\0USER\\0[PASSWORD]\".\n     */\n    getInitialAuthData() {\n      const schema = this.getSchema();\n      const user = this.getUser();\n      const password = this.getPassword(); // We want the buffer to be zero-filled by default, so we should\n      // use Buffer.alloc().\n\n      const authData = Buffer.alloc(schema.length + user.length + password.length + 2);\n      authData.write(schema);\n      authData.write(user, schema.length + 1);\n      authData.write(password, schema.length + user.length + 2);\n      return authData;\n    },\n\n    /**\n     * Retrieve the name of the authentication mechanism (client plugin).\n     * @function\n     * @name module:PlainAuth#getName\n     * @returns {string} 'PLAIN'\n     */\n    getName() {\n      return Name;\n    },\n\n    /**\n     * Generate the payload for the second authentication step.\n     * @function\n     * @name module:PlainAuth#getNextAuthData\n     * @throws {Error} Will throw a error if called, since it should not be used.\n     */\n    getNextAuthData() {\n      throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_AUTH_UNEXPECTED_STEP, this.getName()));\n    }\n\n  });\n}\n\nPlainAuth.Name = Name;\nmodule.exports = PlainAuth;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Authentication/PlainAuth.js"],"names":["authPlugin","require","errors","util","Name","PlainAuth","state","Object","assign","getInitialAuthData","schema","getSchema","user","getUser","password","getPassword","authData","Buffer","alloc","length","write","getName","getNextAuthData","Error","format","MESSAGES","ER_DEVAPI_AUTH_UNEXPECTED_STEP","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,qBAAD,CAAtB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMG,IAAI,GAAG,OAAb;;AAEA,SAASC,SAAT,CAAoBC,KAApB,EAA2B;AACvB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,UAAU,CAACM,KAAD,CAA5B,EAAqC;AACxC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,kBAAkB,GAAI;AAClB,YAAMC,MAAM,GAAG,KAAKC,SAAL,EAAf;AACA,YAAMC,IAAI,GAAG,KAAKC,OAAL,EAAb;AACA,YAAMC,QAAQ,GAAG,KAAKC,WAAL,EAAjB,CAHkB,CAKlB;AACA;;AACA,YAAMC,QAAQ,GAAGC,MAAM,CAACC,KAAP,CAAaR,MAAM,CAACS,MAAP,GAAgBP,IAAI,CAACO,MAArB,GAA8BL,QAAQ,CAACK,MAAvC,GAAgD,CAA7D,CAAjB;AACAH,MAAAA,QAAQ,CAACI,KAAT,CAAeV,MAAf;AACAM,MAAAA,QAAQ,CAACI,KAAT,CAAeR,IAAf,EAAqBF,MAAM,CAACS,MAAP,GAAgB,CAArC;AACAH,MAAAA,QAAQ,CAACI,KAAT,CAAeN,QAAf,EAAyBJ,MAAM,CAACS,MAAP,GAAgBP,IAAI,CAACO,MAArB,GAA8B,CAAvD;AAEA,aAAOH,QAAP;AACH,KApBuC;;AAsBxC;AACR;AACA;AACA;AACA;AACA;AACQK,IAAAA,OAAO,GAAI;AACP,aAAOjB,IAAP;AACH,KA9BuC;;AAgCxC;AACR;AACA;AACA;AACA;AACA;AACQkB,IAAAA,eAAe,GAAI;AACf,YAAM,IAAIC,KAAJ,CAAUpB,IAAI,CAACqB,MAAL,CAAYtB,MAAM,CAACuB,QAAP,CAAgBC,8BAA5B,EAA4D,KAAKL,OAAL,EAA5D,CAAV,CAAN;AACH;;AAxCuC,GAArC,CAAP;AA0CH;;AAEDhB,SAAS,CAACD,IAAV,GAAiBA,IAAjB;AAEAuB,MAAM,CAACC,OAAP,GAAiBvB,SAAjB","sourcesContent":["/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst authPlugin = require('./AuthPlugin');\nconst errors = require('../constants/errors');\nconst util = require('util');\n\nconst Name = 'PLAIN';\n\nfunction PlainAuth (state) {\n    return Object.assign({}, authPlugin(state), {\n        /**\n         * Generate the payload for the first authentication step.\n         * @function\n         * @name module:PlainAuth#getInitialAuthData\n         * @returns {Buffer} A Node.js buffer with a hexadecimal value in the format of \"[SCHEMA]\\0USER\\0[PASSWORD]\".\n         */\n        getInitialAuthData () {\n            const schema = this.getSchema();\n            const user = this.getUser();\n            const password = this.getPassword();\n\n            // We want the buffer to be zero-filled by default, so we should\n            // use Buffer.alloc().\n            const authData = Buffer.alloc(schema.length + user.length + password.length + 2);\n            authData.write(schema);\n            authData.write(user, schema.length + 1);\n            authData.write(password, schema.length + user.length + 2);\n\n            return authData;\n        },\n\n        /**\n         * Retrieve the name of the authentication mechanism (client plugin).\n         * @function\n         * @name module:PlainAuth#getName\n         * @returns {string} 'PLAIN'\n         */\n        getName () {\n            return Name;\n        },\n\n        /**\n         * Generate the payload for the second authentication step.\n         * @function\n         * @name module:PlainAuth#getNextAuthData\n         * @throws {Error} Will throw a error if called, since it should not be used.\n         */\n        getNextAuthData () {\n            throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_AUTH_UNEXPECTED_STEP, this.getName()));\n        }\n    });\n}\n\nPlainAuth.Name = Name;\n\nmodule.exports = PlainAuth;\n"]},"metadata":{},"sourceType":"script"}