{"ast":null,"code":"/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst Table = require('./Table');\n\nconst crypto = require('crypto');\n\nconst errors = require('../constants/errors');\n\nconst logger = require('../logger');\n\nconst schema = require('./Schema');\n\nconst sqlExecute = require('./SqlExecute');\n\nconst warnings = require('../constants/warnings');\n\nconst log = logger('api:session');\n/**\n * XDevAPI session API.\n * @module Session\n */\n\n/**\n * @private\n * @alias module:Session\n * @param {module:Connection} [connection] - X Protocol connection instance\n * @returns {module:Session}\n */\n\nfunction Session(connection) {\n  // With a connection pool, the connection instance is re-used in different\n  // sessions. This means each session needs to have its own view of it.\n  const state = {\n    properties: {\n      auth: connection.getAuth(),\n      host: connection.getServerHostname(),\n      pooling: connection.isFromPool(),\n      port: connection.getServerPort(),\n      schema: connection.getSchemaName(),\n      socket: connection.getServerSocketPath(),\n      tls: connection.isSecure(),\n      user: connection.getUser()\n    }\n  }; // The \"dbUser\" and \"ssl\" properties are deprecated.\n\n  state.properties = Object.defineProperties(state.properties, {\n    dbUser: {\n      enumerable: true,\n\n      get() {\n        log.warning('inspect', warnings.MESSAGES.WARN_DEPRECATED_DB_USER, {\n          type: warnings.TYPES.DEPRECATION,\n          code: warnings.CODES.DEPRECATION\n        });\n        return state.properties.user;\n      }\n\n    },\n    ssl: {\n      enumerable: true,\n\n      get() {\n        log.warning('inspect', warnings.MESSAGES.WARN_DEPRECATED_SSL_OPTION, {\n          type: warnings.TYPES.DEPRECATION,\n          code: warnings.CODES.DEPRECATION\n        });\n        return state.properties.tls;\n      }\n\n    }\n  });\n  return {\n    /**\n     * Commit an ongoing database transaction in the scope of the current session.\n     * @function\n     * @name module:Session#commit\n     * @returns {Promise}\n     */\n    commit() {\n      return this.sql('COMMIT').execute().then(() => {\n        return true;\n      });\n    },\n\n    /**\n     * Close the underlying connection to the database or release it back\n     * into a connection pool.\n     * @function\n     * @name module:Session#close\n     * @returns {Promise}\n     */\n    close() {\n      return connection.close();\n    },\n\n    /**\n     * Create a new database schema.\n     * @function\n     * @name module:Session#createSchema\n     * @param {string} name - name of the schema\n     * @returns {Promise<module:Schema>} A Promise that resolves to the schema instance.\n     */\n    createSchema(name) {\n      // TODO(Rui): Table.escapeIdentifier belongs somewhere else.\n      return this.sql(`CREATE DATABASE ${Table.escapeIdentifier(name)}`).execute().then(() => {\n        return this.getSchema(name);\n      });\n    },\n\n    /**\n     * Drop a database schema. If the schema does not exist, nothing\n     * happens.\n     * @function\n     * @name module:Session#dropSchema\n     * @param {string} name - name of the schema\n     * @returns {Promise<boolean>} Returns true if the schema with the\n     * given name was removed from the database or false if it did not\n     * exist in the database.\n     */\n    dropSchema(name) {\n      // TODO(Rui): Check if we can return false when the schema does not exist.\n      return this.sql(`DROP DATABASE ${Table.escapeIdentifier(name)}`).execute().then(() => true).catch(err => {\n        // Don't fail if the schema does not exist.\n        if (!err.info || err.info.code !== errors.ER_DB_DROP_EXISTS) {\n          throw err;\n        }\n\n        return false;\n      });\n    },\n\n    /**\n     * Executes a raw SQL statement in the database and reports back any\n     * results.\n     * @function\n     * @name module:Session#executeSql\n     * @param {string} sql - SQL statement\n     * @returns {Promise<module:SqlResult>}\n     * @deprecated Will be removed in future versions. Use {@link module:Session#sql|Session.sql()} instead.\n     */\n    executeSql(sql) {\n      log.warning('executeSql', warnings.MESSAGES.WARN_DEPRECATED_EXECUTE_SQL, {\n        type: warnings.TYPES.DEPRECATION,\n        code: warnings.CODES.DEPRECATION\n      });\n      return this.sql(sql);\n    },\n\n    /**\n     * Returns an instance of the underlying connection (private API).\n     * @private\n     * @function\n     * @name module:Session#getConnection_\n     * @returns {module:Connection}\n     */\n    getConnection_() {\n      return connection;\n    },\n\n    /**\n     * Retrieve the instance of any default schema associated to the\n     * underlying database connection. If there is no default schema,\n     * the instance will be undefined.\n     * @function\n     * @name module:Session#getDefaultSchema\n     * @returns {module:Schema}\n     */\n    getDefaultSchema() {\n      const name = connection.getSchemaName();\n\n      if (!name) {\n        return undefined;\n      }\n\n      return this.getSchema(name);\n    },\n\n    /**\n     * Retrieve an instance of a schema with the given name.\n     * @function\n     * @name module:Session#getSchema\n     * @param {string} name - name of the schema\n     * @returns {module:Schema}\n     */\n    getSchema(name) {\n      return schema(connection, name);\n    },\n\n    /**\n     * Retrieve a list of instances of all the existing schemas in the\n     * database.\n     * @function\n     * @name module:Session#getSchemas\n     * @returns {Promise<module:Schema[]>}\n     */\n    getSchemas() {\n      return this.sql('SHOW DATABASES').execute().then(res => {\n        return res.fetchAll().map(row => this.getSchema(row[0]));\n      });\n    },\n\n    // TODO(Rui): Maybe deprecate in the future.\n\n    /**\n     * Retrieve the details of the underlying database connection.\n     * @function\n     * @name module:Session#inspect\n     * @returns {Object}\n     */\n    inspect() {\n      return state.properties;\n    },\n\n    /**\n     * Release a given savepoint from an ongoing transaction in the\n     * database.\n     * @function\n     * @name module:Session#releaseSavepoint\n     * @param {string} name - name of the savepoint\n     * @returns {Promise}\n     */\n    releaseSavepoint(name) {\n      if (typeof name !== 'string' || !name.trim().length) {\n        return Promise.reject(new Error(errors.MESSAGES.ER_DEVAPI_BAD_SAVEPOINT_NAME));\n      }\n\n      return this.sql(`RELEASE SAVEPOINT ${Table.escapeIdentifier(name)}`).execute();\n    },\n\n    /**\n     * Roll back an ongoing database transaction in the scope of the\n     * current session.\n     * @function\n     * @name module:Session#rollback\n     * @returns {Promise}\n     */\n    rollback() {\n      return this.sql('ROLLBACK').execute().then(() => {\n        return true;\n      });\n    },\n\n    /**\n     * Go back to an existing savepoint within the scope of an ongoing\n     * transaction.\n     * @function\n     * @name module:Session#rollbackTo\n     * @param {string} name - name of the savepoint\n     * @returns {Promise}\n     */\n    rollbackTo(name) {\n      if (typeof name !== 'string' || !name.trim().length) {\n        return Promise.reject(new Error(errors.MESSAGES.ER_DEVAPI_BAD_SAVEPOINT_NAME));\n      }\n\n      return this.sql(`ROLLBACK TO SAVEPOINT ${Table.escapeIdentifier(name)}`).execute();\n    },\n\n    /**\n     * Create a new savepoint with the given name in the scope of ongoing\n     * transaction. If a savepoint name is not provided, one will be\n     * auto-generated.\n     * @function\n     * @name module:Session#setSavepoint\n     * @param {string} [name] - name of the savepoint\n     * @returns {Promise<string>} A Promise that resolves to the name of the savepoint.\n     */\n    setSavepoint() {\n      let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : `connector-nodejs-${crypto.randomBytes(16).toString('hex')}`;\n\n      if (typeof name !== 'string' || !name.trim().length) {\n        return Promise.reject(new Error(errors.MESSAGES.ER_DEVAPI_BAD_SAVEPOINT_NAME));\n      }\n\n      return this.sql(`SAVEPOINT ${Table.escapeIdentifier(name)}`).execute().then(() => {\n        return name;\n      });\n    },\n\n    /**\n     * Creates a new operational context to execute a SQL statement in the\n     * database.\n     * @function\n     * @name module:Session#sql\n     * @param {string} statement - SQL statement\n     * @returns {Promise<module:SqlResult>}\n     */\n    sql(statement) {\n      return sqlExecute(connection, statement);\n    },\n\n    /**\n     * Begin a new database transaction in the scope of the current\n     * session.\n     * @function\n     * @name module:Session#startTransaction\n     * @returns {Promise}\n     */\n    startTransaction() {\n      return this.sql('BEGIN').execute().then(() => {\n        return true;\n      });\n    }\n\n  };\n}\n\nmodule.exports = Session;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/Session.js"],"names":["Table","require","crypto","errors","logger","schema","sqlExecute","warnings","log","Session","connection","state","properties","auth","getAuth","host","getServerHostname","pooling","isFromPool","port","getServerPort","getSchemaName","socket","getServerSocketPath","tls","isSecure","user","getUser","Object","defineProperties","dbUser","enumerable","get","warning","MESSAGES","WARN_DEPRECATED_DB_USER","type","TYPES","DEPRECATION","code","CODES","ssl","WARN_DEPRECATED_SSL_OPTION","commit","sql","execute","then","close","createSchema","name","escapeIdentifier","getSchema","dropSchema","catch","err","info","ER_DB_DROP_EXISTS","executeSql","WARN_DEPRECATED_EXECUTE_SQL","getConnection_","getDefaultSchema","undefined","getSchemas","res","fetchAll","map","row","inspect","releaseSavepoint","trim","length","Promise","reject","Error","ER_DEVAPI_BAD_SAVEPOINT_NAME","rollback","rollbackTo","setSavepoint","randomBytes","toString","statement","startTransaction","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst Table = require('./Table');\nconst crypto = require('crypto');\nconst errors = require('../constants/errors');\nconst logger = require('../logger');\nconst schema = require('./Schema');\nconst sqlExecute = require('./SqlExecute');\nconst warnings = require('../constants/warnings');\n\nconst log = logger('api:session');\n\n/**\n * XDevAPI session API.\n * @module Session\n */\n\n/**\n * @private\n * @alias module:Session\n * @param {module:Connection} [connection] - X Protocol connection instance\n * @returns {module:Session}\n */\nfunction Session (connection) {\n    // With a connection pool, the connection instance is re-used in different\n    // sessions. This means each session needs to have its own view of it.\n    const state = {\n        properties: {\n            auth: connection.getAuth(),\n            host: connection.getServerHostname(),\n            pooling: connection.isFromPool(),\n            port: connection.getServerPort(),\n            schema: connection.getSchemaName(),\n            socket: connection.getServerSocketPath(),\n            tls: connection.isSecure(),\n            user: connection.getUser()\n        }\n    };\n    // The \"dbUser\" and \"ssl\" properties are deprecated.\n    state.properties = Object.defineProperties(state.properties, {\n        dbUser: {\n            enumerable: true,\n            get () {\n                log.warning('inspect', warnings.MESSAGES.WARN_DEPRECATED_DB_USER, {\n                    type: warnings.TYPES.DEPRECATION,\n                    code: warnings.CODES.DEPRECATION\n                });\n\n                return state.properties.user;\n            }\n        },\n        ssl: {\n            enumerable: true,\n            get () {\n                log.warning('inspect', warnings.MESSAGES.WARN_DEPRECATED_SSL_OPTION, {\n                    type: warnings.TYPES.DEPRECATION,\n                    code: warnings.CODES.DEPRECATION\n                });\n\n                return state.properties.tls;\n            }\n        }\n    });\n\n    return {\n        /**\n         * Commit an ongoing database transaction in the scope of the current session.\n         * @function\n         * @name module:Session#commit\n         * @returns {Promise}\n         */\n        commit () {\n            return this.sql('COMMIT').execute()\n                .then(() => {\n                    return true;\n                });\n        },\n\n        /**\n         * Close the underlying connection to the database or release it back\n         * into a connection pool.\n         * @function\n         * @name module:Session#close\n         * @returns {Promise}\n         */\n        close () {\n            return connection.close();\n        },\n\n        /**\n         * Create a new database schema.\n         * @function\n         * @name module:Session#createSchema\n         * @param {string} name - name of the schema\n         * @returns {Promise<module:Schema>} A Promise that resolves to the schema instance.\n         */\n        createSchema (name) {\n            // TODO(Rui): Table.escapeIdentifier belongs somewhere else.\n            return this.sql(`CREATE DATABASE ${Table.escapeIdentifier(name)}`)\n                .execute()\n                .then(() => {\n                    return this.getSchema(name);\n                });\n        },\n\n        /**\n         * Drop a database schema. If the schema does not exist, nothing\n         * happens.\n         * @function\n         * @name module:Session#dropSchema\n         * @param {string} name - name of the schema\n         * @returns {Promise<boolean>} Returns true if the schema with the\n         * given name was removed from the database or false if it did not\n         * exist in the database.\n         */\n        dropSchema (name) {\n            // TODO(Rui): Check if we can return false when the schema does not exist.\n            return this.sql(`DROP DATABASE ${Table.escapeIdentifier(name)}`)\n                .execute()\n                .then(() => true)\n                .catch(err => {\n                    // Don't fail if the schema does not exist.\n                    if (!err.info || err.info.code !== errors.ER_DB_DROP_EXISTS) {\n                        throw err;\n                    }\n\n                    return false;\n                });\n        },\n\n        /**\n         * Executes a raw SQL statement in the database and reports back any\n         * results.\n         * @function\n         * @name module:Session#executeSql\n         * @param {string} sql - SQL statement\n         * @returns {Promise<module:SqlResult>}\n         * @deprecated Will be removed in future versions. Use {@link module:Session#sql|Session.sql()} instead.\n         */\n        executeSql (sql) {\n            log.warning('executeSql', warnings.MESSAGES.WARN_DEPRECATED_EXECUTE_SQL, {\n                type: warnings.TYPES.DEPRECATION,\n                code: warnings.CODES.DEPRECATION\n            });\n\n            return this.sql(sql);\n        },\n\n        /**\n         * Returns an instance of the underlying connection (private API).\n         * @private\n         * @function\n         * @name module:Session#getConnection_\n         * @returns {module:Connection}\n         */\n        getConnection_ () {\n            return connection;\n        },\n\n        /**\n         * Retrieve the instance of any default schema associated to the\n         * underlying database connection. If there is no default schema,\n         * the instance will be undefined.\n         * @function\n         * @name module:Session#getDefaultSchema\n         * @returns {module:Schema}\n         */\n        getDefaultSchema () {\n            const name = connection.getSchemaName();\n\n            if (!name) {\n                return undefined;\n            }\n\n            return this.getSchema(name);\n        },\n\n        /**\n         * Retrieve an instance of a schema with the given name.\n         * @function\n         * @name module:Session#getSchema\n         * @param {string} name - name of the schema\n         * @returns {module:Schema}\n         */\n        getSchema (name) {\n            return schema(connection, name);\n        },\n\n        /**\n         * Retrieve a list of instances of all the existing schemas in the\n         * database.\n         * @function\n         * @name module:Session#getSchemas\n         * @returns {Promise<module:Schema[]>}\n         */\n        getSchemas () {\n            return this.sql('SHOW DATABASES')\n                .execute()\n                .then(res => {\n                    return res.fetchAll().map(row => this.getSchema(row[0]));\n                });\n        },\n\n        // TODO(Rui): Maybe deprecate in the future.\n        /**\n         * Retrieve the details of the underlying database connection.\n         * @function\n         * @name module:Session#inspect\n         * @returns {Object}\n         */\n        inspect () {\n            return state.properties;\n        },\n\n        /**\n         * Release a given savepoint from an ongoing transaction in the\n         * database.\n         * @function\n         * @name module:Session#releaseSavepoint\n         * @param {string} name - name of the savepoint\n         * @returns {Promise}\n         */\n        releaseSavepoint (name) {\n            if (typeof name !== 'string' || !name.trim().length) {\n                return Promise.reject(new Error(errors.MESSAGES.ER_DEVAPI_BAD_SAVEPOINT_NAME));\n            }\n\n            return this.sql(`RELEASE SAVEPOINT ${Table.escapeIdentifier(name)}`)\n                .execute();\n        },\n\n        /**\n         * Roll back an ongoing database transaction in the scope of the\n         * current session.\n         * @function\n         * @name module:Session#rollback\n         * @returns {Promise}\n         */\n        rollback () {\n            return this.sql('ROLLBACK').execute()\n                .then(() => {\n                    return true;\n                });\n        },\n\n        /**\n         * Go back to an existing savepoint within the scope of an ongoing\n         * transaction.\n         * @function\n         * @name module:Session#rollbackTo\n         * @param {string} name - name of the savepoint\n         * @returns {Promise}\n         */\n        rollbackTo (name) {\n            if (typeof name !== 'string' || !name.trim().length) {\n                return Promise.reject(new Error(errors.MESSAGES.ER_DEVAPI_BAD_SAVEPOINT_NAME));\n            }\n            return this.sql(`ROLLBACK TO SAVEPOINT ${Table.escapeIdentifier(name)}`)\n                .execute();\n        },\n\n        /**\n         * Create a new savepoint with the given name in the scope of ongoing\n         * transaction. If a savepoint name is not provided, one will be\n         * auto-generated.\n         * @function\n         * @name module:Session#setSavepoint\n         * @param {string} [name] - name of the savepoint\n         * @returns {Promise<string>} A Promise that resolves to the name of the savepoint.\n         */\n        setSavepoint (name = `connector-nodejs-${crypto.randomBytes(16).toString('hex')}`) {\n            if (typeof name !== 'string' || !name.trim().length) {\n                return Promise.reject(new Error(errors.MESSAGES.ER_DEVAPI_BAD_SAVEPOINT_NAME));\n            }\n\n            return this.sql(`SAVEPOINT ${Table.escapeIdentifier(name)}`)\n                .execute()\n                .then(() => {\n                    return name;\n                });\n        },\n\n        /**\n         * Creates a new operational context to execute a SQL statement in the\n         * database.\n         * @function\n         * @name module:Session#sql\n         * @param {string} statement - SQL statement\n         * @returns {Promise<module:SqlResult>}\n         */\n        sql (statement) {\n            return sqlExecute(connection, statement);\n        },\n\n        /**\n         * Begin a new database transaction in the scope of the current\n         * session.\n         * @function\n         * @name module:Session#startTransaction\n         * @returns {Promise}\n         */\n        startTransaction () {\n            return this.sql('BEGIN').execute()\n                .then(() => {\n                    return true;\n                });\n        }\n    };\n}\n\nmodule.exports = Session;\n"]},"metadata":{},"sourceType":"script"}