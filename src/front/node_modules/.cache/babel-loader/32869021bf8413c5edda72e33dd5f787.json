{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst ScalarStub = require('../../../Stubs/mysqlx_datatypes_pb').Scalar;\n\nconst bytes = require('../../ScalarValues/bytes');\n\nconst octets = require('./Octets');\n\nconst str = require('./String');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * Create a Mysqlx.Datatypes.Scalar.V_BOOL.\n * @function\n * @private\n * @param {boolean} datatype - JavaScript boolean\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\n\n\nfunction createBoolean(datatype) {\n  const scalar = new ScalarStub();\n  scalar.setType(ScalarStub.Type.V_BOOL);\n  scalar.setVBool(datatype);\n  return scalar;\n}\n/**\n * Create a Mysqlx.Datatypes.Scalar.V_DOUBLE from a JavaScript number.\n * @function\n * @private\n * @param {number} datatype - JavaScript number\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\n\n\nfunction createDouble(datatype) {\n  const scalar = new ScalarStub();\n  scalar.setType(ScalarStub.Type.V_DOUBLE);\n  scalar.setVDouble(datatype);\n  return scalar;\n}\n/**\n * Create a Mysqlx.Datatypes.Scalar from a JavaScript integer number.\n * @function\n * @private\n * @param {number} datatype - JavaScript integer number\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\n\n\nfunction createInteger(datatype) {\n  if (datatype > 0) {\n    return createUnsignedInteger(datatype);\n  }\n\n  return createSignedInteger(datatype);\n}\n/**\n * Create a Mysqlx.Datatypes.Scalar.V_NULL.\n * @function\n * @private\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\n\n\nfunction createNull() {\n  const scalar = new ScalarStub();\n  scalar.setType(ScalarStub.Type.V_NULL);\n  return scalar;\n}\n/**\n * Create a Mysqlx.Datatypes.Scalar from a JavaScript number.\n * @function\n * @private\n * @param {number} datatype - JavaScript number\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\n\n\nfunction createNumber(datatype) {\n  if (Number.isInteger(datatype)) {\n    return createInteger(datatype);\n  } // If the number is not an integer, we should always encode it as a\n  // V_DOUBLE in order to avoid losing precision.\n\n\n  return createDouble(datatype);\n}\n/**\n * Create a Mysqlx.Datatypes.Scalar.V_OCTETS from a Node.js Buffer.\n * @function\n * @private\n * @param {Buffer} datatypes - Node.js Buffer\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\n\n\nfunction createOctets(datatype) {\n  const bin = new ScalarStub.Octets();\n  bin.setValue(bytes.create(datatype).valueOf());\n  const scalar = new ScalarStub();\n  scalar.setType(ScalarStub.Type.V_OCTETS);\n  scalar.setVOctets(bin);\n  return scalar;\n}\n/**\n * Create a Mysqlx.Datatypes.Scalar.V_SINT from a JavaScript number.\n * @function\n * @private\n * @param {number} datatype - JavaScript number\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\n\n\nfunction createSignedInteger(datatype) {\n  const scalar = new ScalarStub();\n  scalar.setType(ScalarStub.Type.V_SINT);\n  scalar.setVSignedInt(datatype);\n  return scalar;\n}\n/**\n * Create a Mysqlx.Datatypes.Scalar.V_STRING from a JavaScript String.\n * @function\n * @private\n * @param {string} datatype - JavaScript string\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\n\n\nfunction createString(datatype) {\n  const str = new ScalarStub.String();\n  str.setValue(bytes.create(Buffer.from(datatype)).valueOf());\n  const scalar = new ScalarStub();\n  scalar.setType(ScalarStub.Type.V_STRING);\n  scalar.setVString(str);\n  return scalar;\n}\n/**\n * Create a Mysqlx.Datatypes.Scalar.V_UINT from a JavaScript number.\n * @function\n * @private\n * @param {number} datatype - JavaScript number\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\n\n\nfunction createUnsignedInteger(datatype) {\n  const scalar = new ScalarStub();\n  scalar.setType(ScalarStub.Type.V_UINT);\n  scalar.setVUnsignedInt(datatype);\n  return scalar;\n}\n/**\n * Check if a value is undefined.\n * @function\n * @private\n * @returns {boolean}\n */\n\n\nfunction isUndefined(value) {\n  return typeof value === 'undefined';\n}\n/**\n * Check if a value is an instance of the Mysqlx.Datatypes.Scalar stub.\n * @function\n * @private\n * @returns {boolean}\n */\n\n\nfunction isProto(value) {\n  return value instanceof ScalarStub;\n}\n/**\n * Check if a value is a JavaScript number.\n * @function\n * @private\n * @returns {boolean}\n */\n\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n/**\n * Check if a value is null.\n * @function\n * @private\n * @returns {boolean}\n */\n\n\nfunction isNull(value) {\n  return value === null;\n}\n/**\n * Check if a value is an instance of a Node.js Buffer.\n * @function\n * @private\n * @returns {boolean}\n */\n\n\nfunction isBuffer(value) {\n  return Buffer.isBuffer(value);\n}\n/**\n * Check if a value is a boolean.\n * @function\n * @private\n * @returns {boolean}\n */\n\n\nfunction isBoolean(value) {\n  return typeof value === 'boolean';\n}\n/**\n * Check if a value is an instance of a JavaScript Date.\n * @function\n * @private\n * @returns {boolean}\n */\n\n\nfunction isDate(value) {\n  return value instanceof Date;\n}\n/**\n * Check if a value is a JavaScript string.\n * @function\n * @private\n * @returns {boolean}\n */\n\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n/**\n * @private\n * @alias module:Scalar\n * @param {Mysqlx.Datatypes.Scalar} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Datatypes.Scalar}\n */\n\n\nfunction Scalar(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Retrieve the name of the X Protocol type of the scalar.\n     * @function\n     * @name module:adapters.Mysqlx.Datatypes.Scalar#getType\n     * @returns {string}\n     */\n    getType() {\n      return Object.keys(ScalarStub.Type).filter(k => ScalarStub.Type[k] === proto.getType())[0];\n    },\n\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Datatypes.Scalar#toJSON\n     * @returns {Object}\n     */\n    toJSON() {\n      switch (proto.getType()) {\n        case ScalarStub.Type.V_SINT:\n          return {\n            type: this.getType(),\n            v_signed_int: proto.getVSignedInt()\n          };\n\n        case ScalarStub.Type.V_UINT:\n          return {\n            type: this.getType(),\n            v_unsigned_int: proto.getVUnsignedInt()\n          };\n\n        case ScalarStub.Type.V_NULL:\n          return {\n            type: this.getType()\n          };\n\n        case ScalarStub.Type.V_OCTETS:\n          return {\n            type: this.getType(),\n            v_octets: octets(proto.getVOctets()).toJSON()\n          };\n\n        case ScalarStub.Type.V_DOUBLE:\n          return {\n            type: this.getType(),\n            v_double: proto.getVDouble()\n          };\n\n        case ScalarStub.Type.V_FLOAT:\n          return {\n            type: this.getType(),\n            v_float: proto.getVFloat()\n          };\n\n        case ScalarStub.Type.V_BOOL:\n          return {\n            type: this.getType(),\n            v_bool: proto.getVBool()\n          };\n\n        case ScalarStub.Type.V_STRING:\n          return {\n            type: this.getType(),\n            v_string: str(proto.getVString()).toJSON()\n          };\n      }\n    },\n\n    /**\n     * Retrieve the underlying value encoded in the appropriate JavaScript type.\n     * @function\n     * @name module:adapters.Mysqlx.Datatypes.Scalar#toLiteral\n     */\n    toLiteral() {\n      switch (proto.getType()) {\n        case ScalarStub.Type.V_SINT:\n          return proto.getVSignedInt();\n\n        case ScalarStub.Type.V_UINT:\n          return proto.getVUnsignedInt();\n\n        case ScalarStub.Type.V_NULL:\n          return null;\n\n        case ScalarStub.Type.V_OCTETS:\n          return octets(proto.getVOctets()).toBuffer();\n\n        case ScalarStub.Type.V_DOUBLE:\n          return proto.getVDouble();\n\n        case ScalarStub.Type.V_FLOAT:\n          return proto.getVFloat();\n\n        case ScalarStub.Type.V_BOOL:\n          return proto.getVBool();\n\n        case ScalarStub.Type.V_STRING:\n          return str(proto.getVString()).toString();\n      }\n    }\n\n  });\n}\n/**\n * Checks if a value can be encoded as a Mysqlx.Datatypes.Scalar.\n * @returns {boolean}\n */\n\n\nScalar.canEncode = function (value) {\n  return isUndefined(value) || isProto(value) || isNumber(value) || isNull(value) || isBuffer(value) || isBoolean(value) || isDate(value) || isString(value);\n};\n/**\n * Creates and wraps a Mysqlx.Datatypes.Scalar instance for a given value.\n * @returns {module:adapters.Mysqlx.Datatypes.Scalar}\n */\n\n\nScalar.create = function (value) {\n  if (isUndefined(value)) {\n    return Scalar();\n  }\n\n  if (isProto(value)) {\n    return Scalar(value);\n  }\n\n  if (isNumber(value)) {\n    return Scalar(createNumber(value));\n  }\n\n  if (isNull(value)) {\n    return Scalar(createNull());\n  }\n\n  if (isBuffer(value)) {\n    return Scalar(createOctets(value));\n  }\n\n  if (isBoolean(value)) {\n    return Scalar(createBoolean(value));\n  }\n\n  if (isDate(value)) {\n    return Scalar(createString(value.toJSON()));\n  }\n\n  if (isString(value)) {\n    return Scalar(createString(value));\n  }\n};\n\nmodule.exports = Scalar;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Datatypes/Scalar.js"],"names":["ScalarStub","require","Scalar","bytes","octets","str","wraps","createBoolean","datatype","scalar","setType","Type","V_BOOL","setVBool","createDouble","V_DOUBLE","setVDouble","createInteger","createUnsignedInteger","createSignedInteger","createNull","V_NULL","createNumber","Number","isInteger","createOctets","bin","Octets","setValue","create","valueOf","V_OCTETS","setVOctets","V_SINT","setVSignedInt","createString","String","Buffer","from","V_STRING","setVString","V_UINT","setVUnsignedInt","isUndefined","value","isProto","isNumber","isNull","isBuffer","isBoolean","isDate","Date","isString","proto","Object","assign","getType","keys","filter","k","toJSON","type","v_signed_int","getVSignedInt","v_unsigned_int","getVUnsignedInt","v_octets","getVOctets","v_double","getVDouble","V_FLOAT","v_float","getVFloat","v_bool","getVBool","v_string","getVString","toLiteral","toBuffer","toString","canEncode","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst ScalarStub = require('../../../Stubs/mysqlx_datatypes_pb').Scalar;\nconst bytes = require('../../ScalarValues/bytes');\nconst octets = require('./Octets');\nconst str = require('./String');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * Create a Mysqlx.Datatypes.Scalar.V_BOOL.\n * @function\n * @private\n * @param {boolean} datatype - JavaScript boolean\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\nfunction createBoolean (datatype) {\n    const scalar = new ScalarStub();\n    scalar.setType(ScalarStub.Type.V_BOOL);\n    scalar.setVBool(datatype);\n\n    return scalar;\n}\n\n/**\n * Create a Mysqlx.Datatypes.Scalar.V_DOUBLE from a JavaScript number.\n * @function\n * @private\n * @param {number} datatype - JavaScript number\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\nfunction createDouble (datatype) {\n    const scalar = new ScalarStub();\n    scalar.setType(ScalarStub.Type.V_DOUBLE);\n    scalar.setVDouble(datatype);\n\n    return scalar;\n}\n\n/**\n * Create a Mysqlx.Datatypes.Scalar from a JavaScript integer number.\n * @function\n * @private\n * @param {number} datatype - JavaScript integer number\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\nfunction createInteger (datatype) {\n    if (datatype > 0) {\n        return createUnsignedInteger(datatype);\n    }\n\n    return createSignedInteger(datatype);\n}\n\n/**\n * Create a Mysqlx.Datatypes.Scalar.V_NULL.\n * @function\n * @private\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\nfunction createNull () {\n    const scalar = new ScalarStub();\n    scalar.setType(ScalarStub.Type.V_NULL);\n\n    return scalar;\n}\n\n/**\n * Create a Mysqlx.Datatypes.Scalar from a JavaScript number.\n * @function\n * @private\n * @param {number} datatype - JavaScript number\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\nfunction createNumber (datatype) {\n    if (Number.isInteger(datatype)) {\n        return createInteger(datatype);\n    }\n\n    // If the number is not an integer, we should always encode it as a\n    // V_DOUBLE in order to avoid losing precision.\n    return createDouble(datatype);\n}\n\n/**\n * Create a Mysqlx.Datatypes.Scalar.V_OCTETS from a Node.js Buffer.\n * @function\n * @private\n * @param {Buffer} datatypes - Node.js Buffer\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\nfunction createOctets (datatype) {\n    const bin = new ScalarStub.Octets();\n    bin.setValue(bytes.create(datatype).valueOf());\n\n    const scalar = new ScalarStub();\n    scalar.setType(ScalarStub.Type.V_OCTETS);\n    scalar.setVOctets(bin);\n\n    return scalar;\n}\n\n/**\n * Create a Mysqlx.Datatypes.Scalar.V_SINT from a JavaScript number.\n * @function\n * @private\n * @param {number} datatype - JavaScript number\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\nfunction createSignedInteger (datatype) {\n    const scalar = new ScalarStub();\n    scalar.setType(ScalarStub.Type.V_SINT);\n    scalar.setVSignedInt(datatype);\n\n    return scalar;\n}\n\n/**\n * Create a Mysqlx.Datatypes.Scalar.V_STRING from a JavaScript String.\n * @function\n * @private\n * @param {string} datatype - JavaScript string\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\nfunction createString (datatype) {\n    const str = new ScalarStub.String();\n    str.setValue(bytes.create(Buffer.from(datatype)).valueOf());\n\n    const scalar = new ScalarStub();\n    scalar.setType(ScalarStub.Type.V_STRING);\n    scalar.setVString(str);\n\n    return scalar;\n}\n\n/**\n * Create a Mysqlx.Datatypes.Scalar.V_UINT from a JavaScript number.\n * @function\n * @private\n * @param {number} datatype - JavaScript number\n * @returns {proto.Mysqlx.Datatypes.Scalar} The protobuf object version.\n */\nfunction createUnsignedInteger (datatype) {\n    const scalar = new ScalarStub();\n    scalar.setType(ScalarStub.Type.V_UINT);\n    scalar.setVUnsignedInt(datatype);\n\n    return scalar;\n}\n\n/**\n * Check if a value is undefined.\n * @function\n * @private\n * @returns {boolean}\n */\nfunction isUndefined (value) {\n    return typeof value === 'undefined';\n}\n\n/**\n * Check if a value is an instance of the Mysqlx.Datatypes.Scalar stub.\n * @function\n * @private\n * @returns {boolean}\n */\nfunction isProto (value) {\n    return value instanceof ScalarStub;\n}\n\n/**\n * Check if a value is a JavaScript number.\n * @function\n * @private\n * @returns {boolean}\n */\nfunction isNumber (value) {\n    return typeof value === 'number';\n}\n\n/**\n * Check if a value is null.\n * @function\n * @private\n * @returns {boolean}\n */\nfunction isNull (value) {\n    return value === null;\n}\n\n/**\n * Check if a value is an instance of a Node.js Buffer.\n * @function\n * @private\n * @returns {boolean}\n */\nfunction isBuffer (value) {\n    return Buffer.isBuffer(value);\n}\n\n/**\n * Check if a value is a boolean.\n * @function\n * @private\n * @returns {boolean}\n */\nfunction isBoolean (value) {\n    return typeof value === 'boolean';\n}\n\n/**\n * Check if a value is an instance of a JavaScript Date.\n * @function\n * @private\n * @returns {boolean}\n */\nfunction isDate (value) {\n    return value instanceof Date;\n}\n\n/**\n * Check if a value is a JavaScript string.\n * @function\n * @private\n * @returns {boolean}\n */\nfunction isString (value) {\n    return typeof value === 'string';\n}\n\n/**\n * @private\n * @alias module:Scalar\n * @param {Mysqlx.Datatypes.Scalar} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Datatypes.Scalar}\n */\nfunction Scalar (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Retrieve the name of the X Protocol type of the scalar.\n         * @function\n         * @name module:adapters.Mysqlx.Datatypes.Scalar#getType\n         * @returns {string}\n         */\n        getType () {\n            return Object.keys(ScalarStub.Type).filter(k => ScalarStub.Type[k] === proto.getType())[0];\n        },\n\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Datatypes.Scalar#toJSON\n         * @returns {Object}\n         */\n        toJSON () {\n            switch (proto.getType()) {\n            case ScalarStub.Type.V_SINT:\n                return { type: this.getType(), v_signed_int: proto.getVSignedInt() };\n            case ScalarStub.Type.V_UINT:\n                return { type: this.getType(), v_unsigned_int: proto.getVUnsignedInt() };\n            case ScalarStub.Type.V_NULL:\n                return { type: this.getType() };\n            case ScalarStub.Type.V_OCTETS:\n                return { type: this.getType(), v_octets: octets(proto.getVOctets()).toJSON() };\n            case ScalarStub.Type.V_DOUBLE:\n                return { type: this.getType(), v_double: proto.getVDouble() };\n            case ScalarStub.Type.V_FLOAT:\n                return { type: this.getType(), v_float: proto.getVFloat() };\n            case ScalarStub.Type.V_BOOL:\n                return { type: this.getType(), v_bool: proto.getVBool() };\n            case ScalarStub.Type.V_STRING:\n                return { type: this.getType(), v_string: str(proto.getVString()).toJSON() };\n            }\n        },\n\n        /**\n         * Retrieve the underlying value encoded in the appropriate JavaScript type.\n         * @function\n         * @name module:adapters.Mysqlx.Datatypes.Scalar#toLiteral\n         */\n        toLiteral () {\n            switch (proto.getType()) {\n            case ScalarStub.Type.V_SINT:\n                return proto.getVSignedInt();\n            case ScalarStub.Type.V_UINT:\n                return proto.getVUnsignedInt();\n            case ScalarStub.Type.V_NULL:\n                return null;\n            case ScalarStub.Type.V_OCTETS:\n                return octets(proto.getVOctets()).toBuffer();\n            case ScalarStub.Type.V_DOUBLE:\n                return proto.getVDouble();\n            case ScalarStub.Type.V_FLOAT:\n                return proto.getVFloat();\n            case ScalarStub.Type.V_BOOL:\n                return proto.getVBool();\n            case ScalarStub.Type.V_STRING:\n                return str(proto.getVString()).toString();\n            }\n        }\n    });\n}\n\n/**\n * Checks if a value can be encoded as a Mysqlx.Datatypes.Scalar.\n * @returns {boolean}\n */\nScalar.canEncode = function (value) {\n    return isUndefined(value) || isProto(value) || isNumber(value) || isNull(value) || isBuffer(value) || isBoolean(value) || isDate(value) || isString(value);\n};\n\n/**\n * Creates and wraps a Mysqlx.Datatypes.Scalar instance for a given value.\n * @returns {module:adapters.Mysqlx.Datatypes.Scalar}\n */\nScalar.create = function (value) {\n    if (isUndefined(value)) {\n        return Scalar();\n    }\n\n    if (isProto(value)) {\n        return Scalar(value);\n    }\n\n    if (isNumber(value)) {\n        return Scalar(createNumber(value));\n    }\n\n    if (isNull(value)) {\n        return Scalar(createNull());\n    }\n\n    if (isBuffer(value)) {\n        return Scalar(createOctets(value));\n    }\n\n    if (isBoolean(value)) {\n        return Scalar(createBoolean(value));\n    }\n\n    if (isDate(value)) {\n        return Scalar(createString(value.toJSON()));\n    }\n\n    if (isString(value)) {\n        return Scalar(createString(value));\n    }\n};\n\nmodule.exports = Scalar;\n"]},"metadata":{},"sourceType":"script"}