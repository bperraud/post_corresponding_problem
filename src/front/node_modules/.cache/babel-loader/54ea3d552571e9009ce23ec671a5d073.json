{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst MysqlxStub = require('../../Stubs/mysqlx_pb');\n\nconst bytes = require('../ScalarValues/bytes');\n\nconst wraps = require('../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Ok\n * @param {proto.Mysqlx.Ok} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Ok}\n */\n\n\nfunction Ok(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Ok#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return proto.toObject();\n    },\n\n    /**\n     * Return a plain JavaScript object version of the underlying protobuf instance.\n     * @function\n     * @name module:adapters.Mysqlx.Ok#toObject\n     * @returns {Object}\n     */\n    toObject() {\n      if (!proto.hasMsg()) {\n        return {};\n      }\n\n      return {\n        message: proto.getMsg()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Ok}\n */\n\n\nOk.deserialize = function (buffer) {\n  return Ok(MysqlxStub.Ok.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nOk.MESSAGE_ID = MysqlxStub.ServerMessages.Type.OK;\nmodule.exports = Ok;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Ok.js"],"names":["MysqlxStub","require","bytes","wraps","Ok","proto","Object","assign","toJSON","toObject","hasMsg","message","getMsg","deserialize","buffer","deserializeBinary","MESSAGE_ID","ServerMessages","Type","OK","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,uBAAD,CAA1B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,uBAAD,CAArB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,iBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,EAAT,CAAaC,KAAb,EAAoB;AAChB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAK,CAACE,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAOH,KAAK,CAACI,QAAN,EAAP;AACH,KATkC;;AAWnC;AACR;AACA;AACA;AACA;AACA;AACQA,IAAAA,QAAQ,GAAI;AACR,UAAI,CAACJ,KAAK,CAACK,MAAN,EAAL,EAAqB;AACjB,eAAO,EAAP;AACH;;AAED,aAAO;AAAEC,QAAAA,OAAO,EAAEN,KAAK,CAACO,MAAN;AAAX,OAAP;AACH;;AAvBkC,GAAhC,CAAP;AAyBH;AAED;AACA;AACA;AACA;;;AACAR,EAAE,CAACS,WAAH,GAAiB,UAAUC,MAAV,EAAkB;AAC/B,SAAOV,EAAE,CAACJ,UAAU,CAACI,EAAX,CAAcW,iBAAd,CAAgCb,KAAK,CAACW,WAAN,CAAkBC,MAAlB,CAAhC,CAAD,CAAT;AACH,CAFD;;AAIAV,EAAE,CAACY,UAAH,GAAgBhB,UAAU,CAACiB,cAAX,CAA0BC,IAA1B,CAA+BC,EAA/C;AAEAC,MAAM,CAACC,OAAP,GAAiBjB,EAAjB","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst MysqlxStub = require('../../Stubs/mysqlx_pb');\nconst bytes = require('../ScalarValues/bytes');\nconst wraps = require('../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Ok\n * @param {proto.Mysqlx.Ok} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Ok}\n */\nfunction Ok (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Ok#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return proto.toObject();\n        },\n\n        /**\n         * Return a plain JavaScript object version of the underlying protobuf instance.\n         * @function\n         * @name module:adapters.Mysqlx.Ok#toObject\n         * @returns {Object}\n         */\n        toObject () {\n            if (!proto.hasMsg()) {\n                return {};\n            }\n\n            return { message: proto.getMsg() };\n        }\n    });\n}\n\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Ok}\n */\nOk.deserialize = function (buffer) {\n    return Ok(MysqlxStub.Ok.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nOk.MESSAGE_ID = MysqlxStub.ServerMessages.Type.OK;\n\nmodule.exports = Ok;\n"]},"metadata":{},"sourceType":"script"}