{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst WarningStub = require('../../../Stubs/mysqlx_notice_pb').Warning;\n\nconst bytes = require('../../../Wrappers/ScalarValues/bytes');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Notice.Warning\n * @param {proto.Mysqlx.Notice.Warning} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Notice.Warning}\n */\n\n\nfunction Warning(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Get the warning log level tag.\n     * @function\n     * @name module:adapters.Mysqlx.Notice.Warning#getLevel\n     * @returns {string}\n     */\n    getLevel() {\n      return Object.keys(WarningStub.Level).filter(k => WarningStub.Level[k] === proto.getLevel())[0];\n    },\n\n    getLevelId() {\n      return proto.getLevel();\n    },\n\n    getCode() {\n      return proto.getCode();\n    },\n\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Notice.Warning#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        level: this.getLevel(),\n        code: proto.getCode(),\n        msg: proto.getMsg()\n      };\n    },\n\n    /**\n     * Return a plain JavaScript object version of the underlying protobuf instance.\n     * @function\n     * @name module:adapters.Mysqlx.Notice.Warning#toObject\n     * @returns {Object}\n     */\n    toObject() {\n      return proto.toObject();\n    }\n\n  });\n}\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Notice.Warning}\n */\n\n\nWarning.deserialize = function (buffer) {\n  return Warning(WarningStub.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nWarning.Level = WarningStub.Level;\nmodule.exports = Warning;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Notice/Warning.js"],"names":["WarningStub","require","Warning","bytes","wraps","proto","Object","assign","getLevel","keys","Level","filter","k","getLevelId","getCode","toJSON","level","code","msg","getMsg","toObject","deserialize","buffer","deserializeBinary","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,iCAAD,CAAP,CAA2CC,OAA/D;;AACA,MAAMC,KAAK,GAAGF,OAAO,CAAC,sCAAD,CAArB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAkBG,KAAlB,EAAyB;AACrB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAK,CAACC,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,QAAQ,GAAI;AACR,aAAOF,MAAM,CAACG,IAAP,CAAYT,WAAW,CAACU,KAAxB,EACFC,MADE,CACKC,CAAC,IAAIZ,WAAW,CAACU,KAAZ,CAAkBE,CAAlB,MAAyBP,KAAK,CAACG,QAAN,EADnC,EACqD,CADrD,CAAP;AAEH,KAVkC;;AAYnCK,IAAAA,UAAU,GAAI;AACV,aAAOR,KAAK,CAACG,QAAN,EAAP;AACH,KAdkC;;AAgBnCM,IAAAA,OAAO,GAAI;AACP,aAAOT,KAAK,CAACS,OAAN,EAAP;AACH,KAlBkC;;AAoBnC;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,MAAM,GAAI;AACN,aAAO;AAAEC,QAAAA,KAAK,EAAE,KAAKR,QAAL,EAAT;AAA0BS,QAAAA,IAAI,EAAEZ,KAAK,CAACS,OAAN,EAAhC;AAAiDI,QAAAA,GAAG,EAAEb,KAAK,CAACc,MAAN;AAAtD,OAAP;AACH,KA5BkC;;AA8BnC;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,QAAQ,GAAI;AACR,aAAOf,KAAK,CAACe,QAAN,EAAP;AACH;;AAtCkC,GAAhC,CAAP;AAwCH;AAED;AACA;AACA;AACA;;;AACAlB,OAAO,CAACmB,WAAR,GAAsB,UAAUC,MAAV,EAAkB;AACpC,SAAOpB,OAAO,CAACF,WAAW,CAACuB,iBAAZ,CAA8BpB,KAAK,CAACkB,WAAN,CAAkBC,MAAlB,CAA9B,CAAD,CAAd;AACH,CAFD;;AAIApB,OAAO,CAACQ,KAAR,GAAgBV,WAAW,CAACU,KAA5B;AAEAc,MAAM,CAACC,OAAP,GAAiBvB,OAAjB","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst WarningStub = require('../../../Stubs/mysqlx_notice_pb').Warning;\nconst bytes = require('../../../Wrappers/ScalarValues/bytes');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Notice.Warning\n * @param {proto.Mysqlx.Notice.Warning} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Notice.Warning}\n */\nfunction Warning (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Get the warning log level tag.\n         * @function\n         * @name module:adapters.Mysqlx.Notice.Warning#getLevel\n         * @returns {string}\n         */\n        getLevel () {\n            return Object.keys(WarningStub.Level)\n                .filter(k => WarningStub.Level[k] === proto.getLevel())[0];\n        },\n\n        getLevelId () {\n            return proto.getLevel();\n        },\n\n        getCode () {\n            return proto.getCode();\n        },\n\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Notice.Warning#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return { level: this.getLevel(), code: proto.getCode(), msg: proto.getMsg() };\n        },\n\n        /**\n         * Return a plain JavaScript object version of the underlying protobuf instance.\n         * @function\n         * @name module:adapters.Mysqlx.Notice.Warning#toObject\n         * @returns {Object}\n         */\n        toObject () {\n            return proto.toObject();\n        }\n    });\n}\n\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Notice.Warning}\n */\nWarning.deserialize = function (buffer) {\n    return Warning(WarningStub.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nWarning.Level = WarningStub.Level;\n\nmodule.exports = Warning;\n"]},"metadata":{},"sourceType":"script"}