{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\nvar jspb = require('google-protobuf');\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar mysqlx_pb = require('./mysqlx_pb.js');\n\ngoog.exportSymbol('proto.Mysqlx.Expect.Close', null, global);\ngoog.exportSymbol('proto.Mysqlx.Expect.Open', null, global);\ngoog.exportSymbol('proto.Mysqlx.Expect.Open.Condition', null, global);\ngoog.exportSymbol('proto.Mysqlx.Expect.Open.Condition.ConditionOperation', null, global);\ngoog.exportSymbol('proto.Mysqlx.Expect.Open.Condition.Key', null, global);\ngoog.exportSymbol('proto.Mysqlx.Expect.Open.CtxOperation', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.Mysqlx.Expect.Open = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Expect.Open.repeatedFields_, null);\n};\n\ngoog.inherits(proto.Mysqlx.Expect.Open, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Expect.Open.displayName = 'proto.Mysqlx.Expect.Open';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.Mysqlx.Expect.Open.repeatedFields_ = [2];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Expect.Open.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Expect.Open.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Expect.Open} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Expect.Open.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      op: jspb.Message.getFieldWithDefault(msg, 1, 0),\n      condList: jspb.Message.toObjectList(msg.getCondList(), proto.Mysqlx.Expect.Open.Condition.toObject, includeInstance)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Expect.Open}\n */\n\n\nproto.Mysqlx.Expect.Open.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Expect.Open();\n  return proto.Mysqlx.Expect.Open.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Expect.Open} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Expect.Open}\n */\n\n\nproto.Mysqlx.Expect.Open.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!proto.Mysqlx.Expect.Open.CtxOperation} */\n        reader.readEnum();\n        msg.setOp(value);\n        break;\n\n      case 2:\n        var value = new proto.Mysqlx.Expect.Open.Condition();\n        reader.readMessage(value, proto.Mysqlx.Expect.Open.Condition.deserializeBinaryFromReader);\n        msg.addCond(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Expect.Open.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Expect.Open.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Expect.Open} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Expect.Open.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {!proto.Mysqlx.Expect.Open.CtxOperation} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeEnum(1, f);\n  }\n\n  f = message.getCondList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(2, f, proto.Mysqlx.Expect.Open.Condition.serializeBinaryToWriter);\n  }\n};\n/**\n * @enum {number}\n */\n\n\nproto.Mysqlx.Expect.Open.CtxOperation = {\n  EXPECT_CTX_COPY_PREV: 0,\n  EXPECT_CTX_EMPTY: 1\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.Mysqlx.Expect.Open.Condition = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Expect.Open.Condition, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Expect.Open.Condition.displayName = 'proto.Mysqlx.Expect.Open.Condition';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Expect.Open.Condition.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Expect.Open.Condition.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Expect.Open.Condition} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Expect.Open.Condition.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      conditionKey: jspb.Message.getField(msg, 1),\n      conditionValue: msg.getConditionValue_asB64(),\n      op: jspb.Message.getFieldWithDefault(msg, 3, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Expect.Open.Condition}\n */\n\n\nproto.Mysqlx.Expect.Open.Condition.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Expect.Open.Condition();\n  return proto.Mysqlx.Expect.Open.Condition.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Expect.Open.Condition} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Expect.Open.Condition}\n */\n\n\nproto.Mysqlx.Expect.Open.Condition.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setConditionKey(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setConditionValue(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {!proto.Mysqlx.Expect.Open.Condition.ConditionOperation} */\n        reader.readEnum();\n        msg.setOp(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Expect.Open.Condition.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Expect.Open.Condition.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Expect.Open.Condition} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Expect.Open.Condition.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {number} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeUint32(1, f);\n  }\n\n  f =\n  /** @type {!(string|Uint8Array)} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeBytes(2, f);\n  }\n\n  f =\n  /** @type {!proto.Mysqlx.Expect.Open.Condition.ConditionOperation} */\n  jspb.Message.getField(message, 3);\n\n  if (f != null) {\n    writer.writeEnum(3, f);\n  }\n};\n/**\n * @enum {number}\n */\n\n\nproto.Mysqlx.Expect.Open.Condition.Key = {\n  EXPECT_NO_ERROR: 1,\n  EXPECT_FIELD_EXIST: 2,\n  EXPECT_DOCID_GENERATED: 3\n};\n/**\n * @enum {number}\n */\n\nproto.Mysqlx.Expect.Open.Condition.ConditionOperation = {\n  EXPECT_OP_SET: 0,\n  EXPECT_OP_UNSET: 1\n};\n/**\n * required uint32 condition_key = 1;\n * @return {number}\n */\n\nproto.Mysqlx.Expect.Open.Condition.prototype.getConditionKey = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.Mysqlx.Expect.Open.Condition.prototype.setConditionKey = function (value) {\n  jspb.Message.setField(this, 1, value);\n};\n\nproto.Mysqlx.Expect.Open.Condition.prototype.clearConditionKey = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Expect.Open.Condition.prototype.hasConditionKey = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional bytes condition_value = 2;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.Mysqlx.Expect.Open.Condition.prototype.getConditionValue = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * optional bytes condition_value = 2;\n * This is a type-conversion wrapper around `getConditionValue()`\n * @return {string}\n */\n\n\nproto.Mysqlx.Expect.Open.Condition.prototype.getConditionValue_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getConditionValue())\n  );\n};\n/**\n * optional bytes condition_value = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getConditionValue()`\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Expect.Open.Condition.prototype.getConditionValue_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getConditionValue())\n  );\n};\n/** @param {!(string|Uint8Array)} value */\n\n\nproto.Mysqlx.Expect.Open.Condition.prototype.setConditionValue = function (value) {\n  jspb.Message.setField(this, 2, value);\n};\n\nproto.Mysqlx.Expect.Open.Condition.prototype.clearConditionValue = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Expect.Open.Condition.prototype.hasConditionValue = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional ConditionOperation op = 3;\n * @return {!proto.Mysqlx.Expect.Open.Condition.ConditionOperation}\n */\n\n\nproto.Mysqlx.Expect.Open.Condition.prototype.getOp = function () {\n  return (\n    /** @type {!proto.Mysqlx.Expect.Open.Condition.ConditionOperation} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/** @param {!proto.Mysqlx.Expect.Open.Condition.ConditionOperation} value */\n\n\nproto.Mysqlx.Expect.Open.Condition.prototype.setOp = function (value) {\n  jspb.Message.setField(this, 3, value);\n};\n\nproto.Mysqlx.Expect.Open.Condition.prototype.clearOp = function () {\n  jspb.Message.setField(this, 3, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Expect.Open.Condition.prototype.hasOp = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * optional CtxOperation op = 1;\n * @return {!proto.Mysqlx.Expect.Open.CtxOperation}\n */\n\n\nproto.Mysqlx.Expect.Open.prototype.getOp = function () {\n  return (\n    /** @type {!proto.Mysqlx.Expect.Open.CtxOperation} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/** @param {!proto.Mysqlx.Expect.Open.CtxOperation} value */\n\n\nproto.Mysqlx.Expect.Open.prototype.setOp = function (value) {\n  jspb.Message.setField(this, 1, value);\n};\n\nproto.Mysqlx.Expect.Open.prototype.clearOp = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Expect.Open.prototype.hasOp = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * repeated Condition cond = 2;\n * @return {!Array.<!proto.Mysqlx.Expect.Open.Condition>}\n */\n\n\nproto.Mysqlx.Expect.Open.prototype.getCondList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Expect.Open.Condition>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Expect.Open.Condition, 2)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Expect.Open.Condition>} value */\n\n\nproto.Mysqlx.Expect.Open.prototype.setCondList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n/**\n * @param {!proto.Mysqlx.Expect.Open.Condition=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Expect.Open.Condition}\n */\n\n\nproto.Mysqlx.Expect.Open.prototype.addCond = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Mysqlx.Expect.Open.Condition, opt_index);\n};\n\nproto.Mysqlx.Expect.Open.prototype.clearCondList = function () {\n  this.setCondList([]);\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Expect.Close = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Expect.Close, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Expect.Close.displayName = 'proto.Mysqlx.Expect.Close';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Expect.Close.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Expect.Close.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Expect.Close} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Expect.Close.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {};\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Expect.Close}\n */\n\n\nproto.Mysqlx.Expect.Close.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Expect.Close();\n  return proto.Mysqlx.Expect.Close.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Expect.Close} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Expect.Close}\n */\n\n\nproto.Mysqlx.Expect.Close.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Expect.Close.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Expect.Close.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Expect.Close} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Expect.Close.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n};\n\ngoog.object.extend(exports, proto.Mysqlx.Expect);","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Stubs/mysqlx_expect_pb.js"],"names":["jspb","require","goog","global","Function","mysqlx_pb","exportSymbol","proto","Mysqlx","Expect","Open","opt_data","Message","initialize","repeatedFields_","inherits","DEBUG","COMPILED","displayName","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","op","getFieldWithDefault","condList","toObjectList","getCondList","Condition","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","value","readEnum","setOp","readMessage","addCond","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","undefined","getField","writeEnum","length","writeRepeatedMessage","CtxOperation","EXPECT_CTX_COPY_PREV","EXPECT_CTX_EMPTY","conditionKey","conditionValue","getConditionValue_asB64","readUint32","setConditionKey","readBytes","setConditionValue","writeUint32","writeBytes","Key","EXPECT_NO_ERROR","EXPECT_FIELD_EXIST","EXPECT_DOCID_GENERATED","ConditionOperation","EXPECT_OP_SET","EXPECT_OP_UNSET","getConditionKey","setField","clearConditionKey","hasConditionKey","getConditionValue","bytesAsB64","getConditionValue_asU8","bytesAsU8","clearConditionValue","hasConditionValue","getOp","clearOp","hasOp","getRepeatedWrapperField","setCondList","setRepeatedWrapperField","opt_value","opt_index","addToRepeatedWrapperField","clearCondList","Close","object","extend","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar mysqlx_pb = require('./mysqlx_pb.js');\ngoog.exportSymbol('proto.Mysqlx.Expect.Close', null, global);\ngoog.exportSymbol('proto.Mysqlx.Expect.Open', null, global);\ngoog.exportSymbol('proto.Mysqlx.Expect.Open.Condition', null, global);\ngoog.exportSymbol('proto.Mysqlx.Expect.Open.Condition.ConditionOperation', null, global);\ngoog.exportSymbol('proto.Mysqlx.Expect.Open.Condition.Key', null, global);\ngoog.exportSymbol('proto.Mysqlx.Expect.Open.CtxOperation', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Expect.Open = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Expect.Open.repeatedFields_, null);\n};\ngoog.inherits(proto.Mysqlx.Expect.Open, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Expect.Open.displayName = 'proto.Mysqlx.Expect.Open';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Mysqlx.Expect.Open.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Expect.Open.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Expect.Open.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Expect.Open} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Expect.Open.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    op: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    condList: jspb.Message.toObjectList(msg.getCondList(),\n    proto.Mysqlx.Expect.Open.Condition.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Expect.Open}\n */\nproto.Mysqlx.Expect.Open.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Expect.Open;\n  return proto.Mysqlx.Expect.Open.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Expect.Open} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Expect.Open}\n */\nproto.Mysqlx.Expect.Open.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.Mysqlx.Expect.Open.CtxOperation} */ (reader.readEnum());\n      msg.setOp(value);\n      break;\n    case 2:\n      var value = new proto.Mysqlx.Expect.Open.Condition;\n      reader.readMessage(value,proto.Mysqlx.Expect.Open.Condition.deserializeBinaryFromReader);\n      msg.addCond(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Expect.Open.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Expect.Open.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Expect.Open} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Expect.Open.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {!proto.Mysqlx.Expect.Open.CtxOperation} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getCondList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.Mysqlx.Expect.Open.Condition.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.Mysqlx.Expect.Open.CtxOperation = {\n  EXPECT_CTX_COPY_PREV: 0,\n  EXPECT_CTX_EMPTY: 1\n};\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Expect.Open.Condition = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Expect.Open.Condition, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Expect.Open.Condition.displayName = 'proto.Mysqlx.Expect.Open.Condition';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Expect.Open.Condition.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Expect.Open.Condition.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Expect.Open.Condition} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Expect.Open.Condition.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    conditionKey: jspb.Message.getField(msg, 1),\n    conditionValue: msg.getConditionValue_asB64(),\n    op: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Expect.Open.Condition}\n */\nproto.Mysqlx.Expect.Open.Condition.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Expect.Open.Condition;\n  return proto.Mysqlx.Expect.Open.Condition.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Expect.Open.Condition} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Expect.Open.Condition}\n */\nproto.Mysqlx.Expect.Open.Condition.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setConditionKey(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setConditionValue(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.Mysqlx.Expect.Open.Condition.ConditionOperation} */ (reader.readEnum());\n      msg.setOp(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Expect.Open.Condition.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Expect.Open.Condition.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Expect.Open.Condition} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Expect.Open.Condition.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = /** @type {!proto.Mysqlx.Expect.Open.Condition.ConditionOperation} */ (jspb.Message.getField(message, 3));\n  if (f != null) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.Mysqlx.Expect.Open.Condition.Key = {\n  EXPECT_NO_ERROR: 1,\n  EXPECT_FIELD_EXIST: 2,\n  EXPECT_DOCID_GENERATED: 3\n};\n\n/**\n * @enum {number}\n */\nproto.Mysqlx.Expect.Open.Condition.ConditionOperation = {\n  EXPECT_OP_SET: 0,\n  EXPECT_OP_UNSET: 1\n};\n\n/**\n * required uint32 condition_key = 1;\n * @return {number}\n */\nproto.Mysqlx.Expect.Open.Condition.prototype.getConditionKey = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {number} value */\nproto.Mysqlx.Expect.Open.Condition.prototype.setConditionKey = function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.Mysqlx.Expect.Open.Condition.prototype.clearConditionKey = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Expect.Open.Condition.prototype.hasConditionKey = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional bytes condition_value = 2;\n * @return {!(string|Uint8Array)}\n */\nproto.Mysqlx.Expect.Open.Condition.prototype.getConditionValue = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes condition_value = 2;\n * This is a type-conversion wrapper around `getConditionValue()`\n * @return {string}\n */\nproto.Mysqlx.Expect.Open.Condition.prototype.getConditionValue_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getConditionValue()));\n};\n\n\n/**\n * optional bytes condition_value = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getConditionValue()`\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Expect.Open.Condition.prototype.getConditionValue_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getConditionValue()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.Mysqlx.Expect.Open.Condition.prototype.setConditionValue = function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.Mysqlx.Expect.Open.Condition.prototype.clearConditionValue = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Expect.Open.Condition.prototype.hasConditionValue = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional ConditionOperation op = 3;\n * @return {!proto.Mysqlx.Expect.Open.Condition.ConditionOperation}\n */\nproto.Mysqlx.Expect.Open.Condition.prototype.getOp = function() {\n  return /** @type {!proto.Mysqlx.Expect.Open.Condition.ConditionOperation} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/** @param {!proto.Mysqlx.Expect.Open.Condition.ConditionOperation} value */\nproto.Mysqlx.Expect.Open.Condition.prototype.setOp = function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.Mysqlx.Expect.Open.Condition.prototype.clearOp = function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Expect.Open.Condition.prototype.hasOp = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional CtxOperation op = 1;\n * @return {!proto.Mysqlx.Expect.Open.CtxOperation}\n */\nproto.Mysqlx.Expect.Open.prototype.getOp = function() {\n  return /** @type {!proto.Mysqlx.Expect.Open.CtxOperation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {!proto.Mysqlx.Expect.Open.CtxOperation} value */\nproto.Mysqlx.Expect.Open.prototype.setOp = function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.Mysqlx.Expect.Open.prototype.clearOp = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Expect.Open.prototype.hasOp = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * repeated Condition cond = 2;\n * @return {!Array.<!proto.Mysqlx.Expect.Open.Condition>}\n */\nproto.Mysqlx.Expect.Open.prototype.getCondList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Expect.Open.Condition>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Expect.Open.Condition, 2));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Expect.Open.Condition>} value */\nproto.Mysqlx.Expect.Open.prototype.setCondList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Expect.Open.Condition=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Expect.Open.Condition}\n */\nproto.Mysqlx.Expect.Open.prototype.addCond = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Mysqlx.Expect.Open.Condition, opt_index);\n};\n\n\nproto.Mysqlx.Expect.Open.prototype.clearCondList = function() {\n  this.setCondList([]);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Expect.Close = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Expect.Close, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Expect.Close.displayName = 'proto.Mysqlx.Expect.Close';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Expect.Close.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Expect.Close.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Expect.Close} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Expect.Close.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Expect.Close}\n */\nproto.Mysqlx.Expect.Close.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Expect.Close;\n  return proto.Mysqlx.Expect.Close.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Expect.Close} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Expect.Close}\n */\nproto.Mysqlx.Expect.Close.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Expect.Close.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Expect.Close.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Expect.Close} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Expect.Close.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\ngoog.object.extend(exports, proto.Mysqlx.Expect);\n"]},"metadata":{},"sourceType":"script"}