{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n/**\n * Enum to identify data-model types and parser modes.\n * @readonly\n * @name DataModel\n * @enum {number}\n * @example\n * DataModel.TABLE\n * DataModel.DOCUMENT\n */\n\nconst DataModel = require('../Protocol/Stubs/mysqlx_crud_pb').DataModel;\n\nconst MessageType = require('../Protocol/Stubs/mysqlx_prepare_pb').Prepare.OneOfMessage.Type;\n/**\n * Query mixin.\n * @mixin\n * @private\n * @alias Query\n * @param {Object} state\n * @returns {Query}\n */\n\n\nfunction Query(state) {\n  state = Object.assign({\n    category: DataModel.DOCUMENT,\n    type: MessageType.FIND\n  }, state);\n  return {\n    /**\n     * Retrieve the category of the entity bound to the query.\n     * @function\n     * @private\n     * @name Query#getCategory\n     * @returns {Type} The category enum value.\n     */\n    getCategory() {\n      return state.category;\n    },\n\n    /**\n     * Retrieve the schema instance bound to the query.\n     * @function\n     * @private\n     * @name Query#getSchema\n     * @returns {module:Schema} The schema where the query will execute.\n     */\n    getSchema() {\n      return state.schema;\n    },\n\n    /**\n     * Retrieve the name of the entity bound to the query.\n     * @function\n     * @private\n     * @name Query#getTableName\n     * @returns {string} The entity name.\n     */\n    getTableName() {\n      return state.tableName;\n    },\n\n    /**\n     * Retrieve the type of statement.\n     * @function\n     * @private\n     * @name Query#getType\n     * @returns {proto.Mysqlx.Prepare.Prepare.OneOfMessage.Type} The statement type enum.\n     */\n    getType() {\n      return state.type;\n    }\n\n  };\n}\n/**\n * Database entity types.\n * @type {DataModel}\n * @const\n * @private\n */\n\n\nQuery.Type = DataModel;\nmodule.exports = Query;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/Query.js"],"names":["DataModel","require","MessageType","Prepare","OneOfMessage","Type","Query","state","Object","assign","category","DOCUMENT","type","FIND","getCategory","getSchema","schema","getTableName","tableName","getType","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kCAAD,CAAP,CAA4CD,SAA9D;;AACA,MAAME,WAAW,GAAGD,OAAO,CAAC,qCAAD,CAAP,CAA+CE,OAA/C,CAAuDC,YAAvD,CAAoEC,IAAxF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAgBC,KAAhB,EAAuB;AACnBA,EAAAA,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,QAAQ,EAAEV,SAAS,CAACW,QAAtB;AAAgCC,IAAAA,IAAI,EAAEV,WAAW,CAACW;AAAlD,GAAd,EAAwEN,KAAxE,CAAR;AAEA,SAAO;AACH;AACR;AACA;AACA;AACA;AACA;AACA;AACQO,IAAAA,WAAW,GAAI;AACX,aAAOP,KAAK,CAACG,QAAb;AACH,KAVE;;AAYH;AACR;AACA;AACA;AACA;AACA;AACA;AACQK,IAAAA,SAAS,GAAI;AACT,aAAOR,KAAK,CAACS,MAAb;AACH,KArBE;;AAuBH;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,YAAY,GAAI;AACZ,aAAOV,KAAK,CAACW,SAAb;AACH,KAhCE;;AAkCH;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,OAAO,GAAI;AACP,aAAOZ,KAAK,CAACK,IAAb;AACH;;AA3CE,GAAP;AA6CH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAN,KAAK,CAACD,IAAN,GAAaL,SAAb;AAEAoB,MAAM,CAACC,OAAP,GAAiBf,KAAjB","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\n/**\n * Enum to identify data-model types and parser modes.\n * @readonly\n * @name DataModel\n * @enum {number}\n * @example\n * DataModel.TABLE\n * DataModel.DOCUMENT\n */\nconst DataModel = require('../Protocol/Stubs/mysqlx_crud_pb').DataModel;\nconst MessageType = require('../Protocol/Stubs/mysqlx_prepare_pb').Prepare.OneOfMessage.Type;\n\n/**\n * Query mixin.\n * @mixin\n * @private\n * @alias Query\n * @param {Object} state\n * @returns {Query}\n */\nfunction Query (state) {\n    state = Object.assign({ category: DataModel.DOCUMENT, type: MessageType.FIND }, state);\n\n    return {\n        /**\n         * Retrieve the category of the entity bound to the query.\n         * @function\n         * @private\n         * @name Query#getCategory\n         * @returns {Type} The category enum value.\n         */\n        getCategory () {\n            return state.category;\n        },\n\n        /**\n         * Retrieve the schema instance bound to the query.\n         * @function\n         * @private\n         * @name Query#getSchema\n         * @returns {module:Schema} The schema where the query will execute.\n         */\n        getSchema () {\n            return state.schema;\n        },\n\n        /**\n         * Retrieve the name of the entity bound to the query.\n         * @function\n         * @private\n         * @name Query#getTableName\n         * @returns {string} The entity name.\n         */\n        getTableName () {\n            return state.tableName;\n        },\n\n        /**\n         * Retrieve the type of statement.\n         * @function\n         * @private\n         * @name Query#getType\n         * @returns {proto.Mysqlx.Prepare.Prepare.OneOfMessage.Type} The statement type enum.\n         */\n        getType () {\n            return state.type;\n        }\n    };\n}\n\n/**\n * Database entity types.\n * @type {DataModel}\n * @const\n * @private\n */\nQuery.Type = DataModel;\n\nmodule.exports = Query;\n"]},"metadata":{},"sourceType":"script"}