{"ast":null,"code":"/*\n * Copyright (c) 2018, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst Expr = require('../../../../Protocol/Stubs/mysqlx_expr_pb').Expr;\n\nconst Operator = require('../../../../Protocol/Stubs/mysqlx_expr_pb').Operator;\n\nconst Scalar = require('../../../../Protocol/Stubs/mysqlx_datatypes_pb').Scalar;\n\nconst Pa = require('parsimmon');\n\nconst parser = options => r => Pa.seq(r.IS.skip(r.blank), r.optNotSuffix, Pa.alt(r.NULL, r.TRUE, r.FALSE)).map(data => ({\n  operator: data[0] + data[1],\n  operand: data[2]\n})).map(data => {\n  const operator = new Operator();\n  operator.setName(data.operator);\n  const scalar = new Scalar();\n\n  if (data.operand !== null) {\n    scalar.setType(Scalar.Type.V_BOOL);\n    scalar.setVBool(data.operand);\n  } else {\n    scalar.setType(Scalar.Type.V_NULL);\n  }\n\n  const param = new Expr();\n  param.setType(Expr.Type.LITERAL);\n  param.setLiteral(scalar);\n  operator.addParam(param);\n  return operator;\n});\n\nmodule.exports = {\n  name: 'IS_PARTIAL',\n  parser\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/ExprParser/lib/grammar/partials/isPart.js"],"names":["Expr","require","Operator","Scalar","Pa","parser","options","r","seq","IS","skip","blank","optNotSuffix","alt","NULL","TRUE","FALSE","map","data","operator","operand","setName","scalar","setType","Type","V_BOOL","setVBool","V_NULL","param","LITERAL","setLiteral","addParam","module","exports","name"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,2CAAD,CAAP,CAAqDD,IAAlE;;AACA,MAAME,QAAQ,GAAGD,OAAO,CAAC,2CAAD,CAAP,CAAqDC,QAAtE;;AACA,MAAMC,MAAM,GAAGF,OAAO,CAAC,gDAAD,CAAP,CAA0DE,MAAzE;;AACA,MAAMC,EAAE,GAAGH,OAAO,CAAC,WAAD,CAAlB;;AAEA,MAAMI,MAAM,GAAGC,OAAO,IAAIC,CAAC,IAAIH,EAAE,CAC5BI,GAD0B,CACtBD,CAAC,CAACE,EAAF,CAAKC,IAAL,CAAUH,CAAC,CAACI,KAAZ,CADsB,EACFJ,CAAC,CAACK,YADA,EACcR,EAAE,CAACS,GAAH,CAAON,CAAC,CAACO,IAAT,EAAeP,CAAC,CAACQ,IAAjB,EAAuBR,CAAC,CAACS,KAAzB,CADd,EAE1BC,GAF0B,CAEtBC,IAAI,KAAK;AAAEC,EAAAA,QAAQ,EAAED,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAA1B;AAA+BE,EAAAA,OAAO,EAAEF,IAAI,CAAC,CAAD;AAA5C,CAAL,CAFkB,EAG1BD,GAH0B,CAGtBC,IAAI,IAAI;AACT,QAAMC,QAAQ,GAAG,IAAIjB,QAAJ,EAAjB;AACAiB,EAAAA,QAAQ,CAACE,OAAT,CAAiBH,IAAI,CAACC,QAAtB;AAEA,QAAMG,MAAM,GAAG,IAAInB,MAAJ,EAAf;;AAEA,MAAIe,IAAI,CAACE,OAAL,KAAiB,IAArB,EAA2B;AACvBE,IAAAA,MAAM,CAACC,OAAP,CAAepB,MAAM,CAACqB,IAAP,CAAYC,MAA3B;AACAH,IAAAA,MAAM,CAACI,QAAP,CAAgBR,IAAI,CAACE,OAArB;AACH,GAHD,MAGO;AACHE,IAAAA,MAAM,CAACC,OAAP,CAAepB,MAAM,CAACqB,IAAP,CAAYG,MAA3B;AACH;;AAED,QAAMC,KAAK,GAAG,IAAI5B,IAAJ,EAAd;AACA4B,EAAAA,KAAK,CAACL,OAAN,CAAcvB,IAAI,CAACwB,IAAL,CAAUK,OAAxB;AACAD,EAAAA,KAAK,CAACE,UAAN,CAAiBR,MAAjB;AAEAH,EAAAA,QAAQ,CAACY,QAAT,CAAkBH,KAAlB;AAEA,SAAOT,QAAP;AACH,CAvB0B,CAA/B;;AAyBAa,MAAM,CAACC,OAAP,GAAiB;AAAEC,EAAAA,IAAI,EAAE,YAAR;AAAsB7B,EAAAA;AAAtB,CAAjB","sourcesContent":["/*\n * Copyright (c) 2018, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst Expr = require('../../../../Protocol/Stubs/mysqlx_expr_pb').Expr;\nconst Operator = require('../../../../Protocol/Stubs/mysqlx_expr_pb').Operator;\nconst Scalar = require('../../../../Protocol/Stubs/mysqlx_datatypes_pb').Scalar;\nconst Pa = require('parsimmon');\n\nconst parser = options => r => Pa\n    .seq(r.IS.skip(r.blank), r.optNotSuffix, Pa.alt(r.NULL, r.TRUE, r.FALSE))\n    .map(data => ({ operator: data[0] + data[1], operand: data[2] }))\n    .map(data => {\n        const operator = new Operator();\n        operator.setName(data.operator);\n\n        const scalar = new Scalar();\n\n        if (data.operand !== null) {\n            scalar.setType(Scalar.Type.V_BOOL);\n            scalar.setVBool(data.operand);\n        } else {\n            scalar.setType(Scalar.Type.V_NULL);\n        }\n\n        const param = new Expr();\n        param.setType(Expr.Type.LITERAL);\n        param.setLiteral(scalar);\n\n        operator.addParam(param);\n\n        return operator;\n    });\n\nmodule.exports = { name: 'IS_PARTIAL', parser };\n"]},"metadata":{},"sourceType":"script"}