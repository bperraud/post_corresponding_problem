{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst ServerMessagesStub = require('../../../Stubs/mysqlx_pb').ServerMessages.Type;\n\nconst CapabilitiesStub = require('../../../Stubs/mysqlx_connection_pb').Capabilities;\n\nconst bytes = require('../../ScalarValues/bytes');\n\nconst capability = require('./Capability');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Connection.Capabilities\n * @param {proto.Mysqlx.Connection.Capabilities} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Connection.Capabilities}\n */\n\n\nfunction Capabilities(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Connection.Capabilities#toJSON\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        capabilities: proto.getCapabilitiesList().map(value => capability(value).toJSON())\n      };\n    },\n\n    /**\n     * Return a key-value mapping of the existing capabilities.\n     * @function\n     * @name module:adapters.Mysqlx.Connection.Capabilities#toObject\n     * @returns {Object}\n     */\n    toObject() {\n      return proto.getCapabilitiesList().reduce((capabilities, value) => Object.assign({}, capabilities, capability(value).toObject()), {});\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a Mysqlx.Connection.Capabilities instance for the given properties.\n * @param {Object} properties - object with a key-value mapping of the properties\n * @returns {module:adapters.Mysqlx.Connection.Capabilities}\n */\n\n\nCapabilities.create = function (properties) {\n  const proto = new CapabilitiesStub();\n  proto.setCapabilitiesList(Object.keys(properties).map(k => capability.create(k, properties[k]).valueOf()));\n  return Capabilities(proto);\n};\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Connection.Capabilities}\n */\n\n\nCapabilities.deserialize = function (buffer) {\n  return Capabilities(CapabilitiesStub.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nCapabilities.MESSAGE_ID = ServerMessagesStub.CONN_CAPABILITIES;\nmodule.exports = Capabilities;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Connection/Capabilities.js"],"names":["ServerMessagesStub","require","ServerMessages","Type","CapabilitiesStub","Capabilities","bytes","capability","wraps","proto","Object","assign","toJSON","capabilities","getCapabilitiesList","map","value","toObject","reduce","create","properties","setCapabilitiesList","keys","k","valueOf","deserialize","buffer","deserializeBinary","MESSAGE_ID","CONN_CAPABILITIES","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,0BAAD,CAAP,CAAoCC,cAApC,CAAmDC,IAA9E;;AACA,MAAMC,gBAAgB,GAAGH,OAAO,CAAC,qCAAD,CAAP,CAA+CI,YAAxE;;AACA,MAAMC,KAAK,GAAGL,OAAO,CAAC,0BAAD,CAArB;;AACA,MAAMM,UAAU,GAAGN,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMO,KAAK,GAAGP,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,YAAT,CAAuBI,KAAvB,EAA8B;AAC1B,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAK,CAACC,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAO;AAAEC,QAAAA,YAAY,EAAEJ,KAAK,CAACK,mBAAN,GAA4BC,GAA5B,CAAgCC,KAAK,IAAIT,UAAU,CAACS,KAAD,CAAV,CAAkBJ,MAAlB,EAAzC;AAAhB,OAAP;AACH,KATkC;;AAWnC;AACR;AACA;AACA;AACA;AACA;AACQK,IAAAA,QAAQ,GAAI;AACR,aAAOR,KAAK,CAACK,mBAAN,GACFI,MADE,CACK,CAACL,YAAD,EAAeG,KAAf,KAAyBN,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBE,YAAlB,EAAgCN,UAAU,CAACS,KAAD,CAAV,CAAkBC,QAAlB,EAAhC,CAD9B,EAC6F,EAD7F,CAAP;AAEH;;AApBkC,GAAhC,CAAP;AAsBH;AAED;AACA;AACA;AACA;AACA;;;AACAZ,YAAY,CAACc,MAAb,GAAsB,UAAUC,UAAV,EAAsB;AACxC,QAAMX,KAAK,GAAG,IAAIL,gBAAJ,EAAd;AACAK,EAAAA,KAAK,CAACY,mBAAN,CAA0BX,MAAM,CAACY,IAAP,CAAYF,UAAZ,EAAwBL,GAAxB,CAA4BQ,CAAC,IAAIhB,UAAU,CAACY,MAAX,CAAkBI,CAAlB,EAAqBH,UAAU,CAACG,CAAD,CAA/B,EAAoCC,OAApC,EAAjC,CAA1B;AAEA,SAAOnB,YAAY,CAACI,KAAD,CAAnB;AACH,CALD;AAOA;AACA;AACA;AACA;;;AACAJ,YAAY,CAACoB,WAAb,GAA2B,UAAUC,MAAV,EAAkB;AACzC,SAAOrB,YAAY,CAACD,gBAAgB,CAACuB,iBAAjB,CAAmCrB,KAAK,CAACmB,WAAN,CAAkBC,MAAlB,CAAnC,CAAD,CAAnB;AACH,CAFD;;AAIArB,YAAY,CAACuB,UAAb,GAA0B5B,kBAAkB,CAAC6B,iBAA7C;AAEAC,MAAM,CAACC,OAAP,GAAiB1B,YAAjB","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst ServerMessagesStub = require('../../../Stubs/mysqlx_pb').ServerMessages.Type;\nconst CapabilitiesStub = require('../../../Stubs/mysqlx_connection_pb').Capabilities;\nconst bytes = require('../../ScalarValues/bytes');\nconst capability = require('./Capability');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Connection.Capabilities\n * @param {proto.Mysqlx.Connection.Capabilities} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Connection.Capabilities}\n */\nfunction Capabilities (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Connection.Capabilities#toJSON\n         * @returns {Object}\n         */\n        toJSON () {\n            return { capabilities: proto.getCapabilitiesList().map(value => capability(value).toJSON()) };\n        },\n\n        /**\n         * Return a key-value mapping of the existing capabilities.\n         * @function\n         * @name module:adapters.Mysqlx.Connection.Capabilities#toObject\n         * @returns {Object}\n         */\n        toObject () {\n            return proto.getCapabilitiesList()\n                .reduce((capabilities, value) => Object.assign({}, capabilities, capability(value).toObject()), {});\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a Mysqlx.Connection.Capabilities instance for the given properties.\n * @param {Object} properties - object with a key-value mapping of the properties\n * @returns {module:adapters.Mysqlx.Connection.Capabilities}\n */\nCapabilities.create = function (properties) {\n    const proto = new CapabilitiesStub();\n    proto.setCapabilitiesList(Object.keys(properties).map(k => capability.create(k, properties[k]).valueOf()));\n\n    return Capabilities(proto);\n};\n\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Connection.Capabilities}\n */\nCapabilities.deserialize = function (buffer) {\n    return Capabilities(CapabilitiesStub.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nCapabilities.MESSAGE_ID = ServerMessagesStub.CONN_CAPABILITIES;\n\nmodule.exports = Capabilities;\n"]},"metadata":{},"sourceType":"script"}