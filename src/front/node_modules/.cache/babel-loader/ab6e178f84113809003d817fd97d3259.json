{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst ParserType = require('../../../../ExprParser').Type;\n\nconst ProjectionStub = require('../../../Stubs/mysqlx_crud_pb').Projection;\n\nconst expr = require('../Expr/Expr');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Projection\n * @param {proto.Mysqlx.Crud.Projection} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Projection}\n */\n\n\nfunction Projection(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Crud.Projection#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        source: expr(proto.getSource()).toJSON(),\n        // In this case, the value of \"alias\" is not an optional string\n        // because the default value will be the source string\n        alias: proto.getAlias()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Projection instance given an expression string or object.\n * @param {string|Object} value - expression string or object\n * @param {Object} [options] - extended options\n * @returns {module:adapters.Mysqlx.Crud.Projection}\n */\n\n\nProjection.create = function (value, options) {\n  options = Object.assign({}, {\n    type: ParserType.PROJECTED_SEARCH_EXPR\n  }, options); // If the value is a raw string, it needs to be transformed into a proper\n  // expression abstraction (ultimately a Mysqlx.Crud.Projection instance).\n\n  if (typeof value === 'string') {\n    return Projection(expr.create(value, options).valueOf());\n  }\n\n  const proto = new ProjectionStub();\n  proto.setSource(value);\n  return Projection(proto);\n};\n\nmodule.exports = Projection;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Crud/Projection.js"],"names":["ParserType","require","Type","ProjectionStub","Projection","expr","wraps","proto","Object","assign","toJSON","source","getSource","alias","getAlias","create","value","options","type","PROJECTED_SEARCH_EXPR","valueOf","setSource","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,wBAAD,CAAP,CAAkCC,IAArD;;AACA,MAAMC,cAAc,GAAGF,OAAO,CAAC,+BAAD,CAAP,CAAyCG,UAAhE;;AACA,MAAMC,IAAI,GAAGJ,OAAO,CAAC,cAAD,CAApB;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,UAAT,CAAqBG,KAArB,EAA4B;AACxB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAK,CAACC,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAO;AACHC,QAAAA,MAAM,EAAEN,IAAI,CAACE,KAAK,CAACK,SAAN,EAAD,CAAJ,CAAwBF,MAAxB,EADL;AAEH;AACA;AACAG,QAAAA,KAAK,EAAEN,KAAK,CAACO,QAAN;AAJJ,OAAP;AAMH;;AAdkC,GAAhC,CAAP;AAgBH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAV,UAAU,CAACW,MAAX,GAAoB,UAAUC,KAAV,EAAiBC,OAAjB,EAA0B;AAC1CA,EAAAA,OAAO,GAAGT,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAAES,IAAAA,IAAI,EAAElB,UAAU,CAACmB;AAAnB,GAAlB,EAA8DF,OAA9D,CAAV,CAD0C,CAG1C;AACA;;AACA,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC3B,WAAOZ,UAAU,CAACC,IAAI,CAACU,MAAL,CAAYC,KAAZ,EAAmBC,OAAnB,EAA4BG,OAA5B,EAAD,CAAjB;AACH;;AAED,QAAMb,KAAK,GAAG,IAAIJ,cAAJ,EAAd;AACAI,EAAAA,KAAK,CAACc,SAAN,CAAgBL,KAAhB;AAEA,SAAOZ,UAAU,CAACG,KAAD,CAAjB;AACH,CAbD;;AAeAe,MAAM,CAACC,OAAP,GAAiBnB,UAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst ParserType = require('../../../../ExprParser').Type;\nconst ProjectionStub = require('../../../Stubs/mysqlx_crud_pb').Projection;\nconst expr = require('../Expr/Expr');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Projection\n * @param {proto.Mysqlx.Crud.Projection} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Projection}\n */\nfunction Projection (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Crud.Projection#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                source: expr(proto.getSource()).toJSON(),\n                // In this case, the value of \"alias\" is not an optional string\n                // because the default value will be the source string\n                alias: proto.getAlias()\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Projection instance given an expression string or object.\n * @param {string|Object} value - expression string or object\n * @param {Object} [options] - extended options\n * @returns {module:adapters.Mysqlx.Crud.Projection}\n */\nProjection.create = function (value, options) {\n    options = Object.assign({}, { type: ParserType.PROJECTED_SEARCH_EXPR }, options);\n\n    // If the value is a raw string, it needs to be transformed into a proper\n    // expression abstraction (ultimately a Mysqlx.Crud.Projection instance).\n    if (typeof value === 'string') {\n        return Projection(expr.create(value, options).valueOf());\n    }\n\n    const proto = new ProjectionStub();\n    proto.setSource(value);\n\n    return Projection(proto);\n};\n\nmodule.exports = Projection;\n"]},"metadata":{},"sourceType":"script"}