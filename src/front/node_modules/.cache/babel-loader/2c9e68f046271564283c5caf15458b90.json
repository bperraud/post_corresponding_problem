{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst DeleteStub = require('../../../Stubs/mysqlx_crud_pb').Delete;\n\nconst collection = require('./Collection');\n\nconst expr = require('../Expr/Expr');\n\nconst limit = require('./Limit');\n\nconst limitExpr = require('./LimitExpr');\n\nconst list = require('../../Traits/List');\n\nconst order = require('./Order');\n\nconst polyglot = require('../../Traits/Polyglot');\n\nconst scalar = require('../Datatypes/Scalar');\n\nconst serializable = require('../../Traits/Serializable');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Delete\n * @param {proto.Mysqlx.Crud.Delete} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Delete}\n */\n\n\nfunction Delete(proto) {\n  return Object.assign({}, polyglot(proto), serializable(proto), wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Crud.Delete#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        collection: collection(proto.getCollection()).toJSON(),\n        data_model: this.getDataModel(),\n        criteria: expr(proto.getCriteria()).toJSON(),\n        args: list(proto.getArgsList().map(arg => scalar(arg))).toJSON(),\n        order: list(proto.getOrderList().map(rule => order(rule))).toJSON(),\n        limit: limit(proto.getLimit()).toJSON(),\n        limit_expr: limitExpr(proto.getLimitExpr()).toJSON()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Delete instance for a given statement.\n * @param {module:CollectionRemove|module:TableDelete} statement\n * @param {Object} [options] - extended options\n * @returns {module:adapters.Mysqlx.Crud.Delete}\n */\n\n\nDelete.create = function (statement, options) {\n  options = Object.assign({}, {\n    mode: statement.getCategory(),\n    toParse: true,\n    toPrepare: false\n  }, options);\n  const proto = new DeleteStub();\n  proto.setCollection(collection.create(statement.getTableName(), statement.getSchema()).valueOf());\n  proto.setDataModel(statement.getCategory());\n  const criteria = expr.create(statement.getCriteria(), options);\n  proto.setCriteria(criteria.valueOf());\n  const args = criteria.getPlaceholderArgs(statement.getBindings()); // Placeholder assignments can't be encoded in the Prepare stage\n\n  if (!options.toPrepare) {\n    proto.setArgsList(args); // non-prepared statements should use Mysqlx.Crud.Limit to keep compatibility with older server versions\n\n    proto.setLimit(limit.create(statement.getCount()).valueOf());\n  } else {\n    // if row_count and offset should be placeholders, they need to map to the\n    // appropriate position index (args.length + i)\n    // CollectionRemove and TableDelete operations do not have an offset API\n    proto.setLimitExpr(limitExpr.create(statement.getCount(), Object.assign({}, options, {\n      position: args.length\n    })).valueOf());\n  }\n\n  proto.setOrderList(statement.getOrderings().map(column => order.create(column, options).valueOf()));\n  return Delete(proto);\n};\n\nmodule.exports = Delete;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Crud/Delete.js"],"names":["DeleteStub","require","Delete","collection","expr","limit","limitExpr","list","order","polyglot","scalar","serializable","wraps","proto","Object","assign","toJSON","getCollection","data_model","getDataModel","criteria","getCriteria","args","getArgsList","map","arg","getOrderList","rule","getLimit","limit_expr","getLimitExpr","create","statement","options","mode","getCategory","toParse","toPrepare","setCollection","getTableName","getSchema","valueOf","setDataModel","setCriteria","getPlaceholderArgs","getBindings","setArgsList","setLimit","getCount","setLimitExpr","position","length","setOrderList","getOrderings","column","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst DeleteStub = require('../../../Stubs/mysqlx_crud_pb').Delete;\nconst collection = require('./Collection');\nconst expr = require('../Expr/Expr');\nconst limit = require('./Limit');\nconst limitExpr = require('./LimitExpr');\nconst list = require('../../Traits/List');\nconst order = require('./Order');\nconst polyglot = require('../../Traits/Polyglot');\nconst scalar = require('../Datatypes/Scalar');\nconst serializable = require('../../Traits/Serializable');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Delete\n * @param {proto.Mysqlx.Crud.Delete} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Delete}\n */\nfunction Delete (proto) {\n    return Object.assign({}, polyglot(proto), serializable(proto), wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Crud.Delete#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                collection: collection(proto.getCollection()).toJSON(),\n                data_model: this.getDataModel(),\n                criteria: expr(proto.getCriteria()).toJSON(),\n                args: list(proto.getArgsList().map(arg => scalar(arg))).toJSON(),\n                order: list(proto.getOrderList().map(rule => order(rule))).toJSON(),\n                limit: limit(proto.getLimit()).toJSON(),\n                limit_expr: limitExpr(proto.getLimitExpr()).toJSON()\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Delete instance for a given statement.\n * @param {module:CollectionRemove|module:TableDelete} statement\n * @param {Object} [options] - extended options\n * @returns {module:adapters.Mysqlx.Crud.Delete}\n */\nDelete.create = function (statement, options) {\n    options = Object.assign({}, { mode: statement.getCategory(), toParse: true, toPrepare: false }, options);\n\n    const proto = new DeleteStub();\n\n    proto.setCollection(collection.create(statement.getTableName(), statement.getSchema()).valueOf());\n    proto.setDataModel(statement.getCategory());\n\n    const criteria = expr.create(statement.getCriteria(), options);\n    proto.setCriteria(criteria.valueOf());\n\n    const args = criteria.getPlaceholderArgs(statement.getBindings());\n\n    // Placeholder assignments can't be encoded in the Prepare stage\n    if (!options.toPrepare) {\n        proto.setArgsList(args);\n        // non-prepared statements should use Mysqlx.Crud.Limit to keep compatibility with older server versions\n        proto.setLimit(limit.create(statement.getCount()).valueOf());\n    } else {\n        // if row_count and offset should be placeholders, they need to map to the\n        // appropriate position index (args.length + i)\n        // CollectionRemove and TableDelete operations do not have an offset API\n        proto.setLimitExpr(limitExpr.create(statement.getCount(), Object.assign({}, options, { position: args.length })).valueOf());\n    }\n\n    proto.setOrderList(statement.getOrderings().map(column => order.create(column, options).valueOf()));\n\n    return Delete(proto);\n};\n\nmodule.exports = Delete;\n"]},"metadata":{},"sourceType":"script"}