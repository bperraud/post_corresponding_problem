{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst Scalar = require('../../../../Protocol/Stubs/mysqlx_datatypes_pb').Scalar;\n\nconst Expr = require('../../../../Protocol/Stubs/mysqlx_expr_pb').Expr;\n\nconst Pa = require('parsimmon');\n\nconst bytes = require('../../../../Protocol/Wrappers/ScalarValues/bytes');\n\nconst parser = options => r => Pa.seq(r.INTERVAL, Pa.whitespace, r.expr.map(data => data.output), Pa.whitespace, r.INTERVAL_UNIT).map(data => {\n  const str = new Scalar.String();\n  str.setValue(bytes.create(Buffer.from(data[4])).valueOf());\n  const unit = new Scalar();\n  unit.setType(Scalar.Type.V_STRING);\n  unit.setVString(str);\n  const expr = new Expr();\n  expr.setType(Expr.Type.LITERAL);\n  expr.setLiteral(unit);\n  return [data[2], expr];\n});\n\nmodule.exports = {\n  name: 'INTERVAL',\n  parser\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/ExprParser/lib/grammar/booleanExpressions/interval.js"],"names":["Scalar","require","Expr","Pa","bytes","parser","options","r","seq","INTERVAL","whitespace","expr","map","data","output","INTERVAL_UNIT","str","String","setValue","create","Buffer","from","valueOf","unit","setType","Type","V_STRING","setVString","LITERAL","setLiteral","module","exports","name"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,gDAAD,CAAP,CAA0DD,MAAzE;;AACA,MAAME,IAAI,GAAGD,OAAO,CAAC,2CAAD,CAAP,CAAqDC,IAAlE;;AACA,MAAMC,EAAE,GAAGF,OAAO,CAAC,WAAD,CAAlB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,kDAAD,CAArB;;AAEA,MAAMI,MAAM,GAAGC,OAAO,IAAIC,CAAC,IAAIJ,EAAE,CAC5BK,GAD0B,CAEvBD,CAAC,CAACE,QAFqB,EAGvBN,EAAE,CAACO,UAHoB,EAIvBH,CAAC,CAACI,IAAF,CAAOC,GAAP,CAAWC,IAAI,IAAIA,IAAI,CAACC,MAAxB,CAJuB,EAKvBX,EAAE,CAACO,UALoB,EAMvBH,CAAC,CAACQ,aANqB,EAQ1BH,GAR0B,CAQtBC,IAAI,IAAI;AACT,QAAMG,GAAG,GAAG,IAAIhB,MAAM,CAACiB,MAAX,EAAZ;AACAD,EAAAA,GAAG,CAACE,QAAJ,CAAad,KAAK,CAACe,MAAN,CAAaC,MAAM,CAACC,IAAP,CAAYR,IAAI,CAAC,CAAD,CAAhB,CAAb,EAAmCS,OAAnC,EAAb;AAEA,QAAMC,IAAI,GAAG,IAAIvB,MAAJ,EAAb;AACAuB,EAAAA,IAAI,CAACC,OAAL,CAAaxB,MAAM,CAACyB,IAAP,CAAYC,QAAzB;AACAH,EAAAA,IAAI,CAACI,UAAL,CAAgBX,GAAhB;AAEA,QAAML,IAAI,GAAG,IAAIT,IAAJ,EAAb;AACAS,EAAAA,IAAI,CAACa,OAAL,CAAatB,IAAI,CAACuB,IAAL,CAAUG,OAAvB;AACAjB,EAAAA,IAAI,CAACkB,UAAL,CAAgBN,IAAhB;AAEA,SAAO,CAACV,IAAI,CAAC,CAAD,CAAL,EAAUF,IAAV,CAAP;AACH,CArB0B,CAA/B;;AAuBAmB,MAAM,CAACC,OAAP,GAAiB;AAAEC,EAAAA,IAAI,EAAE,UAAR;AAAoB3B,EAAAA;AAApB,CAAjB","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst Scalar = require('../../../../Protocol/Stubs/mysqlx_datatypes_pb').Scalar;\nconst Expr = require('../../../../Protocol/Stubs/mysqlx_expr_pb').Expr;\nconst Pa = require('parsimmon');\nconst bytes = require('../../../../Protocol/Wrappers/ScalarValues/bytes');\n\nconst parser = options => r => Pa\n    .seq(\n        r.INTERVAL,\n        Pa.whitespace,\n        r.expr.map(data => data.output),\n        Pa.whitespace,\n        r.INTERVAL_UNIT\n    )\n    .map(data => {\n        const str = new Scalar.String();\n        str.setValue(bytes.create(Buffer.from(data[4])).valueOf());\n\n        const unit = new Scalar();\n        unit.setType(Scalar.Type.V_STRING);\n        unit.setVString(str);\n\n        const expr = new Expr();\n        expr.setType(Expr.Type.LITERAL);\n        expr.setLiteral(unit);\n\n        return [data[2], expr];\n    });\n\nmodule.exports = { name: 'INTERVAL', parser };\n"]},"metadata":{},"sourceType":"script"}