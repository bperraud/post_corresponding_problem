{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n/**\n * Mysqlx.Crud outbound message handlers.\n * @private\n * @module handlers.Mysqlx.Crud\n */\n\nconst crudDelete = require('../Wrappers/Messages/Crud/Delete');\n\nconst crudFind = require('../Wrappers/Messages/Crud/Find');\n\nconst crudInsert = require('../Wrappers/Messages/Crud/Insert');\n\nconst crudUpdate = require('../Wrappers/Messages/Crud/Update');\n\nconst logger = require('../../logger');\n\nconst log = logger('protocol:outbound:Mysqlx.Crud');\n/**\n * Encode a Mysqlx.Crud.Delete protobuf message.\n * @function\n * @name module:Crud#encodeDelete\n * @param {module:CollectionRemove|module:TableDelete} query - database operation instance\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\n\nexports.encodeDelete = function (query) {\n  const outboundDelete = crudDelete.create(query);\n  log.info('Delete', outboundDelete);\n  return outboundDelete.serialize();\n};\n/**\n * Encode a Mysqlx.Crud.Find protobuf message.\n * @function\n * @name module:Crud#encodeFind\n * @param {module:CollectionFind|module:TableSelect} query - database operation instance\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\n\n\nexports.encodeFind = function (query) {\n  const outboundFind = crudFind.create(query);\n  log.info('Find', outboundFind);\n  return outboundFind.serialize();\n};\n/**\n * Encode a Mysqlx.Crud.Insert protobuf message.\n * @function\n * @name module:Crud#encodeInsert\n * @param {module:CollectionAdd|module:TableInsert} query - database operation instance\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\n\n\nexports.encodeInsert = function (query) {\n  const outboundInsert = crudInsert.create(query);\n  log.info('Insert', outboundInsert);\n  return outboundInsert.serialize();\n};\n/**\n * Encode a Mysqlx.Crud.Update protobuf message.\n * @function\n * @name module:Crud#encodeUpdate\n * @param {module:CollectionModify|module:TableUpdate} query - database operation instance\n * @returns {proto.Mysqlx.Crud.Update} The protobuf encoded object.\n */\n\n\nexports.encodeUpdate = function (query) {\n  const outboundUpdate = crudUpdate.create(query);\n  log.info('Update', outboundUpdate);\n  return outboundUpdate.serialize();\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/OutboundHandlers/Crud.js"],"names":["crudDelete","require","crudFind","crudInsert","crudUpdate","logger","log","exports","encodeDelete","query","outboundDelete","create","info","serialize","encodeFind","outboundFind","encodeInsert","outboundInsert","encodeUpdate","outboundUpdate"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,kCAAD,CAA1B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,gCAAD,CAAxB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,kCAAD,CAA1B;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,kCAAD,CAA1B;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,cAAD,CAAtB;;AAEA,MAAMK,GAAG,GAAGD,MAAM,CAAC,+BAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAE,OAAO,CAACC,YAAR,GAAuB,UAAUC,KAAV,EAAiB;AACpC,QAAMC,cAAc,GAAGV,UAAU,CAACW,MAAX,CAAkBF,KAAlB,CAAvB;AACAH,EAAAA,GAAG,CAACM,IAAJ,CAAS,QAAT,EAAmBF,cAAnB;AAEA,SAAOA,cAAc,CAACG,SAAf,EAAP;AACH,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAN,OAAO,CAACO,UAAR,GAAqB,UAAUL,KAAV,EAAiB;AAClC,QAAMM,YAAY,GAAGb,QAAQ,CAACS,MAAT,CAAgBF,KAAhB,CAArB;AACAH,EAAAA,GAAG,CAACM,IAAJ,CAAS,MAAT,EAAiBG,YAAjB;AAEA,SAAOA,YAAY,CAACF,SAAb,EAAP;AACH,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAN,OAAO,CAACS,YAAR,GAAuB,UAAUP,KAAV,EAAiB;AACpC,QAAMQ,cAAc,GAAGd,UAAU,CAACQ,MAAX,CAAkBF,KAAlB,CAAvB;AACAH,EAAAA,GAAG,CAACM,IAAJ,CAAS,QAAT,EAAmBK,cAAnB;AAEA,SAAOA,cAAc,CAACJ,SAAf,EAAP;AACH,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAN,OAAO,CAACW,YAAR,GAAuB,UAAUT,KAAV,EAAiB;AACpC,QAAMU,cAAc,GAAGf,UAAU,CAACO,MAAX,CAAkBF,KAAlB,CAAvB;AACAH,EAAAA,GAAG,CAACM,IAAJ,CAAS,QAAT,EAAmBO,cAAnB;AAEA,SAAOA,cAAc,CAACN,SAAf,EAAP;AACH,CALD","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\n/**\n * Mysqlx.Crud outbound message handlers.\n * @private\n * @module handlers.Mysqlx.Crud\n */\n\nconst crudDelete = require('../Wrappers/Messages/Crud/Delete');\nconst crudFind = require('../Wrappers/Messages/Crud/Find');\nconst crudInsert = require('../Wrappers/Messages/Crud/Insert');\nconst crudUpdate = require('../Wrappers/Messages/Crud/Update');\nconst logger = require('../../logger');\n\nconst log = logger('protocol:outbound:Mysqlx.Crud');\n\n/**\n * Encode a Mysqlx.Crud.Delete protobuf message.\n * @function\n * @name module:Crud#encodeDelete\n * @param {module:CollectionRemove|module:TableDelete} query - database operation instance\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\nexports.encodeDelete = function (query) {\n    const outboundDelete = crudDelete.create(query);\n    log.info('Delete', outboundDelete);\n\n    return outboundDelete.serialize();\n};\n\n/**\n * Encode a Mysqlx.Crud.Find protobuf message.\n * @function\n * @name module:Crud#encodeFind\n * @param {module:CollectionFind|module:TableSelect} query - database operation instance\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\nexports.encodeFind = function (query) {\n    const outboundFind = crudFind.create(query);\n    log.info('Find', outboundFind);\n\n    return outboundFind.serialize();\n};\n\n/**\n * Encode a Mysqlx.Crud.Insert protobuf message.\n * @function\n * @name module:Crud#encodeInsert\n * @param {module:CollectionAdd|module:TableInsert} query - database operation instance\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\nexports.encodeInsert = function (query) {\n    const outboundInsert = crudInsert.create(query);\n    log.info('Insert', outboundInsert);\n\n    return outboundInsert.serialize();\n};\n\n/**\n * Encode a Mysqlx.Crud.Update protobuf message.\n * @function\n * @name module:Crud#encodeUpdate\n * @param {module:CollectionModify|module:TableUpdate} query - database operation instance\n * @returns {proto.Mysqlx.Crud.Update} The protobuf encoded object.\n */\nexports.encodeUpdate = function (query) {\n    const outboundUpdate = crudUpdate.create(query);\n    log.info('Update', outboundUpdate);\n\n    return outboundUpdate.serialize();\n};\n"]},"metadata":{},"sourceType":"script"}