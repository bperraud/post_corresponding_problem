{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst DeallocateStub = require('../../../Stubs/mysqlx_prepare_pb').Deallocate;\n\nconst serializable = require('../../Traits/Serializable');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Prepare.Deallocate\n * @param {proto.Mysqlx.Prepare.Deallocate} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Prepare.Deallocate}\n */\n\n\nfunction Deallocate(proto) {\n  return Object.assign({}, serializable(proto), wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Prepare.Deallocate#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        stmt_id: proto.getStmtId()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Prepare.Deallocate instance for a given statement.\n * @param {Preparing} statement\n * @returns {module:adapters.Mysqlx.Prepare.Deallocate}\n */\n\n\nDeallocate.create = function (statement) {\n  const proto = new DeallocateStub();\n  proto.setStmtId(statement.getStatementId());\n  return Deallocate(proto);\n};\n\nmodule.exports = Deallocate;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Prepare/Deallocate.js"],"names":["DeallocateStub","require","Deallocate","serializable","wraps","proto","Object","assign","toJSON","stmt_id","getStmtId","create","statement","setStmtId","getStatementId","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,kCAAD,CAAP,CAA4CC,UAAnE;;AACA,MAAMC,YAAY,GAAGF,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAqBG,KAArB,EAA4B;AACxB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,YAAY,CAACE,KAAD,CAA9B,EAAuCD,KAAK,CAACC,KAAD,CAA5C,EAAqD;AACxD;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAO;AACHC,QAAAA,OAAO,EAAEJ,KAAK,CAACK,SAAN;AADN,OAAP;AAGH;;AAXuD,GAArD,CAAP;AAaH;AAED;AACA;AACA;AACA;AACA;;;AACAR,UAAU,CAACS,MAAX,GAAoB,UAAUC,SAAV,EAAqB;AACrC,QAAMP,KAAK,GAAG,IAAIL,cAAJ,EAAd;AAEAK,EAAAA,KAAK,CAACQ,SAAN,CAAgBD,SAAS,CAACE,cAAV,EAAhB;AAEA,SAAOZ,UAAU,CAACG,KAAD,CAAjB;AACH,CAND;;AAQAU,MAAM,CAACC,OAAP,GAAiBd,UAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst DeallocateStub = require('../../../Stubs/mysqlx_prepare_pb').Deallocate;\nconst serializable = require('../../Traits/Serializable');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Prepare.Deallocate\n * @param {proto.Mysqlx.Prepare.Deallocate} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Prepare.Deallocate}\n */\nfunction Deallocate (proto) {\n    return Object.assign({}, serializable(proto), wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Prepare.Deallocate#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                stmt_id: proto.getStmtId()\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Prepare.Deallocate instance for a given statement.\n * @param {Preparing} statement\n * @returns {module:adapters.Mysqlx.Prepare.Deallocate}\n */\nDeallocate.create = function (statement) {\n    const proto = new DeallocateStub();\n\n    proto.setStmtId(statement.getStatementId());\n\n    return Deallocate(proto);\n};\n\nmodule.exports = Deallocate;\n"]},"metadata":{},"sourceType":"script"}