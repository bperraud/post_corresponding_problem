{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst CrudStub = require('../../../Stubs/mysqlx_crud_pb');\n\nconst columnIdentifier = require('../Expr/ColumnIdentifier');\n\nconst expr = require('../Expr/Expr');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.UpdateOperation\n * @param {proto.Mysqlx.Crud.UpdateOperation} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.UpdateOperation}\n */\n\n\nfunction UpdateOperation(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Retrieve the type name of the update operation.\n     * @function\n     * @name module:adapters.Mysqlx.Crud.UpdateOperation#getType\n     * @returns {string}\n     */\n    getType() {\n      return Object.keys(CrudStub.UpdateOperation.UpdateType).filter(k => CrudStub.UpdateOperation.UpdateType[k] === proto.getOperation())[0];\n    },\n\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Crud.UpdateOperation#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        source: columnIdentifier(proto.getSource()).toJSON(),\n        operation: this.getType(),\n        value: expr(proto.getValue()).toJSON()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.UpdateOperation instance for a given object.\n * @param {Object} op - operation parameters\n * @param {Object} [options] - extended options\n * @returns {module:adapters.Mysqlx.Crud.UpdateOperation}\n */\n\n\nUpdateOperation.create = function (op, options) {\n  options = Object.assign({}, options);\n  const proto = new CrudStub.UpdateOperation();\n  proto.setSource(columnIdentifier.create(op.source, options).valueOf());\n  proto.setOperation(op.type); // ITEM_REMOVE operations should not contain any value\n\n  if (op.type === CrudStub.UpdateOperation.UpdateType.ITEM_REMOVE) {\n    return UpdateOperation(proto);\n  } // the value should not be parsed (X Plugin limitation)\n\n\n  proto.setValue(expr.create(op.value, Object.assign({}, options, {\n    toParse: false\n  })).valueOf());\n  return UpdateOperation(proto);\n};\n\nmodule.exports = UpdateOperation;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Crud/UpdateOperation.js"],"names":["CrudStub","require","columnIdentifier","expr","wraps","UpdateOperation","proto","Object","assign","getType","keys","UpdateType","filter","k","getOperation","toJSON","source","getSource","operation","value","getValue","create","op","options","setSource","valueOf","setOperation","type","ITEM_REMOVE","setValue","toParse","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,+BAAD,CAAxB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,cAAD,CAApB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,eAAT,CAA0BC,KAA1B,EAAiC;AAC7B,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAK,CAACE,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,OAAO,GAAI;AACP,aAAOF,MAAM,CAACG,IAAP,CAAYV,QAAQ,CAACK,eAAT,CAAyBM,UAArC,EACFC,MADE,CACKC,CAAC,IAAIb,QAAQ,CAACK,eAAT,CAAyBM,UAAzB,CAAoCE,CAApC,MAA2CP,KAAK,CAACQ,YAAN,EADrD,EAC2E,CAD3E,CAAP;AAEH,KAVkC;;AAYnC;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,MAAM,GAAI;AACN,aAAO;AACHC,QAAAA,MAAM,EAAEd,gBAAgB,CAACI,KAAK,CAACW,SAAN,EAAD,CAAhB,CAAoCF,MAApC,EADL;AAEHG,QAAAA,SAAS,EAAE,KAAKT,OAAL,EAFR;AAGHU,QAAAA,KAAK,EAAEhB,IAAI,CAACG,KAAK,CAACc,QAAN,EAAD,CAAJ,CAAuBL,MAAvB;AAHJ,OAAP;AAKH;;AAxBkC,GAAhC,CAAP;AA0BH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAV,eAAe,CAACgB,MAAhB,GAAyB,UAAUC,EAAV,EAAcC,OAAd,EAAuB;AAC5CA,EAAAA,OAAO,GAAGhB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBe,OAAlB,CAAV;AAEA,QAAMjB,KAAK,GAAG,IAAIN,QAAQ,CAACK,eAAb,EAAd;AAEAC,EAAAA,KAAK,CAACkB,SAAN,CAAgBtB,gBAAgB,CAACmB,MAAjB,CAAwBC,EAAE,CAACN,MAA3B,EAAmCO,OAAnC,EAA4CE,OAA5C,EAAhB;AACAnB,EAAAA,KAAK,CAACoB,YAAN,CAAmBJ,EAAE,CAACK,IAAtB,EAN4C,CAQ5C;;AACA,MAAIL,EAAE,CAACK,IAAH,KAAY3B,QAAQ,CAACK,eAAT,CAAyBM,UAAzB,CAAoCiB,WAApD,EAAiE;AAC7D,WAAOvB,eAAe,CAACC,KAAD,CAAtB;AACH,GAX2C,CAa5C;;;AACAA,EAAAA,KAAK,CAACuB,QAAN,CAAe1B,IAAI,CAACkB,MAAL,CAAYC,EAAE,CAACH,KAAf,EAAsBZ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBe,OAAlB,EAA2B;AAAEO,IAAAA,OAAO,EAAE;AAAX,GAA3B,CAAtB,EAAsEL,OAAtE,EAAf;AAEA,SAAOpB,eAAe,CAACC,KAAD,CAAtB;AACH,CAjBD;;AAmBAyB,MAAM,CAACC,OAAP,GAAiB3B,eAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst CrudStub = require('../../../Stubs/mysqlx_crud_pb');\nconst columnIdentifier = require('../Expr/ColumnIdentifier');\nconst expr = require('../Expr/Expr');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.UpdateOperation\n * @param {proto.Mysqlx.Crud.UpdateOperation} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.UpdateOperation}\n */\nfunction UpdateOperation (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Retrieve the type name of the update operation.\n         * @function\n         * @name module:adapters.Mysqlx.Crud.UpdateOperation#getType\n         * @returns {string}\n         */\n        getType () {\n            return Object.keys(CrudStub.UpdateOperation.UpdateType)\n                .filter(k => CrudStub.UpdateOperation.UpdateType[k] === proto.getOperation())[0];\n        },\n\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Crud.UpdateOperation#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                source: columnIdentifier(proto.getSource()).toJSON(),\n                operation: this.getType(),\n                value: expr(proto.getValue()).toJSON()\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.UpdateOperation instance for a given object.\n * @param {Object} op - operation parameters\n * @param {Object} [options] - extended options\n * @returns {module:adapters.Mysqlx.Crud.UpdateOperation}\n */\nUpdateOperation.create = function (op, options) {\n    options = Object.assign({}, options);\n\n    const proto = new CrudStub.UpdateOperation();\n\n    proto.setSource(columnIdentifier.create(op.source, options).valueOf());\n    proto.setOperation(op.type);\n\n    // ITEM_REMOVE operations should not contain any value\n    if (op.type === CrudStub.UpdateOperation.UpdateType.ITEM_REMOVE) {\n        return UpdateOperation(proto);\n    }\n\n    // the value should not be parsed (X Plugin limitation)\n    proto.setValue(expr.create(op.value, Object.assign({}, options, { toParse: false })).valueOf());\n\n    return UpdateOperation(proto);\n};\n\nmodule.exports = UpdateOperation;\n"]},"metadata":{},"sourceType":"script"}