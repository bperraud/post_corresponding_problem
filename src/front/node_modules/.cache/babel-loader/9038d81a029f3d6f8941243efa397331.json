{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\nvar jspb = require('google-protobuf');\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar mysqlx_pb = require('./mysqlx_pb.js');\n\nvar mysqlx_expr_pb = require('./mysqlx_expr_pb.js');\n\nvar mysqlx_datatypes_pb = require('./mysqlx_datatypes_pb.js');\n\ngoog.exportSymbol('proto.Mysqlx.Crud.Collection', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Column', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.CreateView', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.DataModel', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Delete', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.DropView', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Find', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Find.RowLock', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Find.RowLockOptions', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Insert', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Insert.TypedRow', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Limit', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.LimitExpr', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.ModifyView', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Order', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Order.Direction', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Projection', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Update', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.UpdateOperation', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.UpdateOperation.UpdateType', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.ViewAlgorithm', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.ViewCheckOption', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.ViewSqlSecurity', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.Mysqlx.Crud.Column = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Column.repeatedFields_, null);\n};\n\ngoog.inherits(proto.Mysqlx.Crud.Column, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Column.displayName = 'proto.Mysqlx.Crud.Column';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.Mysqlx.Crud.Column.repeatedFields_ = [3];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Crud.Column.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Crud.Column.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Crud.Column} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Crud.Column.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      name: jspb.Message.getField(msg, 1),\n      alias: jspb.Message.getField(msg, 2),\n      documentPathList: jspb.Message.toObjectList(msg.getDocumentPathList(), mysqlx_expr_pb.DocumentPathItem.toObject, includeInstance)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Column}\n */\n\n\nproto.Mysqlx.Crud.Column.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Column();\n  return proto.Mysqlx.Crud.Column.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Column} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Column}\n */\n\n\nproto.Mysqlx.Crud.Column.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setName(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setAlias(value);\n        break;\n\n      case 3:\n        var value = new mysqlx_expr_pb.DocumentPathItem();\n        reader.readMessage(value, mysqlx_expr_pb.DocumentPathItem.deserializeBinaryFromReader);\n        msg.addDocumentPath(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Crud.Column.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Column.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Column} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Crud.Column.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {string} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeString(1, f);\n  }\n\n  f =\n  /** @type {string} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeString(2, f);\n  }\n\n  f = message.getDocumentPathList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(3, f, mysqlx_expr_pb.DocumentPathItem.serializeBinaryToWriter);\n  }\n};\n/**\n * optional string name = 1;\n * @return {string}\n */\n\n\nproto.Mysqlx.Crud.Column.prototype.getName = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/** @param {string} value */\n\n\nproto.Mysqlx.Crud.Column.prototype.setName = function (value) {\n  jspb.Message.setField(this, 1, value);\n};\n\nproto.Mysqlx.Crud.Column.prototype.clearName = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Column.prototype.hasName = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional string alias = 2;\n * @return {string}\n */\n\n\nproto.Mysqlx.Crud.Column.prototype.getAlias = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/** @param {string} value */\n\n\nproto.Mysqlx.Crud.Column.prototype.setAlias = function (value) {\n  jspb.Message.setField(this, 2, value);\n};\n\nproto.Mysqlx.Crud.Column.prototype.clearAlias = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Column.prototype.hasAlias = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * repeated Mysqlx.Expr.DocumentPathItem document_path = 3;\n * @return {!Array.<!proto.Mysqlx.Expr.DocumentPathItem>}\n */\n\n\nproto.Mysqlx.Crud.Column.prototype.getDocumentPathList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Expr.DocumentPathItem>} */\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_expr_pb.DocumentPathItem, 3)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Expr.DocumentPathItem>} value */\n\n\nproto.Mysqlx.Crud.Column.prototype.setDocumentPathList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n/**\n * @param {!proto.Mysqlx.Expr.DocumentPathItem=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Expr.DocumentPathItem}\n */\n\n\nproto.Mysqlx.Crud.Column.prototype.addDocumentPath = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Mysqlx.Expr.DocumentPathItem, opt_index);\n};\n\nproto.Mysqlx.Crud.Column.prototype.clearDocumentPathList = function () {\n  this.setDocumentPathList([]);\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Crud.Projection = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Crud.Projection, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Projection.displayName = 'proto.Mysqlx.Crud.Projection';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Crud.Projection.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Crud.Projection.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Crud.Projection} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Crud.Projection.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      source: (f = msg.getSource()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),\n      alias: jspb.Message.getField(msg, 2)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Projection}\n */\n\n\nproto.Mysqlx.Crud.Projection.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Projection();\n  return proto.Mysqlx.Crud.Projection.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Projection} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Projection}\n */\n\n\nproto.Mysqlx.Crud.Projection.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new mysqlx_expr_pb.Expr();\n        reader.readMessage(value, mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n        msg.setSource(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setAlias(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Crud.Projection.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Projection.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Projection} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Crud.Projection.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getSource();\n\n  if (f != null) {\n    writer.writeMessage(1, f, mysqlx_expr_pb.Expr.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {string} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeString(2, f);\n  }\n};\n/**\n * required Mysqlx.Expr.Expr source = 1;\n * @return {!proto.Mysqlx.Expr.Expr}\n */\n\n\nproto.Mysqlx.Crud.Projection.prototype.getSource = function () {\n  return (\n    /** @type{!proto.Mysqlx.Expr.Expr} */\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 1, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Expr.Expr} value */\n\n\nproto.Mysqlx.Crud.Projection.prototype.setSource = function (value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\nproto.Mysqlx.Crud.Projection.prototype.clearSource = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Projection.prototype.hasSource = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional string alias = 2;\n * @return {string}\n */\n\n\nproto.Mysqlx.Crud.Projection.prototype.getAlias = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/** @param {string} value */\n\n\nproto.Mysqlx.Crud.Projection.prototype.setAlias = function (value) {\n  jspb.Message.setField(this, 2, value);\n};\n\nproto.Mysqlx.Crud.Projection.prototype.clearAlias = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Projection.prototype.hasAlias = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Crud.Collection = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Crud.Collection, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Collection.displayName = 'proto.Mysqlx.Crud.Collection';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Crud.Collection.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Crud.Collection.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Crud.Collection} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Crud.Collection.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      name: jspb.Message.getField(msg, 1),\n      schema: jspb.Message.getField(msg, 2)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Collection}\n */\n\n\nproto.Mysqlx.Crud.Collection.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Collection();\n  return proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Collection} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Collection}\n */\n\n\nproto.Mysqlx.Crud.Collection.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setName(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setSchema(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Crud.Collection.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Collection.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Collection} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Crud.Collection.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {string} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeString(1, f);\n  }\n\n  f =\n  /** @type {string} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeString(2, f);\n  }\n};\n/**\n * required string name = 1;\n * @return {string}\n */\n\n\nproto.Mysqlx.Crud.Collection.prototype.getName = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/** @param {string} value */\n\n\nproto.Mysqlx.Crud.Collection.prototype.setName = function (value) {\n  jspb.Message.setField(this, 1, value);\n};\n\nproto.Mysqlx.Crud.Collection.prototype.clearName = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Collection.prototype.hasName = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional string schema = 2;\n * @return {string}\n */\n\n\nproto.Mysqlx.Crud.Collection.prototype.getSchema = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/** @param {string} value */\n\n\nproto.Mysqlx.Crud.Collection.prototype.setSchema = function (value) {\n  jspb.Message.setField(this, 2, value);\n};\n\nproto.Mysqlx.Crud.Collection.prototype.clearSchema = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Collection.prototype.hasSchema = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Crud.Limit = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Crud.Limit, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Limit.displayName = 'proto.Mysqlx.Crud.Limit';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Crud.Limit.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Crud.Limit.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Crud.Limit} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Crud.Limit.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      rowCount: jspb.Message.getField(msg, 1),\n      offset: jspb.Message.getField(msg, 2)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Limit}\n */\n\n\nproto.Mysqlx.Crud.Limit.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Limit();\n  return proto.Mysqlx.Crud.Limit.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Limit} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Limit}\n */\n\n\nproto.Mysqlx.Crud.Limit.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {number} */\n        reader.readUint64();\n        msg.setRowCount(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {number} */\n        reader.readUint64();\n        msg.setOffset(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Crud.Limit.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Limit.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Limit} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Crud.Limit.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {number} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeUint64(1, f);\n  }\n\n  f =\n  /** @type {number} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeUint64(2, f);\n  }\n};\n/**\n * required uint64 row_count = 1;\n * @return {number}\n */\n\n\nproto.Mysqlx.Crud.Limit.prototype.getRowCount = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.Mysqlx.Crud.Limit.prototype.setRowCount = function (value) {\n  jspb.Message.setField(this, 1, value);\n};\n\nproto.Mysqlx.Crud.Limit.prototype.clearRowCount = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Limit.prototype.hasRowCount = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional uint64 offset = 2;\n * @return {number}\n */\n\n\nproto.Mysqlx.Crud.Limit.prototype.getOffset = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.Mysqlx.Crud.Limit.prototype.setOffset = function (value) {\n  jspb.Message.setField(this, 2, value);\n};\n\nproto.Mysqlx.Crud.Limit.prototype.clearOffset = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Limit.prototype.hasOffset = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Crud.LimitExpr = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Crud.LimitExpr, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.LimitExpr.displayName = 'proto.Mysqlx.Crud.LimitExpr';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Crud.LimitExpr.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Crud.LimitExpr.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Crud.LimitExpr} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Crud.LimitExpr.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      rowCount: (f = msg.getRowCount()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),\n      offset: (f = msg.getOffset()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.LimitExpr}\n */\n\n\nproto.Mysqlx.Crud.LimitExpr.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.LimitExpr();\n  return proto.Mysqlx.Crud.LimitExpr.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.LimitExpr} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.LimitExpr}\n */\n\n\nproto.Mysqlx.Crud.LimitExpr.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new mysqlx_expr_pb.Expr();\n        reader.readMessage(value, mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n        msg.setRowCount(value);\n        break;\n\n      case 2:\n        var value = new mysqlx_expr_pb.Expr();\n        reader.readMessage(value, mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n        msg.setOffset(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Crud.LimitExpr.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.LimitExpr.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.LimitExpr} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Crud.LimitExpr.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getRowCount();\n\n  if (f != null) {\n    writer.writeMessage(1, f, mysqlx_expr_pb.Expr.serializeBinaryToWriter);\n  }\n\n  f = message.getOffset();\n\n  if (f != null) {\n    writer.writeMessage(2, f, mysqlx_expr_pb.Expr.serializeBinaryToWriter);\n  }\n};\n/**\n * required Mysqlx.Expr.Expr row_count = 1;\n * @return {!proto.Mysqlx.Expr.Expr}\n */\n\n\nproto.Mysqlx.Crud.LimitExpr.prototype.getRowCount = function () {\n  return (\n    /** @type{!proto.Mysqlx.Expr.Expr} */\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 1, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Expr.Expr} value */\n\n\nproto.Mysqlx.Crud.LimitExpr.prototype.setRowCount = function (value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\nproto.Mysqlx.Crud.LimitExpr.prototype.clearRowCount = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.LimitExpr.prototype.hasRowCount = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional Mysqlx.Expr.Expr offset = 2;\n * @return {?proto.Mysqlx.Expr.Expr}\n */\n\n\nproto.Mysqlx.Crud.LimitExpr.prototype.getOffset = function () {\n  return (\n    /** @type{?proto.Mysqlx.Expr.Expr} */\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 2)\n  );\n};\n/** @param {?proto.Mysqlx.Expr.Expr|undefined} value */\n\n\nproto.Mysqlx.Crud.LimitExpr.prototype.setOffset = function (value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\nproto.Mysqlx.Crud.LimitExpr.prototype.clearOffset = function () {\n  this.setOffset(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.LimitExpr.prototype.hasOffset = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Crud.Order = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Crud.Order, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Order.displayName = 'proto.Mysqlx.Crud.Order';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Crud.Order.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Crud.Order.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Crud.Order} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Crud.Order.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      expr: (f = msg.getExpr()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),\n      direction: jspb.Message.getFieldWithDefault(msg, 2, 1)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Order}\n */\n\n\nproto.Mysqlx.Crud.Order.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Order();\n  return proto.Mysqlx.Crud.Order.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Order} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Order}\n */\n\n\nproto.Mysqlx.Crud.Order.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new mysqlx_expr_pb.Expr();\n        reader.readMessage(value, mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n        msg.setExpr(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!proto.Mysqlx.Crud.Order.Direction} */\n        reader.readEnum();\n        msg.setDirection(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Crud.Order.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Order.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Order} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Crud.Order.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getExpr();\n\n  if (f != null) {\n    writer.writeMessage(1, f, mysqlx_expr_pb.Expr.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {!proto.Mysqlx.Crud.Order.Direction} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeEnum(2, f);\n  }\n};\n/**\n * @enum {number}\n */\n\n\nproto.Mysqlx.Crud.Order.Direction = {\n  ASC: 1,\n  DESC: 2\n};\n/**\n * required Mysqlx.Expr.Expr expr = 1;\n * @return {!proto.Mysqlx.Expr.Expr}\n */\n\nproto.Mysqlx.Crud.Order.prototype.getExpr = function () {\n  return (\n    /** @type{!proto.Mysqlx.Expr.Expr} */\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 1, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Expr.Expr} value */\n\n\nproto.Mysqlx.Crud.Order.prototype.setExpr = function (value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\nproto.Mysqlx.Crud.Order.prototype.clearExpr = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Order.prototype.hasExpr = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional Direction direction = 2;\n * @return {!proto.Mysqlx.Crud.Order.Direction}\n */\n\n\nproto.Mysqlx.Crud.Order.prototype.getDirection = function () {\n  return (\n    /** @type {!proto.Mysqlx.Crud.Order.Direction} */\n    jspb.Message.getFieldWithDefault(this, 2, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.Order.Direction} value */\n\n\nproto.Mysqlx.Crud.Order.prototype.setDirection = function (value) {\n  jspb.Message.setField(this, 2, value);\n};\n\nproto.Mysqlx.Crud.Order.prototype.clearDirection = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Order.prototype.hasDirection = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Crud.UpdateOperation = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Crud.UpdateOperation, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.UpdateOperation.displayName = 'proto.Mysqlx.Crud.UpdateOperation';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Crud.UpdateOperation.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Crud.UpdateOperation.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Crud.UpdateOperation} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Crud.UpdateOperation.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      source: (f = msg.getSource()) && mysqlx_expr_pb.ColumnIdentifier.toObject(includeInstance, f),\n      operation: jspb.Message.getField(msg, 2),\n      value: (f = msg.getValue()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.UpdateOperation}\n */\n\n\nproto.Mysqlx.Crud.UpdateOperation.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.UpdateOperation();\n  return proto.Mysqlx.Crud.UpdateOperation.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.UpdateOperation} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.UpdateOperation}\n */\n\n\nproto.Mysqlx.Crud.UpdateOperation.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new mysqlx_expr_pb.ColumnIdentifier();\n        reader.readMessage(value, mysqlx_expr_pb.ColumnIdentifier.deserializeBinaryFromReader);\n        msg.setSource(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!proto.Mysqlx.Crud.UpdateOperation.UpdateType} */\n        reader.readEnum();\n        msg.setOperation(value);\n        break;\n\n      case 3:\n        var value = new mysqlx_expr_pb.Expr();\n        reader.readMessage(value, mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n        msg.setValue(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Crud.UpdateOperation.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.UpdateOperation.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.UpdateOperation} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Crud.UpdateOperation.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getSource();\n\n  if (f != null) {\n    writer.writeMessage(1, f, mysqlx_expr_pb.ColumnIdentifier.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {!proto.Mysqlx.Crud.UpdateOperation.UpdateType} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeEnum(2, f);\n  }\n\n  f = message.getValue();\n\n  if (f != null) {\n    writer.writeMessage(3, f, mysqlx_expr_pb.Expr.serializeBinaryToWriter);\n  }\n};\n/**\n * @enum {number}\n */\n\n\nproto.Mysqlx.Crud.UpdateOperation.UpdateType = {\n  SET: 1,\n  ITEM_REMOVE: 2,\n  ITEM_SET: 3,\n  ITEM_REPLACE: 4,\n  ITEM_MERGE: 5,\n  ARRAY_INSERT: 6,\n  ARRAY_APPEND: 7,\n  MERGE_PATCH: 8\n};\n/**\n * required Mysqlx.Expr.ColumnIdentifier source = 1;\n * @return {!proto.Mysqlx.Expr.ColumnIdentifier}\n */\n\nproto.Mysqlx.Crud.UpdateOperation.prototype.getSource = function () {\n  return (\n    /** @type{!proto.Mysqlx.Expr.ColumnIdentifier} */\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.ColumnIdentifier, 1, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Expr.ColumnIdentifier} value */\n\n\nproto.Mysqlx.Crud.UpdateOperation.prototype.setSource = function (value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\nproto.Mysqlx.Crud.UpdateOperation.prototype.clearSource = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.UpdateOperation.prototype.hasSource = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * required UpdateType operation = 2;\n * @return {!proto.Mysqlx.Crud.UpdateOperation.UpdateType}\n */\n\n\nproto.Mysqlx.Crud.UpdateOperation.prototype.getOperation = function () {\n  return (\n    /** @type {!proto.Mysqlx.Crud.UpdateOperation.UpdateType} */\n    jspb.Message.getFieldWithDefault(this, 2, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.UpdateOperation.UpdateType} value */\n\n\nproto.Mysqlx.Crud.UpdateOperation.prototype.setOperation = function (value) {\n  jspb.Message.setField(this, 2, value);\n};\n\nproto.Mysqlx.Crud.UpdateOperation.prototype.clearOperation = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.UpdateOperation.prototype.hasOperation = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional Mysqlx.Expr.Expr value = 3;\n * @return {?proto.Mysqlx.Expr.Expr}\n */\n\n\nproto.Mysqlx.Crud.UpdateOperation.prototype.getValue = function () {\n  return (\n    /** @type{?proto.Mysqlx.Expr.Expr} */\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 3)\n  );\n};\n/** @param {?proto.Mysqlx.Expr.Expr|undefined} value */\n\n\nproto.Mysqlx.Crud.UpdateOperation.prototype.setValue = function (value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\nproto.Mysqlx.Crud.UpdateOperation.prototype.clearValue = function () {\n  this.setValue(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.UpdateOperation.prototype.hasValue = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Crud.Find = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Find.repeatedFields_, null);\n};\n\ngoog.inherits(proto.Mysqlx.Crud.Find, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Find.displayName = 'proto.Mysqlx.Crud.Find';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.Mysqlx.Crud.Find.repeatedFields_ = [4, 11, 7, 8];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Crud.Find.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Crud.Find.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Crud.Find} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Crud.Find.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),\n      dataModel: jspb.Message.getField(msg, 3),\n      projectionList: jspb.Message.toObjectList(msg.getProjectionList(), proto.Mysqlx.Crud.Projection.toObject, includeInstance),\n      criteria: (f = msg.getCriteria()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),\n      argsList: jspb.Message.toObjectList(msg.getArgsList(), mysqlx_datatypes_pb.Scalar.toObject, includeInstance),\n      orderList: jspb.Message.toObjectList(msg.getOrderList(), proto.Mysqlx.Crud.Order.toObject, includeInstance),\n      groupingList: jspb.Message.toObjectList(msg.getGroupingList(), mysqlx_expr_pb.Expr.toObject, includeInstance),\n      groupingCriteria: (f = msg.getGroupingCriteria()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),\n      locking: jspb.Message.getField(msg, 12),\n      lockingOptions: jspb.Message.getField(msg, 13),\n      limit: (f = msg.getLimit()) && proto.Mysqlx.Crud.Limit.toObject(includeInstance, f),\n      limitExpr: (f = msg.getLimitExpr()) && proto.Mysqlx.Crud.LimitExpr.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Find}\n */\n\n\nproto.Mysqlx.Crud.Find.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Find();\n  return proto.Mysqlx.Crud.Find.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Find} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Find}\n */\n\n\nproto.Mysqlx.Crud.Find.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 2:\n        var value = new proto.Mysqlx.Crud.Collection();\n        reader.readMessage(value, proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);\n        msg.setCollection(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {!proto.Mysqlx.Crud.DataModel} */\n        reader.readEnum();\n        msg.setDataModel(value);\n        break;\n\n      case 4:\n        var value = new proto.Mysqlx.Crud.Projection();\n        reader.readMessage(value, proto.Mysqlx.Crud.Projection.deserializeBinaryFromReader);\n        msg.addProjection(value);\n        break;\n\n      case 5:\n        var value = new mysqlx_expr_pb.Expr();\n        reader.readMessage(value, mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n        msg.setCriteria(value);\n        break;\n\n      case 11:\n        var value = new mysqlx_datatypes_pb.Scalar();\n        reader.readMessage(value, mysqlx_datatypes_pb.Scalar.deserializeBinaryFromReader);\n        msg.addArgs(value);\n        break;\n\n      case 7:\n        var value = new proto.Mysqlx.Crud.Order();\n        reader.readMessage(value, proto.Mysqlx.Crud.Order.deserializeBinaryFromReader);\n        msg.addOrder(value);\n        break;\n\n      case 8:\n        var value = new mysqlx_expr_pb.Expr();\n        reader.readMessage(value, mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n        msg.addGrouping(value);\n        break;\n\n      case 9:\n        var value = new mysqlx_expr_pb.Expr();\n        reader.readMessage(value, mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n        msg.setGroupingCriteria(value);\n        break;\n\n      case 12:\n        var value =\n        /** @type {!proto.Mysqlx.Crud.Find.RowLock} */\n        reader.readEnum();\n        msg.setLocking(value);\n        break;\n\n      case 13:\n        var value =\n        /** @type {!proto.Mysqlx.Crud.Find.RowLockOptions} */\n        reader.readEnum();\n        msg.setLockingOptions(value);\n        break;\n\n      case 6:\n        var value = new proto.Mysqlx.Crud.Limit();\n        reader.readMessage(value, proto.Mysqlx.Crud.Limit.deserializeBinaryFromReader);\n        msg.setLimit(value);\n        break;\n\n      case 14:\n        var value = new proto.Mysqlx.Crud.LimitExpr();\n        reader.readMessage(value, proto.Mysqlx.Crud.LimitExpr.deserializeBinaryFromReader);\n        msg.setLimitExpr(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Find.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Find} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Crud.Find.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getCollection();\n\n  if (f != null) {\n    writer.writeMessage(2, f, proto.Mysqlx.Crud.Collection.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {!proto.Mysqlx.Crud.DataModel} */\n  jspb.Message.getField(message, 3);\n\n  if (f != null) {\n    writer.writeEnum(3, f);\n  }\n\n  f = message.getProjectionList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(4, f, proto.Mysqlx.Crud.Projection.serializeBinaryToWriter);\n  }\n\n  f = message.getCriteria();\n\n  if (f != null) {\n    writer.writeMessage(5, f, mysqlx_expr_pb.Expr.serializeBinaryToWriter);\n  }\n\n  f = message.getArgsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(11, f, mysqlx_datatypes_pb.Scalar.serializeBinaryToWriter);\n  }\n\n  f = message.getOrderList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(7, f, proto.Mysqlx.Crud.Order.serializeBinaryToWriter);\n  }\n\n  f = message.getGroupingList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(8, f, mysqlx_expr_pb.Expr.serializeBinaryToWriter);\n  }\n\n  f = message.getGroupingCriteria();\n\n  if (f != null) {\n    writer.writeMessage(9, f, mysqlx_expr_pb.Expr.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {!proto.Mysqlx.Crud.Find.RowLock} */\n  jspb.Message.getField(message, 12);\n\n  if (f != null) {\n    writer.writeEnum(12, f);\n  }\n\n  f =\n  /** @type {!proto.Mysqlx.Crud.Find.RowLockOptions} */\n  jspb.Message.getField(message, 13);\n\n  if (f != null) {\n    writer.writeEnum(13, f);\n  }\n\n  f = message.getLimit();\n\n  if (f != null) {\n    writer.writeMessage(6, f, proto.Mysqlx.Crud.Limit.serializeBinaryToWriter);\n  }\n\n  f = message.getLimitExpr();\n\n  if (f != null) {\n    writer.writeMessage(14, f, proto.Mysqlx.Crud.LimitExpr.serializeBinaryToWriter);\n  }\n};\n/**\n * @enum {number}\n */\n\n\nproto.Mysqlx.Crud.Find.RowLock = {\n  SHARED_LOCK: 1,\n  EXCLUSIVE_LOCK: 2\n};\n/**\n * @enum {number}\n */\n\nproto.Mysqlx.Crud.Find.RowLockOptions = {\n  NOWAIT: 1,\n  SKIP_LOCKED: 2\n};\n/**\n * required Collection collection = 2;\n * @return {!proto.Mysqlx.Crud.Collection}\n */\n\nproto.Mysqlx.Crud.Find.prototype.getCollection = function () {\n  return (\n    /** @type{!proto.Mysqlx.Crud.Collection} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 2, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.Collection} value */\n\n\nproto.Mysqlx.Crud.Find.prototype.setCollection = function (value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\nproto.Mysqlx.Crud.Find.prototype.clearCollection = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.hasCollection = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional DataModel data_model = 3;\n * @return {!proto.Mysqlx.Crud.DataModel}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.getDataModel = function () {\n  return (\n    /** @type {!proto.Mysqlx.Crud.DataModel} */\n    jspb.Message.getFieldWithDefault(this, 3, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.DataModel} value */\n\n\nproto.Mysqlx.Crud.Find.prototype.setDataModel = function (value) {\n  jspb.Message.setField(this, 3, value);\n};\n\nproto.Mysqlx.Crud.Find.prototype.clearDataModel = function () {\n  jspb.Message.setField(this, 3, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.hasDataModel = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * repeated Projection projection = 4;\n * @return {!Array.<!proto.Mysqlx.Crud.Projection>}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.getProjectionList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Crud.Projection>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Projection, 4)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Crud.Projection>} value */\n\n\nproto.Mysqlx.Crud.Find.prototype.setProjectionList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 4, value);\n};\n/**\n * @param {!proto.Mysqlx.Crud.Projection=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Crud.Projection}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.addProjection = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Mysqlx.Crud.Projection, opt_index);\n};\n\nproto.Mysqlx.Crud.Find.prototype.clearProjectionList = function () {\n  this.setProjectionList([]);\n};\n/**\n * optional Mysqlx.Expr.Expr criteria = 5;\n * @return {?proto.Mysqlx.Expr.Expr}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.getCriteria = function () {\n  return (\n    /** @type{?proto.Mysqlx.Expr.Expr} */\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 5)\n  );\n};\n/** @param {?proto.Mysqlx.Expr.Expr|undefined} value */\n\n\nproto.Mysqlx.Crud.Find.prototype.setCriteria = function (value) {\n  jspb.Message.setWrapperField(this, 5, value);\n};\n\nproto.Mysqlx.Crud.Find.prototype.clearCriteria = function () {\n  this.setCriteria(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.hasCriteria = function () {\n  return jspb.Message.getField(this, 5) != null;\n};\n/**\n * repeated Mysqlx.Datatypes.Scalar args = 11;\n * @return {!Array.<!proto.Mysqlx.Datatypes.Scalar>}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.getArgsList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Datatypes.Scalar>} */\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_datatypes_pb.Scalar, 11)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Datatypes.Scalar>} value */\n\n\nproto.Mysqlx.Crud.Find.prototype.setArgsList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 11, value);\n};\n/**\n * @param {!proto.Mysqlx.Datatypes.Scalar=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Datatypes.Scalar}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.addArgs = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.Mysqlx.Datatypes.Scalar, opt_index);\n};\n\nproto.Mysqlx.Crud.Find.prototype.clearArgsList = function () {\n  this.setArgsList([]);\n};\n/**\n * repeated Order order = 7;\n * @return {!Array.<!proto.Mysqlx.Crud.Order>}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.getOrderList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Crud.Order>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Order, 7)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Crud.Order>} value */\n\n\nproto.Mysqlx.Crud.Find.prototype.setOrderList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 7, value);\n};\n/**\n * @param {!proto.Mysqlx.Crud.Order=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Crud.Order}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.addOrder = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.Mysqlx.Crud.Order, opt_index);\n};\n\nproto.Mysqlx.Crud.Find.prototype.clearOrderList = function () {\n  this.setOrderList([]);\n};\n/**\n * repeated Mysqlx.Expr.Expr grouping = 8;\n * @return {!Array.<!proto.Mysqlx.Expr.Expr>}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.getGroupingList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Expr.Expr>} */\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_expr_pb.Expr, 8)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Expr.Expr>} value */\n\n\nproto.Mysqlx.Crud.Find.prototype.setGroupingList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 8, value);\n};\n/**\n * @param {!proto.Mysqlx.Expr.Expr=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Expr.Expr}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.addGrouping = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.Mysqlx.Expr.Expr, opt_index);\n};\n\nproto.Mysqlx.Crud.Find.prototype.clearGroupingList = function () {\n  this.setGroupingList([]);\n};\n/**\n * optional Mysqlx.Expr.Expr grouping_criteria = 9;\n * @return {?proto.Mysqlx.Expr.Expr}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.getGroupingCriteria = function () {\n  return (\n    /** @type{?proto.Mysqlx.Expr.Expr} */\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 9)\n  );\n};\n/** @param {?proto.Mysqlx.Expr.Expr|undefined} value */\n\n\nproto.Mysqlx.Crud.Find.prototype.setGroupingCriteria = function (value) {\n  jspb.Message.setWrapperField(this, 9, value);\n};\n\nproto.Mysqlx.Crud.Find.prototype.clearGroupingCriteria = function () {\n  this.setGroupingCriteria(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.hasGroupingCriteria = function () {\n  return jspb.Message.getField(this, 9) != null;\n};\n/**\n * optional RowLock locking = 12;\n * @return {!proto.Mysqlx.Crud.Find.RowLock}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.getLocking = function () {\n  return (\n    /** @type {!proto.Mysqlx.Crud.Find.RowLock} */\n    jspb.Message.getFieldWithDefault(this, 12, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.Find.RowLock} value */\n\n\nproto.Mysqlx.Crud.Find.prototype.setLocking = function (value) {\n  jspb.Message.setField(this, 12, value);\n};\n\nproto.Mysqlx.Crud.Find.prototype.clearLocking = function () {\n  jspb.Message.setField(this, 12, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.hasLocking = function () {\n  return jspb.Message.getField(this, 12) != null;\n};\n/**\n * optional RowLockOptions locking_options = 13;\n * @return {!proto.Mysqlx.Crud.Find.RowLockOptions}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.getLockingOptions = function () {\n  return (\n    /** @type {!proto.Mysqlx.Crud.Find.RowLockOptions} */\n    jspb.Message.getFieldWithDefault(this, 13, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.Find.RowLockOptions} value */\n\n\nproto.Mysqlx.Crud.Find.prototype.setLockingOptions = function (value) {\n  jspb.Message.setField(this, 13, value);\n};\n\nproto.Mysqlx.Crud.Find.prototype.clearLockingOptions = function () {\n  jspb.Message.setField(this, 13, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.hasLockingOptions = function () {\n  return jspb.Message.getField(this, 13) != null;\n};\n/**\n * optional Limit limit = 6;\n * @return {?proto.Mysqlx.Crud.Limit}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.getLimit = function () {\n  return (\n    /** @type{?proto.Mysqlx.Crud.Limit} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Limit, 6)\n  );\n};\n/** @param {?proto.Mysqlx.Crud.Limit|undefined} value */\n\n\nproto.Mysqlx.Crud.Find.prototype.setLimit = function (value) {\n  jspb.Message.setWrapperField(this, 6, value);\n};\n\nproto.Mysqlx.Crud.Find.prototype.clearLimit = function () {\n  this.setLimit(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.hasLimit = function () {\n  return jspb.Message.getField(this, 6) != null;\n};\n/**\n * optional LimitExpr limit_expr = 14;\n * @return {?proto.Mysqlx.Crud.LimitExpr}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.getLimitExpr = function () {\n  return (\n    /** @type{?proto.Mysqlx.Crud.LimitExpr} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.LimitExpr, 14)\n  );\n};\n/** @param {?proto.Mysqlx.Crud.LimitExpr|undefined} value */\n\n\nproto.Mysqlx.Crud.Find.prototype.setLimitExpr = function (value) {\n  jspb.Message.setWrapperField(this, 14, value);\n};\n\nproto.Mysqlx.Crud.Find.prototype.clearLimitExpr = function () {\n  this.setLimitExpr(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Find.prototype.hasLimitExpr = function () {\n  return jspb.Message.getField(this, 14) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Crud.Insert = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Insert.repeatedFields_, null);\n};\n\ngoog.inherits(proto.Mysqlx.Crud.Insert, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Insert.displayName = 'proto.Mysqlx.Crud.Insert';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.Mysqlx.Crud.Insert.repeatedFields_ = [3, 4, 5];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Crud.Insert.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Crud.Insert.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Crud.Insert} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Crud.Insert.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),\n      dataModel: jspb.Message.getField(msg, 2),\n      projectionList: jspb.Message.toObjectList(msg.getProjectionList(), proto.Mysqlx.Crud.Column.toObject, includeInstance),\n      rowList: jspb.Message.toObjectList(msg.getRowList(), proto.Mysqlx.Crud.Insert.TypedRow.toObject, includeInstance),\n      argsList: jspb.Message.toObjectList(msg.getArgsList(), mysqlx_datatypes_pb.Scalar.toObject, includeInstance),\n      upsert: jspb.Message.getFieldWithDefault(msg, 6, false)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Insert}\n */\n\n\nproto.Mysqlx.Crud.Insert.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Insert();\n  return proto.Mysqlx.Crud.Insert.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Insert} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Insert}\n */\n\n\nproto.Mysqlx.Crud.Insert.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new proto.Mysqlx.Crud.Collection();\n        reader.readMessage(value, proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);\n        msg.setCollection(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!proto.Mysqlx.Crud.DataModel} */\n        reader.readEnum();\n        msg.setDataModel(value);\n        break;\n\n      case 3:\n        var value = new proto.Mysqlx.Crud.Column();\n        reader.readMessage(value, proto.Mysqlx.Crud.Column.deserializeBinaryFromReader);\n        msg.addProjection(value);\n        break;\n\n      case 4:\n        var value = new proto.Mysqlx.Crud.Insert.TypedRow();\n        reader.readMessage(value, proto.Mysqlx.Crud.Insert.TypedRow.deserializeBinaryFromReader);\n        msg.addRow(value);\n        break;\n\n      case 5:\n        var value = new mysqlx_datatypes_pb.Scalar();\n        reader.readMessage(value, mysqlx_datatypes_pb.Scalar.deserializeBinaryFromReader);\n        msg.addArgs(value);\n        break;\n\n      case 6:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setUpsert(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Crud.Insert.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Insert.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Insert} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Crud.Insert.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getCollection();\n\n  if (f != null) {\n    writer.writeMessage(1, f, proto.Mysqlx.Crud.Collection.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {!proto.Mysqlx.Crud.DataModel} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeEnum(2, f);\n  }\n\n  f = message.getProjectionList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(3, f, proto.Mysqlx.Crud.Column.serializeBinaryToWriter);\n  }\n\n  f = message.getRowList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(4, f, proto.Mysqlx.Crud.Insert.TypedRow.serializeBinaryToWriter);\n  }\n\n  f = message.getArgsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(5, f, mysqlx_datatypes_pb.Scalar.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {boolean} */\n  jspb.Message.getField(message, 6);\n\n  if (f != null) {\n    writer.writeBool(6, f);\n  }\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Crud.Insert.TypedRow = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Insert.TypedRow.repeatedFields_, null);\n};\n\ngoog.inherits(proto.Mysqlx.Crud.Insert.TypedRow, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Insert.TypedRow.displayName = 'proto.Mysqlx.Crud.Insert.TypedRow';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.Mysqlx.Crud.Insert.TypedRow.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Crud.Insert.TypedRow.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Crud.Insert.TypedRow.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Crud.Insert.TypedRow} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Crud.Insert.TypedRow.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      fieldList: jspb.Message.toObjectList(msg.getFieldList(), mysqlx_expr_pb.Expr.toObject, includeInstance)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Insert.TypedRow}\n */\n\n\nproto.Mysqlx.Crud.Insert.TypedRow.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Insert.TypedRow();\n  return proto.Mysqlx.Crud.Insert.TypedRow.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Insert.TypedRow} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Insert.TypedRow}\n */\n\n\nproto.Mysqlx.Crud.Insert.TypedRow.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new mysqlx_expr_pb.Expr();\n        reader.readMessage(value, mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n        msg.addField(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Crud.Insert.TypedRow.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Insert.TypedRow.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Insert.TypedRow} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Crud.Insert.TypedRow.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getFieldList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(1, f, mysqlx_expr_pb.Expr.serializeBinaryToWriter);\n  }\n};\n/**\n * repeated Mysqlx.Expr.Expr field = 1;\n * @return {!Array.<!proto.Mysqlx.Expr.Expr>}\n */\n\n\nproto.Mysqlx.Crud.Insert.TypedRow.prototype.getFieldList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Expr.Expr>} */\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_expr_pb.Expr, 1)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Expr.Expr>} value */\n\n\nproto.Mysqlx.Crud.Insert.TypedRow.prototype.setFieldList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n/**\n * @param {!proto.Mysqlx.Expr.Expr=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Expr.Expr}\n */\n\n\nproto.Mysqlx.Crud.Insert.TypedRow.prototype.addField = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Mysqlx.Expr.Expr, opt_index);\n};\n\nproto.Mysqlx.Crud.Insert.TypedRow.prototype.clearFieldList = function () {\n  this.setFieldList([]);\n};\n/**\n * required Collection collection = 1;\n * @return {!proto.Mysqlx.Crud.Collection}\n */\n\n\nproto.Mysqlx.Crud.Insert.prototype.getCollection = function () {\n  return (\n    /** @type{!proto.Mysqlx.Crud.Collection} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 1, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.Collection} value */\n\n\nproto.Mysqlx.Crud.Insert.prototype.setCollection = function (value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\nproto.Mysqlx.Crud.Insert.prototype.clearCollection = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Insert.prototype.hasCollection = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional DataModel data_model = 2;\n * @return {!proto.Mysqlx.Crud.DataModel}\n */\n\n\nproto.Mysqlx.Crud.Insert.prototype.getDataModel = function () {\n  return (\n    /** @type {!proto.Mysqlx.Crud.DataModel} */\n    jspb.Message.getFieldWithDefault(this, 2, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.DataModel} value */\n\n\nproto.Mysqlx.Crud.Insert.prototype.setDataModel = function (value) {\n  jspb.Message.setField(this, 2, value);\n};\n\nproto.Mysqlx.Crud.Insert.prototype.clearDataModel = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Insert.prototype.hasDataModel = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * repeated Column projection = 3;\n * @return {!Array.<!proto.Mysqlx.Crud.Column>}\n */\n\n\nproto.Mysqlx.Crud.Insert.prototype.getProjectionList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Crud.Column>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Column, 3)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Crud.Column>} value */\n\n\nproto.Mysqlx.Crud.Insert.prototype.setProjectionList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n/**\n * @param {!proto.Mysqlx.Crud.Column=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Crud.Column}\n */\n\n\nproto.Mysqlx.Crud.Insert.prototype.addProjection = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Mysqlx.Crud.Column, opt_index);\n};\n\nproto.Mysqlx.Crud.Insert.prototype.clearProjectionList = function () {\n  this.setProjectionList([]);\n};\n/**\n * repeated TypedRow row = 4;\n * @return {!Array.<!proto.Mysqlx.Crud.Insert.TypedRow>}\n */\n\n\nproto.Mysqlx.Crud.Insert.prototype.getRowList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Crud.Insert.TypedRow>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Insert.TypedRow, 4)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Crud.Insert.TypedRow>} value */\n\n\nproto.Mysqlx.Crud.Insert.prototype.setRowList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 4, value);\n};\n/**\n * @param {!proto.Mysqlx.Crud.Insert.TypedRow=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Crud.Insert.TypedRow}\n */\n\n\nproto.Mysqlx.Crud.Insert.prototype.addRow = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Mysqlx.Crud.Insert.TypedRow, opt_index);\n};\n\nproto.Mysqlx.Crud.Insert.prototype.clearRowList = function () {\n  this.setRowList([]);\n};\n/**\n * repeated Mysqlx.Datatypes.Scalar args = 5;\n * @return {!Array.<!proto.Mysqlx.Datatypes.Scalar>}\n */\n\n\nproto.Mysqlx.Crud.Insert.prototype.getArgsList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Datatypes.Scalar>} */\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_datatypes_pb.Scalar, 5)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Datatypes.Scalar>} value */\n\n\nproto.Mysqlx.Crud.Insert.prototype.setArgsList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 5, value);\n};\n/**\n * @param {!proto.Mysqlx.Datatypes.Scalar=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Datatypes.Scalar}\n */\n\n\nproto.Mysqlx.Crud.Insert.prototype.addArgs = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Mysqlx.Datatypes.Scalar, opt_index);\n};\n\nproto.Mysqlx.Crud.Insert.prototype.clearArgsList = function () {\n  this.setArgsList([]);\n};\n/**\n * optional bool upsert = 6;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val === true/false} in those cases.\n * @return {boolean}\n */\n\n\nproto.Mysqlx.Crud.Insert.prototype.getUpsert = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getFieldWithDefault(this, 6, false)\n  );\n};\n/** @param {boolean} value */\n\n\nproto.Mysqlx.Crud.Insert.prototype.setUpsert = function (value) {\n  jspb.Message.setField(this, 6, value);\n};\n\nproto.Mysqlx.Crud.Insert.prototype.clearUpsert = function () {\n  jspb.Message.setField(this, 6, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Insert.prototype.hasUpsert = function () {\n  return jspb.Message.getField(this, 6) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Crud.Update = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Update.repeatedFields_, null);\n};\n\ngoog.inherits(proto.Mysqlx.Crud.Update, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Update.displayName = 'proto.Mysqlx.Crud.Update';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.Mysqlx.Crud.Update.repeatedFields_ = [8, 6, 7];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Crud.Update.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Crud.Update.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Crud.Update} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Crud.Update.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),\n      dataModel: jspb.Message.getField(msg, 3),\n      criteria: (f = msg.getCriteria()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),\n      argsList: jspb.Message.toObjectList(msg.getArgsList(), mysqlx_datatypes_pb.Scalar.toObject, includeInstance),\n      orderList: jspb.Message.toObjectList(msg.getOrderList(), proto.Mysqlx.Crud.Order.toObject, includeInstance),\n      operationList: jspb.Message.toObjectList(msg.getOperationList(), proto.Mysqlx.Crud.UpdateOperation.toObject, includeInstance),\n      limit: (f = msg.getLimit()) && proto.Mysqlx.Crud.Limit.toObject(includeInstance, f),\n      limitExpr: (f = msg.getLimitExpr()) && proto.Mysqlx.Crud.LimitExpr.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Update}\n */\n\n\nproto.Mysqlx.Crud.Update.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Update();\n  return proto.Mysqlx.Crud.Update.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Update} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Update}\n */\n\n\nproto.Mysqlx.Crud.Update.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 2:\n        var value = new proto.Mysqlx.Crud.Collection();\n        reader.readMessage(value, proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);\n        msg.setCollection(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {!proto.Mysqlx.Crud.DataModel} */\n        reader.readEnum();\n        msg.setDataModel(value);\n        break;\n\n      case 4:\n        var value = new mysqlx_expr_pb.Expr();\n        reader.readMessage(value, mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n        msg.setCriteria(value);\n        break;\n\n      case 8:\n        var value = new mysqlx_datatypes_pb.Scalar();\n        reader.readMessage(value, mysqlx_datatypes_pb.Scalar.deserializeBinaryFromReader);\n        msg.addArgs(value);\n        break;\n\n      case 6:\n        var value = new proto.Mysqlx.Crud.Order();\n        reader.readMessage(value, proto.Mysqlx.Crud.Order.deserializeBinaryFromReader);\n        msg.addOrder(value);\n        break;\n\n      case 7:\n        var value = new proto.Mysqlx.Crud.UpdateOperation();\n        reader.readMessage(value, proto.Mysqlx.Crud.UpdateOperation.deserializeBinaryFromReader);\n        msg.addOperation(value);\n        break;\n\n      case 5:\n        var value = new proto.Mysqlx.Crud.Limit();\n        reader.readMessage(value, proto.Mysqlx.Crud.Limit.deserializeBinaryFromReader);\n        msg.setLimit(value);\n        break;\n\n      case 9:\n        var value = new proto.Mysqlx.Crud.LimitExpr();\n        reader.readMessage(value, proto.Mysqlx.Crud.LimitExpr.deserializeBinaryFromReader);\n        msg.setLimitExpr(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Update.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Update} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Crud.Update.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getCollection();\n\n  if (f != null) {\n    writer.writeMessage(2, f, proto.Mysqlx.Crud.Collection.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {!proto.Mysqlx.Crud.DataModel} */\n  jspb.Message.getField(message, 3);\n\n  if (f != null) {\n    writer.writeEnum(3, f);\n  }\n\n  f = message.getCriteria();\n\n  if (f != null) {\n    writer.writeMessage(4, f, mysqlx_expr_pb.Expr.serializeBinaryToWriter);\n  }\n\n  f = message.getArgsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(8, f, mysqlx_datatypes_pb.Scalar.serializeBinaryToWriter);\n  }\n\n  f = message.getOrderList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(6, f, proto.Mysqlx.Crud.Order.serializeBinaryToWriter);\n  }\n\n  f = message.getOperationList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(7, f, proto.Mysqlx.Crud.UpdateOperation.serializeBinaryToWriter);\n  }\n\n  f = message.getLimit();\n\n  if (f != null) {\n    writer.writeMessage(5, f, proto.Mysqlx.Crud.Limit.serializeBinaryToWriter);\n  }\n\n  f = message.getLimitExpr();\n\n  if (f != null) {\n    writer.writeMessage(9, f, proto.Mysqlx.Crud.LimitExpr.serializeBinaryToWriter);\n  }\n};\n/**\n * required Collection collection = 2;\n * @return {!proto.Mysqlx.Crud.Collection}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.getCollection = function () {\n  return (\n    /** @type{!proto.Mysqlx.Crud.Collection} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 2, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.Collection} value */\n\n\nproto.Mysqlx.Crud.Update.prototype.setCollection = function (value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\nproto.Mysqlx.Crud.Update.prototype.clearCollection = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.hasCollection = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional DataModel data_model = 3;\n * @return {!proto.Mysqlx.Crud.DataModel}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.getDataModel = function () {\n  return (\n    /** @type {!proto.Mysqlx.Crud.DataModel} */\n    jspb.Message.getFieldWithDefault(this, 3, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.DataModel} value */\n\n\nproto.Mysqlx.Crud.Update.prototype.setDataModel = function (value) {\n  jspb.Message.setField(this, 3, value);\n};\n\nproto.Mysqlx.Crud.Update.prototype.clearDataModel = function () {\n  jspb.Message.setField(this, 3, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.hasDataModel = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * optional Mysqlx.Expr.Expr criteria = 4;\n * @return {?proto.Mysqlx.Expr.Expr}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.getCriteria = function () {\n  return (\n    /** @type{?proto.Mysqlx.Expr.Expr} */\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 4)\n  );\n};\n/** @param {?proto.Mysqlx.Expr.Expr|undefined} value */\n\n\nproto.Mysqlx.Crud.Update.prototype.setCriteria = function (value) {\n  jspb.Message.setWrapperField(this, 4, value);\n};\n\nproto.Mysqlx.Crud.Update.prototype.clearCriteria = function () {\n  this.setCriteria(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.hasCriteria = function () {\n  return jspb.Message.getField(this, 4) != null;\n};\n/**\n * repeated Mysqlx.Datatypes.Scalar args = 8;\n * @return {!Array.<!proto.Mysqlx.Datatypes.Scalar>}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.getArgsList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Datatypes.Scalar>} */\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_datatypes_pb.Scalar, 8)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Datatypes.Scalar>} value */\n\n\nproto.Mysqlx.Crud.Update.prototype.setArgsList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 8, value);\n};\n/**\n * @param {!proto.Mysqlx.Datatypes.Scalar=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Datatypes.Scalar}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.addArgs = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.Mysqlx.Datatypes.Scalar, opt_index);\n};\n\nproto.Mysqlx.Crud.Update.prototype.clearArgsList = function () {\n  this.setArgsList([]);\n};\n/**\n * repeated Order order = 6;\n * @return {!Array.<!proto.Mysqlx.Crud.Order>}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.getOrderList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Crud.Order>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Order, 6)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Crud.Order>} value */\n\n\nproto.Mysqlx.Crud.Update.prototype.setOrderList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 6, value);\n};\n/**\n * @param {!proto.Mysqlx.Crud.Order=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Crud.Order}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.addOrder = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Mysqlx.Crud.Order, opt_index);\n};\n\nproto.Mysqlx.Crud.Update.prototype.clearOrderList = function () {\n  this.setOrderList([]);\n};\n/**\n * repeated UpdateOperation operation = 7;\n * @return {!Array.<!proto.Mysqlx.Crud.UpdateOperation>}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.getOperationList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Crud.UpdateOperation>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.UpdateOperation, 7)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Crud.UpdateOperation>} value */\n\n\nproto.Mysqlx.Crud.Update.prototype.setOperationList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 7, value);\n};\n/**\n * @param {!proto.Mysqlx.Crud.UpdateOperation=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Crud.UpdateOperation}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.addOperation = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.Mysqlx.Crud.UpdateOperation, opt_index);\n};\n\nproto.Mysqlx.Crud.Update.prototype.clearOperationList = function () {\n  this.setOperationList([]);\n};\n/**\n * optional Limit limit = 5;\n * @return {?proto.Mysqlx.Crud.Limit}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.getLimit = function () {\n  return (\n    /** @type{?proto.Mysqlx.Crud.Limit} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Limit, 5)\n  );\n};\n/** @param {?proto.Mysqlx.Crud.Limit|undefined} value */\n\n\nproto.Mysqlx.Crud.Update.prototype.setLimit = function (value) {\n  jspb.Message.setWrapperField(this, 5, value);\n};\n\nproto.Mysqlx.Crud.Update.prototype.clearLimit = function () {\n  this.setLimit(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.hasLimit = function () {\n  return jspb.Message.getField(this, 5) != null;\n};\n/**\n * optional LimitExpr limit_expr = 9;\n * @return {?proto.Mysqlx.Crud.LimitExpr}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.getLimitExpr = function () {\n  return (\n    /** @type{?proto.Mysqlx.Crud.LimitExpr} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.LimitExpr, 9)\n  );\n};\n/** @param {?proto.Mysqlx.Crud.LimitExpr|undefined} value */\n\n\nproto.Mysqlx.Crud.Update.prototype.setLimitExpr = function (value) {\n  jspb.Message.setWrapperField(this, 9, value);\n};\n\nproto.Mysqlx.Crud.Update.prototype.clearLimitExpr = function () {\n  this.setLimitExpr(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Update.prototype.hasLimitExpr = function () {\n  return jspb.Message.getField(this, 9) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Crud.Delete = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Delete.repeatedFields_, null);\n};\n\ngoog.inherits(proto.Mysqlx.Crud.Delete, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Delete.displayName = 'proto.Mysqlx.Crud.Delete';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.Mysqlx.Crud.Delete.repeatedFields_ = [6, 5];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Crud.Delete.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Crud.Delete.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Crud.Delete} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Crud.Delete.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),\n      dataModel: jspb.Message.getField(msg, 2),\n      criteria: (f = msg.getCriteria()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),\n      argsList: jspb.Message.toObjectList(msg.getArgsList(), mysqlx_datatypes_pb.Scalar.toObject, includeInstance),\n      orderList: jspb.Message.toObjectList(msg.getOrderList(), proto.Mysqlx.Crud.Order.toObject, includeInstance),\n      limit: (f = msg.getLimit()) && proto.Mysqlx.Crud.Limit.toObject(includeInstance, f),\n      limitExpr: (f = msg.getLimitExpr()) && proto.Mysqlx.Crud.LimitExpr.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Delete}\n */\n\n\nproto.Mysqlx.Crud.Delete.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Delete();\n  return proto.Mysqlx.Crud.Delete.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Delete} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Delete}\n */\n\n\nproto.Mysqlx.Crud.Delete.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new proto.Mysqlx.Crud.Collection();\n        reader.readMessage(value, proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);\n        msg.setCollection(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!proto.Mysqlx.Crud.DataModel} */\n        reader.readEnum();\n        msg.setDataModel(value);\n        break;\n\n      case 3:\n        var value = new mysqlx_expr_pb.Expr();\n        reader.readMessage(value, mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n        msg.setCriteria(value);\n        break;\n\n      case 6:\n        var value = new mysqlx_datatypes_pb.Scalar();\n        reader.readMessage(value, mysqlx_datatypes_pb.Scalar.deserializeBinaryFromReader);\n        msg.addArgs(value);\n        break;\n\n      case 5:\n        var value = new proto.Mysqlx.Crud.Order();\n        reader.readMessage(value, proto.Mysqlx.Crud.Order.deserializeBinaryFromReader);\n        msg.addOrder(value);\n        break;\n\n      case 4:\n        var value = new proto.Mysqlx.Crud.Limit();\n        reader.readMessage(value, proto.Mysqlx.Crud.Limit.deserializeBinaryFromReader);\n        msg.setLimit(value);\n        break;\n\n      case 7:\n        var value = new proto.Mysqlx.Crud.LimitExpr();\n        reader.readMessage(value, proto.Mysqlx.Crud.LimitExpr.deserializeBinaryFromReader);\n        msg.setLimitExpr(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Crud.Delete.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Delete.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Delete} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Crud.Delete.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getCollection();\n\n  if (f != null) {\n    writer.writeMessage(1, f, proto.Mysqlx.Crud.Collection.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {!proto.Mysqlx.Crud.DataModel} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeEnum(2, f);\n  }\n\n  f = message.getCriteria();\n\n  if (f != null) {\n    writer.writeMessage(3, f, mysqlx_expr_pb.Expr.serializeBinaryToWriter);\n  }\n\n  f = message.getArgsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(6, f, mysqlx_datatypes_pb.Scalar.serializeBinaryToWriter);\n  }\n\n  f = message.getOrderList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(5, f, proto.Mysqlx.Crud.Order.serializeBinaryToWriter);\n  }\n\n  f = message.getLimit();\n\n  if (f != null) {\n    writer.writeMessage(4, f, proto.Mysqlx.Crud.Limit.serializeBinaryToWriter);\n  }\n\n  f = message.getLimitExpr();\n\n  if (f != null) {\n    writer.writeMessage(7, f, proto.Mysqlx.Crud.LimitExpr.serializeBinaryToWriter);\n  }\n};\n/**\n * required Collection collection = 1;\n * @return {!proto.Mysqlx.Crud.Collection}\n */\n\n\nproto.Mysqlx.Crud.Delete.prototype.getCollection = function () {\n  return (\n    /** @type{!proto.Mysqlx.Crud.Collection} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 1, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.Collection} value */\n\n\nproto.Mysqlx.Crud.Delete.prototype.setCollection = function (value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\nproto.Mysqlx.Crud.Delete.prototype.clearCollection = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Delete.prototype.hasCollection = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional DataModel data_model = 2;\n * @return {!proto.Mysqlx.Crud.DataModel}\n */\n\n\nproto.Mysqlx.Crud.Delete.prototype.getDataModel = function () {\n  return (\n    /** @type {!proto.Mysqlx.Crud.DataModel} */\n    jspb.Message.getFieldWithDefault(this, 2, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.DataModel} value */\n\n\nproto.Mysqlx.Crud.Delete.prototype.setDataModel = function (value) {\n  jspb.Message.setField(this, 2, value);\n};\n\nproto.Mysqlx.Crud.Delete.prototype.clearDataModel = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Delete.prototype.hasDataModel = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional Mysqlx.Expr.Expr criteria = 3;\n * @return {?proto.Mysqlx.Expr.Expr}\n */\n\n\nproto.Mysqlx.Crud.Delete.prototype.getCriteria = function () {\n  return (\n    /** @type{?proto.Mysqlx.Expr.Expr} */\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 3)\n  );\n};\n/** @param {?proto.Mysqlx.Expr.Expr|undefined} value */\n\n\nproto.Mysqlx.Crud.Delete.prototype.setCriteria = function (value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\nproto.Mysqlx.Crud.Delete.prototype.clearCriteria = function () {\n  this.setCriteria(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Delete.prototype.hasCriteria = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * repeated Mysqlx.Datatypes.Scalar args = 6;\n * @return {!Array.<!proto.Mysqlx.Datatypes.Scalar>}\n */\n\n\nproto.Mysqlx.Crud.Delete.prototype.getArgsList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Datatypes.Scalar>} */\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_datatypes_pb.Scalar, 6)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Datatypes.Scalar>} value */\n\n\nproto.Mysqlx.Crud.Delete.prototype.setArgsList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 6, value);\n};\n/**\n * @param {!proto.Mysqlx.Datatypes.Scalar=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Datatypes.Scalar}\n */\n\n\nproto.Mysqlx.Crud.Delete.prototype.addArgs = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Mysqlx.Datatypes.Scalar, opt_index);\n};\n\nproto.Mysqlx.Crud.Delete.prototype.clearArgsList = function () {\n  this.setArgsList([]);\n};\n/**\n * repeated Order order = 5;\n * @return {!Array.<!proto.Mysqlx.Crud.Order>}\n */\n\n\nproto.Mysqlx.Crud.Delete.prototype.getOrderList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Crud.Order>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Order, 5)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Crud.Order>} value */\n\n\nproto.Mysqlx.Crud.Delete.prototype.setOrderList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 5, value);\n};\n/**\n * @param {!proto.Mysqlx.Crud.Order=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Crud.Order}\n */\n\n\nproto.Mysqlx.Crud.Delete.prototype.addOrder = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Mysqlx.Crud.Order, opt_index);\n};\n\nproto.Mysqlx.Crud.Delete.prototype.clearOrderList = function () {\n  this.setOrderList([]);\n};\n/**\n * optional Limit limit = 4;\n * @return {?proto.Mysqlx.Crud.Limit}\n */\n\n\nproto.Mysqlx.Crud.Delete.prototype.getLimit = function () {\n  return (\n    /** @type{?proto.Mysqlx.Crud.Limit} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Limit, 4)\n  );\n};\n/** @param {?proto.Mysqlx.Crud.Limit|undefined} value */\n\n\nproto.Mysqlx.Crud.Delete.prototype.setLimit = function (value) {\n  jspb.Message.setWrapperField(this, 4, value);\n};\n\nproto.Mysqlx.Crud.Delete.prototype.clearLimit = function () {\n  this.setLimit(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Delete.prototype.hasLimit = function () {\n  return jspb.Message.getField(this, 4) != null;\n};\n/**\n * optional LimitExpr limit_expr = 7;\n * @return {?proto.Mysqlx.Crud.LimitExpr}\n */\n\n\nproto.Mysqlx.Crud.Delete.prototype.getLimitExpr = function () {\n  return (\n    /** @type{?proto.Mysqlx.Crud.LimitExpr} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.LimitExpr, 7)\n  );\n};\n/** @param {?proto.Mysqlx.Crud.LimitExpr|undefined} value */\n\n\nproto.Mysqlx.Crud.Delete.prototype.setLimitExpr = function (value) {\n  jspb.Message.setWrapperField(this, 7, value);\n};\n\nproto.Mysqlx.Crud.Delete.prototype.clearLimitExpr = function () {\n  this.setLimitExpr(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.Delete.prototype.hasLimitExpr = function () {\n  return jspb.Message.getField(this, 7) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Crud.CreateView = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.CreateView.repeatedFields_, null);\n};\n\ngoog.inherits(proto.Mysqlx.Crud.CreateView, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.CreateView.displayName = 'proto.Mysqlx.Crud.CreateView';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.Mysqlx.Crud.CreateView.repeatedFields_ = [6];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Crud.CreateView.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Crud.CreateView.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Crud.CreateView} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Crud.CreateView.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),\n      definer: jspb.Message.getField(msg, 2),\n      algorithm: jspb.Message.getFieldWithDefault(msg, 3, 1),\n      security: jspb.Message.getFieldWithDefault(msg, 4, 2),\n      check: jspb.Message.getField(msg, 5),\n      columnList: jspb.Message.getRepeatedField(msg, 6),\n      stmt: (f = msg.getStmt()) && proto.Mysqlx.Crud.Find.toObject(includeInstance, f),\n      replaceExisting: jspb.Message.getFieldWithDefault(msg, 8, false)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.CreateView}\n */\n\n\nproto.Mysqlx.Crud.CreateView.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.CreateView();\n  return proto.Mysqlx.Crud.CreateView.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.CreateView} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.CreateView}\n */\n\n\nproto.Mysqlx.Crud.CreateView.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new proto.Mysqlx.Crud.Collection();\n        reader.readMessage(value, proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);\n        msg.setCollection(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setDefiner(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */\n        reader.readEnum();\n        msg.setAlgorithm(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */\n        reader.readEnum();\n        msg.setSecurity(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */\n        reader.readEnum();\n        msg.setCheck(value);\n        break;\n\n      case 6:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.addColumn(value);\n        break;\n\n      case 7:\n        var value = new proto.Mysqlx.Crud.Find();\n        reader.readMessage(value, proto.Mysqlx.Crud.Find.deserializeBinaryFromReader);\n        msg.setStmt(value);\n        break;\n\n      case 8:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setReplaceExisting(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.CreateView.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.CreateView} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Crud.CreateView.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getCollection();\n\n  if (f != null) {\n    writer.writeMessage(1, f, proto.Mysqlx.Crud.Collection.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {string} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeString(2, f);\n  }\n\n  f =\n  /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */\n  jspb.Message.getField(message, 3);\n\n  if (f != null) {\n    writer.writeEnum(3, f);\n  }\n\n  f =\n  /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */\n  jspb.Message.getField(message, 4);\n\n  if (f != null) {\n    writer.writeEnum(4, f);\n  }\n\n  f =\n  /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */\n  jspb.Message.getField(message, 5);\n\n  if (f != null) {\n    writer.writeEnum(5, f);\n  }\n\n  f = message.getColumnList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedString(6, f);\n  }\n\n  f = message.getStmt();\n\n  if (f != null) {\n    writer.writeMessage(7, f, proto.Mysqlx.Crud.Find.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {boolean} */\n  jspb.Message.getField(message, 8);\n\n  if (f != null) {\n    writer.writeBool(8, f);\n  }\n};\n/**\n * required Collection collection = 1;\n * @return {!proto.Mysqlx.Crud.Collection}\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.getCollection = function () {\n  return (\n    /** @type{!proto.Mysqlx.Crud.Collection} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 1, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.Collection} value */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.setCollection = function (value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\nproto.Mysqlx.Crud.CreateView.prototype.clearCollection = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.hasCollection = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional string definer = 2;\n * @return {string}\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.getDefiner = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/** @param {string} value */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.setDefiner = function (value) {\n  jspb.Message.setField(this, 2, value);\n};\n\nproto.Mysqlx.Crud.CreateView.prototype.clearDefiner = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.hasDefiner = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional ViewAlgorithm algorithm = 3;\n * @return {!proto.Mysqlx.Crud.ViewAlgorithm}\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.getAlgorithm = function () {\n  return (\n    /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */\n    jspb.Message.getFieldWithDefault(this, 3, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.ViewAlgorithm} value */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.setAlgorithm = function (value) {\n  jspb.Message.setField(this, 3, value);\n};\n\nproto.Mysqlx.Crud.CreateView.prototype.clearAlgorithm = function () {\n  jspb.Message.setField(this, 3, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.hasAlgorithm = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * optional ViewSqlSecurity security = 4;\n * @return {!proto.Mysqlx.Crud.ViewSqlSecurity}\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.getSecurity = function () {\n  return (\n    /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */\n    jspb.Message.getFieldWithDefault(this, 4, 2)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.ViewSqlSecurity} value */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.setSecurity = function (value) {\n  jspb.Message.setField(this, 4, value);\n};\n\nproto.Mysqlx.Crud.CreateView.prototype.clearSecurity = function () {\n  jspb.Message.setField(this, 4, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.hasSecurity = function () {\n  return jspb.Message.getField(this, 4) != null;\n};\n/**\n * optional ViewCheckOption check = 5;\n * @return {!proto.Mysqlx.Crud.ViewCheckOption}\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.getCheck = function () {\n  return (\n    /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */\n    jspb.Message.getFieldWithDefault(this, 5, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.ViewCheckOption} value */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.setCheck = function (value) {\n  jspb.Message.setField(this, 5, value);\n};\n\nproto.Mysqlx.Crud.CreateView.prototype.clearCheck = function () {\n  jspb.Message.setField(this, 5, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.hasCheck = function () {\n  return jspb.Message.getField(this, 5) != null;\n};\n/**\n * repeated string column = 6;\n * @return {!Array.<string>}\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.getColumnList = function () {\n  return (\n    /** @type {!Array.<string>} */\n    jspb.Message.getRepeatedField(this, 6)\n  );\n};\n/** @param {!Array.<string>} value */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.setColumnList = function (value) {\n  jspb.Message.setField(this, 6, value || []);\n};\n/**\n * @param {!string} value\n * @param {number=} opt_index\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.addColumn = function (value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 6, value, opt_index);\n};\n\nproto.Mysqlx.Crud.CreateView.prototype.clearColumnList = function () {\n  this.setColumnList([]);\n};\n/**\n * required Find stmt = 7;\n * @return {!proto.Mysqlx.Crud.Find}\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.getStmt = function () {\n  return (\n    /** @type{!proto.Mysqlx.Crud.Find} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Find, 7, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.Find} value */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.setStmt = function (value) {\n  jspb.Message.setWrapperField(this, 7, value);\n};\n\nproto.Mysqlx.Crud.CreateView.prototype.clearStmt = function () {\n  jspb.Message.setField(this, 7, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.hasStmt = function () {\n  return jspb.Message.getField(this, 7) != null;\n};\n/**\n * optional bool replace_existing = 8;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val === true/false} in those cases.\n * @return {boolean}\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.getReplaceExisting = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getFieldWithDefault(this, 8, false)\n  );\n};\n/** @param {boolean} value */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.setReplaceExisting = function (value) {\n  jspb.Message.setField(this, 8, value);\n};\n\nproto.Mysqlx.Crud.CreateView.prototype.clearReplaceExisting = function () {\n  jspb.Message.setField(this, 8, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.CreateView.prototype.hasReplaceExisting = function () {\n  return jspb.Message.getField(this, 8) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Crud.ModifyView = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.ModifyView.repeatedFields_, null);\n};\n\ngoog.inherits(proto.Mysqlx.Crud.ModifyView, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.ModifyView.displayName = 'proto.Mysqlx.Crud.ModifyView';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.Mysqlx.Crud.ModifyView.repeatedFields_ = [6];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Crud.ModifyView.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Crud.ModifyView.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Crud.ModifyView} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Crud.ModifyView.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),\n      definer: jspb.Message.getField(msg, 2),\n      algorithm: jspb.Message.getField(msg, 3),\n      security: jspb.Message.getField(msg, 4),\n      check: jspb.Message.getField(msg, 5),\n      columnList: jspb.Message.getRepeatedField(msg, 6),\n      stmt: (f = msg.getStmt()) && proto.Mysqlx.Crud.Find.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.ModifyView}\n */\n\n\nproto.Mysqlx.Crud.ModifyView.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.ModifyView();\n  return proto.Mysqlx.Crud.ModifyView.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.ModifyView} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.ModifyView}\n */\n\n\nproto.Mysqlx.Crud.ModifyView.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new proto.Mysqlx.Crud.Collection();\n        reader.readMessage(value, proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);\n        msg.setCollection(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setDefiner(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */\n        reader.readEnum();\n        msg.setAlgorithm(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */\n        reader.readEnum();\n        msg.setSecurity(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */\n        reader.readEnum();\n        msg.setCheck(value);\n        break;\n\n      case 6:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.addColumn(value);\n        break;\n\n      case 7:\n        var value = new proto.Mysqlx.Crud.Find();\n        reader.readMessage(value, proto.Mysqlx.Crud.Find.deserializeBinaryFromReader);\n        msg.setStmt(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.ModifyView.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.ModifyView} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Crud.ModifyView.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getCollection();\n\n  if (f != null) {\n    writer.writeMessage(1, f, proto.Mysqlx.Crud.Collection.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {string} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeString(2, f);\n  }\n\n  f =\n  /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */\n  jspb.Message.getField(message, 3);\n\n  if (f != null) {\n    writer.writeEnum(3, f);\n  }\n\n  f =\n  /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */\n  jspb.Message.getField(message, 4);\n\n  if (f != null) {\n    writer.writeEnum(4, f);\n  }\n\n  f =\n  /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */\n  jspb.Message.getField(message, 5);\n\n  if (f != null) {\n    writer.writeEnum(5, f);\n  }\n\n  f = message.getColumnList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedString(6, f);\n  }\n\n  f = message.getStmt();\n\n  if (f != null) {\n    writer.writeMessage(7, f, proto.Mysqlx.Crud.Find.serializeBinaryToWriter);\n  }\n};\n/**\n * required Collection collection = 1;\n * @return {!proto.Mysqlx.Crud.Collection}\n */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.getCollection = function () {\n  return (\n    /** @type{!proto.Mysqlx.Crud.Collection} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 1, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.Collection} value */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.setCollection = function (value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\nproto.Mysqlx.Crud.ModifyView.prototype.clearCollection = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.hasCollection = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional string definer = 2;\n * @return {string}\n */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.getDefiner = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/** @param {string} value */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.setDefiner = function (value) {\n  jspb.Message.setField(this, 2, value);\n};\n\nproto.Mysqlx.Crud.ModifyView.prototype.clearDefiner = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.hasDefiner = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional ViewAlgorithm algorithm = 3;\n * @return {!proto.Mysqlx.Crud.ViewAlgorithm}\n */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.getAlgorithm = function () {\n  return (\n    /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */\n    jspb.Message.getFieldWithDefault(this, 3, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.ViewAlgorithm} value */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.setAlgorithm = function (value) {\n  jspb.Message.setField(this, 3, value);\n};\n\nproto.Mysqlx.Crud.ModifyView.prototype.clearAlgorithm = function () {\n  jspb.Message.setField(this, 3, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.hasAlgorithm = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * optional ViewSqlSecurity security = 4;\n * @return {!proto.Mysqlx.Crud.ViewSqlSecurity}\n */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.getSecurity = function () {\n  return (\n    /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */\n    jspb.Message.getFieldWithDefault(this, 4, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.ViewSqlSecurity} value */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.setSecurity = function (value) {\n  jspb.Message.setField(this, 4, value);\n};\n\nproto.Mysqlx.Crud.ModifyView.prototype.clearSecurity = function () {\n  jspb.Message.setField(this, 4, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.hasSecurity = function () {\n  return jspb.Message.getField(this, 4) != null;\n};\n/**\n * optional ViewCheckOption check = 5;\n * @return {!proto.Mysqlx.Crud.ViewCheckOption}\n */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.getCheck = function () {\n  return (\n    /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */\n    jspb.Message.getFieldWithDefault(this, 5, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.ViewCheckOption} value */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.setCheck = function (value) {\n  jspb.Message.setField(this, 5, value);\n};\n\nproto.Mysqlx.Crud.ModifyView.prototype.clearCheck = function () {\n  jspb.Message.setField(this, 5, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.hasCheck = function () {\n  return jspb.Message.getField(this, 5) != null;\n};\n/**\n * repeated string column = 6;\n * @return {!Array.<string>}\n */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.getColumnList = function () {\n  return (\n    /** @type {!Array.<string>} */\n    jspb.Message.getRepeatedField(this, 6)\n  );\n};\n/** @param {!Array.<string>} value */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.setColumnList = function (value) {\n  jspb.Message.setField(this, 6, value || []);\n};\n/**\n * @param {!string} value\n * @param {number=} opt_index\n */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.addColumn = function (value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 6, value, opt_index);\n};\n\nproto.Mysqlx.Crud.ModifyView.prototype.clearColumnList = function () {\n  this.setColumnList([]);\n};\n/**\n * optional Find stmt = 7;\n * @return {?proto.Mysqlx.Crud.Find}\n */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.getStmt = function () {\n  return (\n    /** @type{?proto.Mysqlx.Crud.Find} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Find, 7)\n  );\n};\n/** @param {?proto.Mysqlx.Crud.Find|undefined} value */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.setStmt = function (value) {\n  jspb.Message.setWrapperField(this, 7, value);\n};\n\nproto.Mysqlx.Crud.ModifyView.prototype.clearStmt = function () {\n  this.setStmt(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.hasStmt = function () {\n  return jspb.Message.getField(this, 7) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Crud.DropView = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Crud.DropView, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.DropView.displayName = 'proto.Mysqlx.Crud.DropView';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Crud.DropView.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Crud.DropView.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Crud.DropView} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Crud.DropView.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),\n      ifExists: jspb.Message.getFieldWithDefault(msg, 2, false)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.DropView}\n */\n\n\nproto.Mysqlx.Crud.DropView.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.DropView();\n  return proto.Mysqlx.Crud.DropView.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.DropView} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.DropView}\n */\n\n\nproto.Mysqlx.Crud.DropView.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new proto.Mysqlx.Crud.Collection();\n        reader.readMessage(value, proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);\n        msg.setCollection(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setIfExists(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Crud.DropView.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.DropView.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.DropView} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Crud.DropView.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getCollection();\n\n  if (f != null) {\n    writer.writeMessage(1, f, proto.Mysqlx.Crud.Collection.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {boolean} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeBool(2, f);\n  }\n};\n/**\n * required Collection collection = 1;\n * @return {!proto.Mysqlx.Crud.Collection}\n */\n\n\nproto.Mysqlx.Crud.DropView.prototype.getCollection = function () {\n  return (\n    /** @type{!proto.Mysqlx.Crud.Collection} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 1, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Crud.Collection} value */\n\n\nproto.Mysqlx.Crud.DropView.prototype.setCollection = function (value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\nproto.Mysqlx.Crud.DropView.prototype.clearCollection = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.DropView.prototype.hasCollection = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional bool if_exists = 2;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val === true/false} in those cases.\n * @return {boolean}\n */\n\n\nproto.Mysqlx.Crud.DropView.prototype.getIfExists = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getFieldWithDefault(this, 2, false)\n  );\n};\n/** @param {boolean} value */\n\n\nproto.Mysqlx.Crud.DropView.prototype.setIfExists = function (value) {\n  jspb.Message.setField(this, 2, value);\n};\n\nproto.Mysqlx.Crud.DropView.prototype.clearIfExists = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Crud.DropView.prototype.hasIfExists = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * @enum {number}\n */\n\n\nproto.Mysqlx.Crud.DataModel = {\n  DOCUMENT: 1,\n  TABLE: 2\n};\n/**\n * @enum {number}\n */\n\nproto.Mysqlx.Crud.ViewAlgorithm = {\n  UNDEFINED: 1,\n  MERGE: 2,\n  TEMPTABLE: 3\n};\n/**\n * @enum {number}\n */\n\nproto.Mysqlx.Crud.ViewSqlSecurity = {\n  INVOKER: 1,\n  DEFINER: 2\n};\n/**\n * @enum {number}\n */\n\nproto.Mysqlx.Crud.ViewCheckOption = {\n  LOCAL: 1,\n  CASCADED: 2\n};\ngoog.object.extend(exports, proto.Mysqlx.Crud);","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Stubs/mysqlx_crud_pb.js"],"names":["jspb","require","goog","global","Function","mysqlx_pb","mysqlx_expr_pb","mysqlx_datatypes_pb","exportSymbol","proto","Mysqlx","Crud","Column","opt_data","Message","initialize","repeatedFields_","inherits","DEBUG","COMPILED","displayName","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","name","getField","alias","documentPathList","toObjectList","getDocumentPathList","DocumentPathItem","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","value","readString","setName","setAlias","readMessage","addDocumentPath","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","undefined","writeString","length","writeRepeatedMessage","getName","getFieldWithDefault","setField","clearName","hasName","getAlias","clearAlias","hasAlias","getRepeatedWrapperField","setDocumentPathList","setRepeatedWrapperField","opt_value","opt_index","addToRepeatedWrapperField","Expr","clearDocumentPathList","Projection","source","getSource","setSource","writeMessage","getWrapperField","setWrapperField","clearSource","hasSource","Collection","schema","setSchema","getSchema","clearSchema","hasSchema","Limit","rowCount","offset","readUint64","setRowCount","setOffset","writeUint64","getRowCount","clearRowCount","hasRowCount","getOffset","clearOffset","hasOffset","LimitExpr","Order","expr","getExpr","direction","setExpr","readEnum","setDirection","writeEnum","Direction","ASC","DESC","clearExpr","hasExpr","getDirection","clearDirection","hasDirection","UpdateOperation","ColumnIdentifier","operation","getValue","setOperation","setValue","UpdateType","SET","ITEM_REMOVE","ITEM_SET","ITEM_REPLACE","ITEM_MERGE","ARRAY_INSERT","ARRAY_APPEND","MERGE_PATCH","getOperation","clearOperation","hasOperation","clearValue","hasValue","Find","collection","getCollection","dataModel","projectionList","getProjectionList","criteria","getCriteria","argsList","getArgsList","Scalar","orderList","getOrderList","groupingList","getGroupingList","groupingCriteria","getGroupingCriteria","locking","lockingOptions","limit","getLimit","limitExpr","getLimitExpr","setCollection","setDataModel","addProjection","setCriteria","addArgs","addOrder","addGrouping","setGroupingCriteria","setLocking","setLockingOptions","setLimit","setLimitExpr","RowLock","SHARED_LOCK","EXCLUSIVE_LOCK","RowLockOptions","NOWAIT","SKIP_LOCKED","clearCollection","hasCollection","getDataModel","clearDataModel","hasDataModel","setProjectionList","clearProjectionList","clearCriteria","hasCriteria","setArgsList","Datatypes","clearArgsList","setOrderList","clearOrderList","setGroupingList","clearGroupingList","clearGroupingCriteria","hasGroupingCriteria","getLocking","clearLocking","hasLocking","getLockingOptions","clearLockingOptions","hasLockingOptions","clearLimit","hasLimit","clearLimitExpr","hasLimitExpr","Insert","rowList","getRowList","TypedRow","upsert","addRow","readBool","setUpsert","writeBool","fieldList","getFieldList","addField","setFieldList","clearFieldList","setRowList","clearRowList","getUpsert","clearUpsert","hasUpsert","Update","operationList","getOperationList","addOperation","setOperationList","clearOperationList","Delete","CreateView","definer","algorithm","security","check","columnList","getRepeatedField","stmt","getStmt","replaceExisting","setDefiner","setAlgorithm","setSecurity","setCheck","addColumn","setStmt","setReplaceExisting","getColumnList","writeRepeatedString","getDefiner","clearDefiner","hasDefiner","getAlgorithm","clearAlgorithm","hasAlgorithm","getSecurity","clearSecurity","hasSecurity","getCheck","clearCheck","hasCheck","setColumnList","addToRepeatedField","clearColumnList","clearStmt","hasStmt","getReplaceExisting","clearReplaceExisting","hasReplaceExisting","ModifyView","DropView","ifExists","setIfExists","getIfExists","clearIfExists","hasIfExists","DataModel","DOCUMENT","TABLE","ViewAlgorithm","UNDEFINED","MERGE","TEMPTABLE","ViewSqlSecurity","INVOKER","DEFINER","ViewCheckOption","LOCAL","CASCADED","object","extend","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar mysqlx_pb = require('./mysqlx_pb.js');\nvar mysqlx_expr_pb = require('./mysqlx_expr_pb.js');\nvar mysqlx_datatypes_pb = require('./mysqlx_datatypes_pb.js');\ngoog.exportSymbol('proto.Mysqlx.Crud.Collection', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Column', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.CreateView', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.DataModel', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Delete', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.DropView', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Find', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Find.RowLock', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Find.RowLockOptions', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Insert', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Insert.TypedRow', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Limit', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.LimitExpr', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.ModifyView', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Order', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Order.Direction', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Projection', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.Update', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.UpdateOperation', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.UpdateOperation.UpdateType', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.ViewAlgorithm', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.ViewCheckOption', null, global);\ngoog.exportSymbol('proto.Mysqlx.Crud.ViewSqlSecurity', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Crud.Column = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Column.repeatedFields_, null);\n};\ngoog.inherits(proto.Mysqlx.Crud.Column, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Column.displayName = 'proto.Mysqlx.Crud.Column';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Mysqlx.Crud.Column.repeatedFields_ = [3];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Crud.Column.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Crud.Column.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Crud.Column} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Column.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getField(msg, 1),\n    alias: jspb.Message.getField(msg, 2),\n    documentPathList: jspb.Message.toObjectList(msg.getDocumentPathList(),\n    mysqlx_expr_pb.DocumentPathItem.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Column}\n */\nproto.Mysqlx.Crud.Column.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Column;\n  return proto.Mysqlx.Crud.Column.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Column} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Column}\n */\nproto.Mysqlx.Crud.Column.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAlias(value);\n      break;\n    case 3:\n      var value = new mysqlx_expr_pb.DocumentPathItem;\n      reader.readMessage(value,mysqlx_expr_pb.DocumentPathItem.deserializeBinaryFromReader);\n      msg.addDocumentPath(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Crud.Column.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Column.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Column} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Column.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getDocumentPathList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      3,\n      f,\n      mysqlx_expr_pb.DocumentPathItem.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.Mysqlx.Crud.Column.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Mysqlx.Crud.Column.prototype.setName = function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.Mysqlx.Crud.Column.prototype.clearName = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Column.prototype.hasName = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional string alias = 2;\n * @return {string}\n */\nproto.Mysqlx.Crud.Column.prototype.getAlias = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Mysqlx.Crud.Column.prototype.setAlias = function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.Mysqlx.Crud.Column.prototype.clearAlias = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Column.prototype.hasAlias = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * repeated Mysqlx.Expr.DocumentPathItem document_path = 3;\n * @return {!Array.<!proto.Mysqlx.Expr.DocumentPathItem>}\n */\nproto.Mysqlx.Crud.Column.prototype.getDocumentPathList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Expr.DocumentPathItem>} */ (\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_expr_pb.DocumentPathItem, 3));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Expr.DocumentPathItem>} value */\nproto.Mysqlx.Crud.Column.prototype.setDocumentPathList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Expr.DocumentPathItem=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Expr.DocumentPathItem}\n */\nproto.Mysqlx.Crud.Column.prototype.addDocumentPath = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Mysqlx.Expr.DocumentPathItem, opt_index);\n};\n\n\nproto.Mysqlx.Crud.Column.prototype.clearDocumentPathList = function() {\n  this.setDocumentPathList([]);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Crud.Projection = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Crud.Projection, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Projection.displayName = 'proto.Mysqlx.Crud.Projection';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Crud.Projection.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Crud.Projection.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Crud.Projection} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Projection.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    source: (f = msg.getSource()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),\n    alias: jspb.Message.getField(msg, 2)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Projection}\n */\nproto.Mysqlx.Crud.Projection.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Projection;\n  return proto.Mysqlx.Crud.Projection.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Projection} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Projection}\n */\nproto.Mysqlx.Crud.Projection.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new mysqlx_expr_pb.Expr;\n      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n      msg.setSource(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAlias(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Crud.Projection.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Projection.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Projection} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Projection.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSource();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      mysqlx_expr_pb.Expr.serializeBinaryToWriter\n    );\n  }\n  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * required Mysqlx.Expr.Expr source = 1;\n * @return {!proto.Mysqlx.Expr.Expr}\n */\nproto.Mysqlx.Crud.Projection.prototype.getSource = function() {\n  return /** @type{!proto.Mysqlx.Expr.Expr} */ (\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 1, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Expr.Expr} value */\nproto.Mysqlx.Crud.Projection.prototype.setSource = function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.Mysqlx.Crud.Projection.prototype.clearSource = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Projection.prototype.hasSource = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional string alias = 2;\n * @return {string}\n */\nproto.Mysqlx.Crud.Projection.prototype.getAlias = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Mysqlx.Crud.Projection.prototype.setAlias = function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.Mysqlx.Crud.Projection.prototype.clearAlias = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Projection.prototype.hasAlias = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Crud.Collection = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Crud.Collection, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Collection.displayName = 'proto.Mysqlx.Crud.Collection';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Crud.Collection.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Crud.Collection.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Crud.Collection} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Collection.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getField(msg, 1),\n    schema: jspb.Message.getField(msg, 2)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Collection}\n */\nproto.Mysqlx.Crud.Collection.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Collection;\n  return proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Collection} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Collection}\n */\nproto.Mysqlx.Crud.Collection.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setSchema(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Crud.Collection.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Collection.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Collection} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Collection.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * required string name = 1;\n * @return {string}\n */\nproto.Mysqlx.Crud.Collection.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Mysqlx.Crud.Collection.prototype.setName = function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.Mysqlx.Crud.Collection.prototype.clearName = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Collection.prototype.hasName = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional string schema = 2;\n * @return {string}\n */\nproto.Mysqlx.Crud.Collection.prototype.getSchema = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Mysqlx.Crud.Collection.prototype.setSchema = function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.Mysqlx.Crud.Collection.prototype.clearSchema = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Collection.prototype.hasSchema = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Crud.Limit = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Crud.Limit, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Limit.displayName = 'proto.Mysqlx.Crud.Limit';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Crud.Limit.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Crud.Limit.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Crud.Limit} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Limit.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    rowCount: jspb.Message.getField(msg, 1),\n    offset: jspb.Message.getField(msg, 2)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Limit}\n */\nproto.Mysqlx.Crud.Limit.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Limit;\n  return proto.Mysqlx.Crud.Limit.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Limit} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Limit}\n */\nproto.Mysqlx.Crud.Limit.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setRowCount(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setOffset(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Crud.Limit.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Limit.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Limit} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Limit.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeUint64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * required uint64 row_count = 1;\n * @return {number}\n */\nproto.Mysqlx.Crud.Limit.prototype.getRowCount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {number} value */\nproto.Mysqlx.Crud.Limit.prototype.setRowCount = function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.Mysqlx.Crud.Limit.prototype.clearRowCount = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Limit.prototype.hasRowCount = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional uint64 offset = 2;\n * @return {number}\n */\nproto.Mysqlx.Crud.Limit.prototype.getOffset = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/** @param {number} value */\nproto.Mysqlx.Crud.Limit.prototype.setOffset = function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.Mysqlx.Crud.Limit.prototype.clearOffset = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Limit.prototype.hasOffset = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Crud.LimitExpr = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Crud.LimitExpr, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.LimitExpr.displayName = 'proto.Mysqlx.Crud.LimitExpr';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Crud.LimitExpr.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Crud.LimitExpr.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Crud.LimitExpr} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.LimitExpr.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    rowCount: (f = msg.getRowCount()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),\n    offset: (f = msg.getOffset()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.LimitExpr}\n */\nproto.Mysqlx.Crud.LimitExpr.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.LimitExpr;\n  return proto.Mysqlx.Crud.LimitExpr.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.LimitExpr} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.LimitExpr}\n */\nproto.Mysqlx.Crud.LimitExpr.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new mysqlx_expr_pb.Expr;\n      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n      msg.setRowCount(value);\n      break;\n    case 2:\n      var value = new mysqlx_expr_pb.Expr;\n      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n      msg.setOffset(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Crud.LimitExpr.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.LimitExpr.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.LimitExpr} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.LimitExpr.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getRowCount();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      mysqlx_expr_pb.Expr.serializeBinaryToWriter\n    );\n  }\n  f = message.getOffset();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      mysqlx_expr_pb.Expr.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * required Mysqlx.Expr.Expr row_count = 1;\n * @return {!proto.Mysqlx.Expr.Expr}\n */\nproto.Mysqlx.Crud.LimitExpr.prototype.getRowCount = function() {\n  return /** @type{!proto.Mysqlx.Expr.Expr} */ (\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 1, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Expr.Expr} value */\nproto.Mysqlx.Crud.LimitExpr.prototype.setRowCount = function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.Mysqlx.Crud.LimitExpr.prototype.clearRowCount = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.LimitExpr.prototype.hasRowCount = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional Mysqlx.Expr.Expr offset = 2;\n * @return {?proto.Mysqlx.Expr.Expr}\n */\nproto.Mysqlx.Crud.LimitExpr.prototype.getOffset = function() {\n  return /** @type{?proto.Mysqlx.Expr.Expr} */ (\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 2));\n};\n\n\n/** @param {?proto.Mysqlx.Expr.Expr|undefined} value */\nproto.Mysqlx.Crud.LimitExpr.prototype.setOffset = function(value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\n\nproto.Mysqlx.Crud.LimitExpr.prototype.clearOffset = function() {\n  this.setOffset(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.LimitExpr.prototype.hasOffset = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Crud.Order = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Crud.Order, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Order.displayName = 'proto.Mysqlx.Crud.Order';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Crud.Order.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Crud.Order.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Crud.Order} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Order.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    expr: (f = msg.getExpr()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),\n    direction: jspb.Message.getFieldWithDefault(msg, 2, 1)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Order}\n */\nproto.Mysqlx.Crud.Order.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Order;\n  return proto.Mysqlx.Crud.Order.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Order} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Order}\n */\nproto.Mysqlx.Crud.Order.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new mysqlx_expr_pb.Expr;\n      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n      msg.setExpr(value);\n      break;\n    case 2:\n      var value = /** @type {!proto.Mysqlx.Crud.Order.Direction} */ (reader.readEnum());\n      msg.setDirection(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Crud.Order.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Order.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Order} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Order.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getExpr();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      mysqlx_expr_pb.Expr.serializeBinaryToWriter\n    );\n  }\n  f = /** @type {!proto.Mysqlx.Crud.Order.Direction} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.Mysqlx.Crud.Order.Direction = {\n  ASC: 1,\n  DESC: 2\n};\n\n/**\n * required Mysqlx.Expr.Expr expr = 1;\n * @return {!proto.Mysqlx.Expr.Expr}\n */\nproto.Mysqlx.Crud.Order.prototype.getExpr = function() {\n  return /** @type{!proto.Mysqlx.Expr.Expr} */ (\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 1, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Expr.Expr} value */\nproto.Mysqlx.Crud.Order.prototype.setExpr = function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.Mysqlx.Crud.Order.prototype.clearExpr = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Order.prototype.hasExpr = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional Direction direction = 2;\n * @return {!proto.Mysqlx.Crud.Order.Direction}\n */\nproto.Mysqlx.Crud.Order.prototype.getDirection = function() {\n  return /** @type {!proto.Mysqlx.Crud.Order.Direction} */ (jspb.Message.getFieldWithDefault(this, 2, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.Order.Direction} value */\nproto.Mysqlx.Crud.Order.prototype.setDirection = function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.Mysqlx.Crud.Order.prototype.clearDirection = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Order.prototype.hasDirection = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Crud.UpdateOperation = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Crud.UpdateOperation, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.UpdateOperation.displayName = 'proto.Mysqlx.Crud.UpdateOperation';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Crud.UpdateOperation.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Crud.UpdateOperation.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Crud.UpdateOperation} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.UpdateOperation.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    source: (f = msg.getSource()) && mysqlx_expr_pb.ColumnIdentifier.toObject(includeInstance, f),\n    operation: jspb.Message.getField(msg, 2),\n    value: (f = msg.getValue()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.UpdateOperation}\n */\nproto.Mysqlx.Crud.UpdateOperation.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.UpdateOperation;\n  return proto.Mysqlx.Crud.UpdateOperation.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.UpdateOperation} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.UpdateOperation}\n */\nproto.Mysqlx.Crud.UpdateOperation.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new mysqlx_expr_pb.ColumnIdentifier;\n      reader.readMessage(value,mysqlx_expr_pb.ColumnIdentifier.deserializeBinaryFromReader);\n      msg.setSource(value);\n      break;\n    case 2:\n      var value = /** @type {!proto.Mysqlx.Crud.UpdateOperation.UpdateType} */ (reader.readEnum());\n      msg.setOperation(value);\n      break;\n    case 3:\n      var value = new mysqlx_expr_pb.Expr;\n      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n      msg.setValue(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Crud.UpdateOperation.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.UpdateOperation.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.UpdateOperation} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.UpdateOperation.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSource();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      mysqlx_expr_pb.ColumnIdentifier.serializeBinaryToWriter\n    );\n  }\n  f = /** @type {!proto.Mysqlx.Crud.UpdateOperation.UpdateType} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getValue();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      mysqlx_expr_pb.Expr.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.Mysqlx.Crud.UpdateOperation.UpdateType = {\n  SET: 1,\n  ITEM_REMOVE: 2,\n  ITEM_SET: 3,\n  ITEM_REPLACE: 4,\n  ITEM_MERGE: 5,\n  ARRAY_INSERT: 6,\n  ARRAY_APPEND: 7,\n  MERGE_PATCH: 8\n};\n\n/**\n * required Mysqlx.Expr.ColumnIdentifier source = 1;\n * @return {!proto.Mysqlx.Expr.ColumnIdentifier}\n */\nproto.Mysqlx.Crud.UpdateOperation.prototype.getSource = function() {\n  return /** @type{!proto.Mysqlx.Expr.ColumnIdentifier} */ (\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.ColumnIdentifier, 1, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Expr.ColumnIdentifier} value */\nproto.Mysqlx.Crud.UpdateOperation.prototype.setSource = function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.Mysqlx.Crud.UpdateOperation.prototype.clearSource = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.UpdateOperation.prototype.hasSource = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * required UpdateType operation = 2;\n * @return {!proto.Mysqlx.Crud.UpdateOperation.UpdateType}\n */\nproto.Mysqlx.Crud.UpdateOperation.prototype.getOperation = function() {\n  return /** @type {!proto.Mysqlx.Crud.UpdateOperation.UpdateType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.UpdateOperation.UpdateType} value */\nproto.Mysqlx.Crud.UpdateOperation.prototype.setOperation = function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.Mysqlx.Crud.UpdateOperation.prototype.clearOperation = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.UpdateOperation.prototype.hasOperation = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional Mysqlx.Expr.Expr value = 3;\n * @return {?proto.Mysqlx.Expr.Expr}\n */\nproto.Mysqlx.Crud.UpdateOperation.prototype.getValue = function() {\n  return /** @type{?proto.Mysqlx.Expr.Expr} */ (\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 3));\n};\n\n\n/** @param {?proto.Mysqlx.Expr.Expr|undefined} value */\nproto.Mysqlx.Crud.UpdateOperation.prototype.setValue = function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\nproto.Mysqlx.Crud.UpdateOperation.prototype.clearValue = function() {\n  this.setValue(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.UpdateOperation.prototype.hasValue = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Crud.Find = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Find.repeatedFields_, null);\n};\ngoog.inherits(proto.Mysqlx.Crud.Find, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Find.displayName = 'proto.Mysqlx.Crud.Find';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Mysqlx.Crud.Find.repeatedFields_ = [4,11,7,8];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Crud.Find.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Crud.Find.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Crud.Find} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Find.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),\n    dataModel: jspb.Message.getField(msg, 3),\n    projectionList: jspb.Message.toObjectList(msg.getProjectionList(),\n    proto.Mysqlx.Crud.Projection.toObject, includeInstance),\n    criteria: (f = msg.getCriteria()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),\n    argsList: jspb.Message.toObjectList(msg.getArgsList(),\n    mysqlx_datatypes_pb.Scalar.toObject, includeInstance),\n    orderList: jspb.Message.toObjectList(msg.getOrderList(),\n    proto.Mysqlx.Crud.Order.toObject, includeInstance),\n    groupingList: jspb.Message.toObjectList(msg.getGroupingList(),\n    mysqlx_expr_pb.Expr.toObject, includeInstance),\n    groupingCriteria: (f = msg.getGroupingCriteria()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),\n    locking: jspb.Message.getField(msg, 12),\n    lockingOptions: jspb.Message.getField(msg, 13),\n    limit: (f = msg.getLimit()) && proto.Mysqlx.Crud.Limit.toObject(includeInstance, f),\n    limitExpr: (f = msg.getLimitExpr()) && proto.Mysqlx.Crud.LimitExpr.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Find}\n */\nproto.Mysqlx.Crud.Find.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Find;\n  return proto.Mysqlx.Crud.Find.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Find} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Find}\n */\nproto.Mysqlx.Crud.Find.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 2:\n      var value = new proto.Mysqlx.Crud.Collection;\n      reader.readMessage(value,proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);\n      msg.setCollection(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.Mysqlx.Crud.DataModel} */ (reader.readEnum());\n      msg.setDataModel(value);\n      break;\n    case 4:\n      var value = new proto.Mysqlx.Crud.Projection;\n      reader.readMessage(value,proto.Mysqlx.Crud.Projection.deserializeBinaryFromReader);\n      msg.addProjection(value);\n      break;\n    case 5:\n      var value = new mysqlx_expr_pb.Expr;\n      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n      msg.setCriteria(value);\n      break;\n    case 11:\n      var value = new mysqlx_datatypes_pb.Scalar;\n      reader.readMessage(value,mysqlx_datatypes_pb.Scalar.deserializeBinaryFromReader);\n      msg.addArgs(value);\n      break;\n    case 7:\n      var value = new proto.Mysqlx.Crud.Order;\n      reader.readMessage(value,proto.Mysqlx.Crud.Order.deserializeBinaryFromReader);\n      msg.addOrder(value);\n      break;\n    case 8:\n      var value = new mysqlx_expr_pb.Expr;\n      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n      msg.addGrouping(value);\n      break;\n    case 9:\n      var value = new mysqlx_expr_pb.Expr;\n      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n      msg.setGroupingCriteria(value);\n      break;\n    case 12:\n      var value = /** @type {!proto.Mysqlx.Crud.Find.RowLock} */ (reader.readEnum());\n      msg.setLocking(value);\n      break;\n    case 13:\n      var value = /** @type {!proto.Mysqlx.Crud.Find.RowLockOptions} */ (reader.readEnum());\n      msg.setLockingOptions(value);\n      break;\n    case 6:\n      var value = new proto.Mysqlx.Crud.Limit;\n      reader.readMessage(value,proto.Mysqlx.Crud.Limit.deserializeBinaryFromReader);\n      msg.setLimit(value);\n      break;\n    case 14:\n      var value = new proto.Mysqlx.Crud.LimitExpr;\n      reader.readMessage(value,proto.Mysqlx.Crud.LimitExpr.deserializeBinaryFromReader);\n      msg.setLimitExpr(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Crud.Find.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Find.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Find} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Find.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCollection();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.Mysqlx.Crud.Collection.serializeBinaryToWriter\n    );\n  }\n  f = /** @type {!proto.Mysqlx.Crud.DataModel} */ (jspb.Message.getField(message, 3));\n  if (f != null) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f = message.getProjectionList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      4,\n      f,\n      proto.Mysqlx.Crud.Projection.serializeBinaryToWriter\n    );\n  }\n  f = message.getCriteria();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      mysqlx_expr_pb.Expr.serializeBinaryToWriter\n    );\n  }\n  f = message.getArgsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      11,\n      f,\n      mysqlx_datatypes_pb.Scalar.serializeBinaryToWriter\n    );\n  }\n  f = message.getOrderList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      7,\n      f,\n      proto.Mysqlx.Crud.Order.serializeBinaryToWriter\n    );\n  }\n  f = message.getGroupingList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      8,\n      f,\n      mysqlx_expr_pb.Expr.serializeBinaryToWriter\n    );\n  }\n  f = message.getGroupingCriteria();\n  if (f != null) {\n    writer.writeMessage(\n      9,\n      f,\n      mysqlx_expr_pb.Expr.serializeBinaryToWriter\n    );\n  }\n  f = /** @type {!proto.Mysqlx.Crud.Find.RowLock} */ (jspb.Message.getField(message, 12));\n  if (f != null) {\n    writer.writeEnum(\n      12,\n      f\n    );\n  }\n  f = /** @type {!proto.Mysqlx.Crud.Find.RowLockOptions} */ (jspb.Message.getField(message, 13));\n  if (f != null) {\n    writer.writeEnum(\n      13,\n      f\n    );\n  }\n  f = message.getLimit();\n  if (f != null) {\n    writer.writeMessage(\n      6,\n      f,\n      proto.Mysqlx.Crud.Limit.serializeBinaryToWriter\n    );\n  }\n  f = message.getLimitExpr();\n  if (f != null) {\n    writer.writeMessage(\n      14,\n      f,\n      proto.Mysqlx.Crud.LimitExpr.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.Mysqlx.Crud.Find.RowLock = {\n  SHARED_LOCK: 1,\n  EXCLUSIVE_LOCK: 2\n};\n\n/**\n * @enum {number}\n */\nproto.Mysqlx.Crud.Find.RowLockOptions = {\n  NOWAIT: 1,\n  SKIP_LOCKED: 2\n};\n\n/**\n * required Collection collection = 2;\n * @return {!proto.Mysqlx.Crud.Collection}\n */\nproto.Mysqlx.Crud.Find.prototype.getCollection = function() {\n  return /** @type{!proto.Mysqlx.Crud.Collection} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 2, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.Collection} value */\nproto.Mysqlx.Crud.Find.prototype.setCollection = function(value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\n\nproto.Mysqlx.Crud.Find.prototype.clearCollection = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Find.prototype.hasCollection = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional DataModel data_model = 3;\n * @return {!proto.Mysqlx.Crud.DataModel}\n */\nproto.Mysqlx.Crud.Find.prototype.getDataModel = function() {\n  return /** @type {!proto.Mysqlx.Crud.DataModel} */ (jspb.Message.getFieldWithDefault(this, 3, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.DataModel} value */\nproto.Mysqlx.Crud.Find.prototype.setDataModel = function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.Mysqlx.Crud.Find.prototype.clearDataModel = function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Find.prototype.hasDataModel = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * repeated Projection projection = 4;\n * @return {!Array.<!proto.Mysqlx.Crud.Projection>}\n */\nproto.Mysqlx.Crud.Find.prototype.getProjectionList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Crud.Projection>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Projection, 4));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Crud.Projection>} value */\nproto.Mysqlx.Crud.Find.prototype.setProjectionList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 4, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Crud.Projection=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Crud.Projection}\n */\nproto.Mysqlx.Crud.Find.prototype.addProjection = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Mysqlx.Crud.Projection, opt_index);\n};\n\n\nproto.Mysqlx.Crud.Find.prototype.clearProjectionList = function() {\n  this.setProjectionList([]);\n};\n\n\n/**\n * optional Mysqlx.Expr.Expr criteria = 5;\n * @return {?proto.Mysqlx.Expr.Expr}\n */\nproto.Mysqlx.Crud.Find.prototype.getCriteria = function() {\n  return /** @type{?proto.Mysqlx.Expr.Expr} */ (\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 5));\n};\n\n\n/** @param {?proto.Mysqlx.Expr.Expr|undefined} value */\nproto.Mysqlx.Crud.Find.prototype.setCriteria = function(value) {\n  jspb.Message.setWrapperField(this, 5, value);\n};\n\n\nproto.Mysqlx.Crud.Find.prototype.clearCriteria = function() {\n  this.setCriteria(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Find.prototype.hasCriteria = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * repeated Mysqlx.Datatypes.Scalar args = 11;\n * @return {!Array.<!proto.Mysqlx.Datatypes.Scalar>}\n */\nproto.Mysqlx.Crud.Find.prototype.getArgsList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Datatypes.Scalar>} */ (\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_datatypes_pb.Scalar, 11));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Datatypes.Scalar>} value */\nproto.Mysqlx.Crud.Find.prototype.setArgsList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 11, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Datatypes.Scalar=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Datatypes.Scalar}\n */\nproto.Mysqlx.Crud.Find.prototype.addArgs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.Mysqlx.Datatypes.Scalar, opt_index);\n};\n\n\nproto.Mysqlx.Crud.Find.prototype.clearArgsList = function() {\n  this.setArgsList([]);\n};\n\n\n/**\n * repeated Order order = 7;\n * @return {!Array.<!proto.Mysqlx.Crud.Order>}\n */\nproto.Mysqlx.Crud.Find.prototype.getOrderList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Crud.Order>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Order, 7));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Crud.Order>} value */\nproto.Mysqlx.Crud.Find.prototype.setOrderList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 7, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Crud.Order=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Crud.Order}\n */\nproto.Mysqlx.Crud.Find.prototype.addOrder = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.Mysqlx.Crud.Order, opt_index);\n};\n\n\nproto.Mysqlx.Crud.Find.prototype.clearOrderList = function() {\n  this.setOrderList([]);\n};\n\n\n/**\n * repeated Mysqlx.Expr.Expr grouping = 8;\n * @return {!Array.<!proto.Mysqlx.Expr.Expr>}\n */\nproto.Mysqlx.Crud.Find.prototype.getGroupingList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Expr.Expr>} */ (\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_expr_pb.Expr, 8));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Expr.Expr>} value */\nproto.Mysqlx.Crud.Find.prototype.setGroupingList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 8, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Expr.Expr=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Expr.Expr}\n */\nproto.Mysqlx.Crud.Find.prototype.addGrouping = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.Mysqlx.Expr.Expr, opt_index);\n};\n\n\nproto.Mysqlx.Crud.Find.prototype.clearGroupingList = function() {\n  this.setGroupingList([]);\n};\n\n\n/**\n * optional Mysqlx.Expr.Expr grouping_criteria = 9;\n * @return {?proto.Mysqlx.Expr.Expr}\n */\nproto.Mysqlx.Crud.Find.prototype.getGroupingCriteria = function() {\n  return /** @type{?proto.Mysqlx.Expr.Expr} */ (\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 9));\n};\n\n\n/** @param {?proto.Mysqlx.Expr.Expr|undefined} value */\nproto.Mysqlx.Crud.Find.prototype.setGroupingCriteria = function(value) {\n  jspb.Message.setWrapperField(this, 9, value);\n};\n\n\nproto.Mysqlx.Crud.Find.prototype.clearGroupingCriteria = function() {\n  this.setGroupingCriteria(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Find.prototype.hasGroupingCriteria = function() {\n  return jspb.Message.getField(this, 9) != null;\n};\n\n\n/**\n * optional RowLock locking = 12;\n * @return {!proto.Mysqlx.Crud.Find.RowLock}\n */\nproto.Mysqlx.Crud.Find.prototype.getLocking = function() {\n  return /** @type {!proto.Mysqlx.Crud.Find.RowLock} */ (jspb.Message.getFieldWithDefault(this, 12, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.Find.RowLock} value */\nproto.Mysqlx.Crud.Find.prototype.setLocking = function(value) {\n  jspb.Message.setField(this, 12, value);\n};\n\n\nproto.Mysqlx.Crud.Find.prototype.clearLocking = function() {\n  jspb.Message.setField(this, 12, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Find.prototype.hasLocking = function() {\n  return jspb.Message.getField(this, 12) != null;\n};\n\n\n/**\n * optional RowLockOptions locking_options = 13;\n * @return {!proto.Mysqlx.Crud.Find.RowLockOptions}\n */\nproto.Mysqlx.Crud.Find.prototype.getLockingOptions = function() {\n  return /** @type {!proto.Mysqlx.Crud.Find.RowLockOptions} */ (jspb.Message.getFieldWithDefault(this, 13, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.Find.RowLockOptions} value */\nproto.Mysqlx.Crud.Find.prototype.setLockingOptions = function(value) {\n  jspb.Message.setField(this, 13, value);\n};\n\n\nproto.Mysqlx.Crud.Find.prototype.clearLockingOptions = function() {\n  jspb.Message.setField(this, 13, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Find.prototype.hasLockingOptions = function() {\n  return jspb.Message.getField(this, 13) != null;\n};\n\n\n/**\n * optional Limit limit = 6;\n * @return {?proto.Mysqlx.Crud.Limit}\n */\nproto.Mysqlx.Crud.Find.prototype.getLimit = function() {\n  return /** @type{?proto.Mysqlx.Crud.Limit} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Limit, 6));\n};\n\n\n/** @param {?proto.Mysqlx.Crud.Limit|undefined} value */\nproto.Mysqlx.Crud.Find.prototype.setLimit = function(value) {\n  jspb.Message.setWrapperField(this, 6, value);\n};\n\n\nproto.Mysqlx.Crud.Find.prototype.clearLimit = function() {\n  this.setLimit(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Find.prototype.hasLimit = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n/**\n * optional LimitExpr limit_expr = 14;\n * @return {?proto.Mysqlx.Crud.LimitExpr}\n */\nproto.Mysqlx.Crud.Find.prototype.getLimitExpr = function() {\n  return /** @type{?proto.Mysqlx.Crud.LimitExpr} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.LimitExpr, 14));\n};\n\n\n/** @param {?proto.Mysqlx.Crud.LimitExpr|undefined} value */\nproto.Mysqlx.Crud.Find.prototype.setLimitExpr = function(value) {\n  jspb.Message.setWrapperField(this, 14, value);\n};\n\n\nproto.Mysqlx.Crud.Find.prototype.clearLimitExpr = function() {\n  this.setLimitExpr(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Find.prototype.hasLimitExpr = function() {\n  return jspb.Message.getField(this, 14) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Crud.Insert = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Insert.repeatedFields_, null);\n};\ngoog.inherits(proto.Mysqlx.Crud.Insert, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Insert.displayName = 'proto.Mysqlx.Crud.Insert';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Mysqlx.Crud.Insert.repeatedFields_ = [3,4,5];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Crud.Insert.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Crud.Insert.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Crud.Insert} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Insert.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),\n    dataModel: jspb.Message.getField(msg, 2),\n    projectionList: jspb.Message.toObjectList(msg.getProjectionList(),\n    proto.Mysqlx.Crud.Column.toObject, includeInstance),\n    rowList: jspb.Message.toObjectList(msg.getRowList(),\n    proto.Mysqlx.Crud.Insert.TypedRow.toObject, includeInstance),\n    argsList: jspb.Message.toObjectList(msg.getArgsList(),\n    mysqlx_datatypes_pb.Scalar.toObject, includeInstance),\n    upsert: jspb.Message.getFieldWithDefault(msg, 6, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Insert}\n */\nproto.Mysqlx.Crud.Insert.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Insert;\n  return proto.Mysqlx.Crud.Insert.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Insert} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Insert}\n */\nproto.Mysqlx.Crud.Insert.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.Mysqlx.Crud.Collection;\n      reader.readMessage(value,proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);\n      msg.setCollection(value);\n      break;\n    case 2:\n      var value = /** @type {!proto.Mysqlx.Crud.DataModel} */ (reader.readEnum());\n      msg.setDataModel(value);\n      break;\n    case 3:\n      var value = new proto.Mysqlx.Crud.Column;\n      reader.readMessage(value,proto.Mysqlx.Crud.Column.deserializeBinaryFromReader);\n      msg.addProjection(value);\n      break;\n    case 4:\n      var value = new proto.Mysqlx.Crud.Insert.TypedRow;\n      reader.readMessage(value,proto.Mysqlx.Crud.Insert.TypedRow.deserializeBinaryFromReader);\n      msg.addRow(value);\n      break;\n    case 5:\n      var value = new mysqlx_datatypes_pb.Scalar;\n      reader.readMessage(value,mysqlx_datatypes_pb.Scalar.deserializeBinaryFromReader);\n      msg.addArgs(value);\n      break;\n    case 6:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setUpsert(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Crud.Insert.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Insert.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Insert} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Insert.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCollection();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.Mysqlx.Crud.Collection.serializeBinaryToWriter\n    );\n  }\n  f = /** @type {!proto.Mysqlx.Crud.DataModel} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getProjectionList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      3,\n      f,\n      proto.Mysqlx.Crud.Column.serializeBinaryToWriter\n    );\n  }\n  f = message.getRowList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      4,\n      f,\n      proto.Mysqlx.Crud.Insert.TypedRow.serializeBinaryToWriter\n    );\n  }\n  f = message.getArgsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      5,\n      f,\n      mysqlx_datatypes_pb.Scalar.serializeBinaryToWriter\n    );\n  }\n  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));\n  if (f != null) {\n    writer.writeBool(\n      6,\n      f\n    );\n  }\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Crud.Insert.TypedRow = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Insert.TypedRow.repeatedFields_, null);\n};\ngoog.inherits(proto.Mysqlx.Crud.Insert.TypedRow, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Insert.TypedRow.displayName = 'proto.Mysqlx.Crud.Insert.TypedRow';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Mysqlx.Crud.Insert.TypedRow.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Crud.Insert.TypedRow.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Crud.Insert.TypedRow.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Crud.Insert.TypedRow} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Insert.TypedRow.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    fieldList: jspb.Message.toObjectList(msg.getFieldList(),\n    mysqlx_expr_pb.Expr.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Insert.TypedRow}\n */\nproto.Mysqlx.Crud.Insert.TypedRow.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Insert.TypedRow;\n  return proto.Mysqlx.Crud.Insert.TypedRow.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Insert.TypedRow} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Insert.TypedRow}\n */\nproto.Mysqlx.Crud.Insert.TypedRow.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new mysqlx_expr_pb.Expr;\n      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n      msg.addField(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Crud.Insert.TypedRow.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Insert.TypedRow.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Insert.TypedRow} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Insert.TypedRow.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getFieldList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      mysqlx_expr_pb.Expr.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * repeated Mysqlx.Expr.Expr field = 1;\n * @return {!Array.<!proto.Mysqlx.Expr.Expr>}\n */\nproto.Mysqlx.Crud.Insert.TypedRow.prototype.getFieldList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Expr.Expr>} */ (\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_expr_pb.Expr, 1));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Expr.Expr>} value */\nproto.Mysqlx.Crud.Insert.TypedRow.prototype.setFieldList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Expr.Expr=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Expr.Expr}\n */\nproto.Mysqlx.Crud.Insert.TypedRow.prototype.addField = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Mysqlx.Expr.Expr, opt_index);\n};\n\n\nproto.Mysqlx.Crud.Insert.TypedRow.prototype.clearFieldList = function() {\n  this.setFieldList([]);\n};\n\n\n/**\n * required Collection collection = 1;\n * @return {!proto.Mysqlx.Crud.Collection}\n */\nproto.Mysqlx.Crud.Insert.prototype.getCollection = function() {\n  return /** @type{!proto.Mysqlx.Crud.Collection} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 1, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.Collection} value */\nproto.Mysqlx.Crud.Insert.prototype.setCollection = function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.Mysqlx.Crud.Insert.prototype.clearCollection = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Insert.prototype.hasCollection = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional DataModel data_model = 2;\n * @return {!proto.Mysqlx.Crud.DataModel}\n */\nproto.Mysqlx.Crud.Insert.prototype.getDataModel = function() {\n  return /** @type {!proto.Mysqlx.Crud.DataModel} */ (jspb.Message.getFieldWithDefault(this, 2, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.DataModel} value */\nproto.Mysqlx.Crud.Insert.prototype.setDataModel = function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.Mysqlx.Crud.Insert.prototype.clearDataModel = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Insert.prototype.hasDataModel = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * repeated Column projection = 3;\n * @return {!Array.<!proto.Mysqlx.Crud.Column>}\n */\nproto.Mysqlx.Crud.Insert.prototype.getProjectionList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Crud.Column>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Column, 3));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Crud.Column>} value */\nproto.Mysqlx.Crud.Insert.prototype.setProjectionList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Crud.Column=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Crud.Column}\n */\nproto.Mysqlx.Crud.Insert.prototype.addProjection = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Mysqlx.Crud.Column, opt_index);\n};\n\n\nproto.Mysqlx.Crud.Insert.prototype.clearProjectionList = function() {\n  this.setProjectionList([]);\n};\n\n\n/**\n * repeated TypedRow row = 4;\n * @return {!Array.<!proto.Mysqlx.Crud.Insert.TypedRow>}\n */\nproto.Mysqlx.Crud.Insert.prototype.getRowList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Crud.Insert.TypedRow>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Insert.TypedRow, 4));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Crud.Insert.TypedRow>} value */\nproto.Mysqlx.Crud.Insert.prototype.setRowList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 4, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Crud.Insert.TypedRow=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Crud.Insert.TypedRow}\n */\nproto.Mysqlx.Crud.Insert.prototype.addRow = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Mysqlx.Crud.Insert.TypedRow, opt_index);\n};\n\n\nproto.Mysqlx.Crud.Insert.prototype.clearRowList = function() {\n  this.setRowList([]);\n};\n\n\n/**\n * repeated Mysqlx.Datatypes.Scalar args = 5;\n * @return {!Array.<!proto.Mysqlx.Datatypes.Scalar>}\n */\nproto.Mysqlx.Crud.Insert.prototype.getArgsList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Datatypes.Scalar>} */ (\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_datatypes_pb.Scalar, 5));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Datatypes.Scalar>} value */\nproto.Mysqlx.Crud.Insert.prototype.setArgsList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 5, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Datatypes.Scalar=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Datatypes.Scalar}\n */\nproto.Mysqlx.Crud.Insert.prototype.addArgs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Mysqlx.Datatypes.Scalar, opt_index);\n};\n\n\nproto.Mysqlx.Crud.Insert.prototype.clearArgsList = function() {\n  this.setArgsList([]);\n};\n\n\n/**\n * optional bool upsert = 6;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val === true/false} in those cases.\n * @return {boolean}\n */\nproto.Mysqlx.Crud.Insert.prototype.getUpsert = function() {\n  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));\n};\n\n\n/** @param {boolean} value */\nproto.Mysqlx.Crud.Insert.prototype.setUpsert = function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.Mysqlx.Crud.Insert.prototype.clearUpsert = function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Insert.prototype.hasUpsert = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Crud.Update = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Update.repeatedFields_, null);\n};\ngoog.inherits(proto.Mysqlx.Crud.Update, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Update.displayName = 'proto.Mysqlx.Crud.Update';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Mysqlx.Crud.Update.repeatedFields_ = [8,6,7];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Crud.Update.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Crud.Update.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Crud.Update} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Update.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),\n    dataModel: jspb.Message.getField(msg, 3),\n    criteria: (f = msg.getCriteria()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),\n    argsList: jspb.Message.toObjectList(msg.getArgsList(),\n    mysqlx_datatypes_pb.Scalar.toObject, includeInstance),\n    orderList: jspb.Message.toObjectList(msg.getOrderList(),\n    proto.Mysqlx.Crud.Order.toObject, includeInstance),\n    operationList: jspb.Message.toObjectList(msg.getOperationList(),\n    proto.Mysqlx.Crud.UpdateOperation.toObject, includeInstance),\n    limit: (f = msg.getLimit()) && proto.Mysqlx.Crud.Limit.toObject(includeInstance, f),\n    limitExpr: (f = msg.getLimitExpr()) && proto.Mysqlx.Crud.LimitExpr.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Update}\n */\nproto.Mysqlx.Crud.Update.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Update;\n  return proto.Mysqlx.Crud.Update.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Update} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Update}\n */\nproto.Mysqlx.Crud.Update.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 2:\n      var value = new proto.Mysqlx.Crud.Collection;\n      reader.readMessage(value,proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);\n      msg.setCollection(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.Mysqlx.Crud.DataModel} */ (reader.readEnum());\n      msg.setDataModel(value);\n      break;\n    case 4:\n      var value = new mysqlx_expr_pb.Expr;\n      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n      msg.setCriteria(value);\n      break;\n    case 8:\n      var value = new mysqlx_datatypes_pb.Scalar;\n      reader.readMessage(value,mysqlx_datatypes_pb.Scalar.deserializeBinaryFromReader);\n      msg.addArgs(value);\n      break;\n    case 6:\n      var value = new proto.Mysqlx.Crud.Order;\n      reader.readMessage(value,proto.Mysqlx.Crud.Order.deserializeBinaryFromReader);\n      msg.addOrder(value);\n      break;\n    case 7:\n      var value = new proto.Mysqlx.Crud.UpdateOperation;\n      reader.readMessage(value,proto.Mysqlx.Crud.UpdateOperation.deserializeBinaryFromReader);\n      msg.addOperation(value);\n      break;\n    case 5:\n      var value = new proto.Mysqlx.Crud.Limit;\n      reader.readMessage(value,proto.Mysqlx.Crud.Limit.deserializeBinaryFromReader);\n      msg.setLimit(value);\n      break;\n    case 9:\n      var value = new proto.Mysqlx.Crud.LimitExpr;\n      reader.readMessage(value,proto.Mysqlx.Crud.LimitExpr.deserializeBinaryFromReader);\n      msg.setLimitExpr(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Crud.Update.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Update.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Update} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Update.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCollection();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.Mysqlx.Crud.Collection.serializeBinaryToWriter\n    );\n  }\n  f = /** @type {!proto.Mysqlx.Crud.DataModel} */ (jspb.Message.getField(message, 3));\n  if (f != null) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f = message.getCriteria();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      mysqlx_expr_pb.Expr.serializeBinaryToWriter\n    );\n  }\n  f = message.getArgsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      8,\n      f,\n      mysqlx_datatypes_pb.Scalar.serializeBinaryToWriter\n    );\n  }\n  f = message.getOrderList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      6,\n      f,\n      proto.Mysqlx.Crud.Order.serializeBinaryToWriter\n    );\n  }\n  f = message.getOperationList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      7,\n      f,\n      proto.Mysqlx.Crud.UpdateOperation.serializeBinaryToWriter\n    );\n  }\n  f = message.getLimit();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      proto.Mysqlx.Crud.Limit.serializeBinaryToWriter\n    );\n  }\n  f = message.getLimitExpr();\n  if (f != null) {\n    writer.writeMessage(\n      9,\n      f,\n      proto.Mysqlx.Crud.LimitExpr.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * required Collection collection = 2;\n * @return {!proto.Mysqlx.Crud.Collection}\n */\nproto.Mysqlx.Crud.Update.prototype.getCollection = function() {\n  return /** @type{!proto.Mysqlx.Crud.Collection} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 2, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.Collection} value */\nproto.Mysqlx.Crud.Update.prototype.setCollection = function(value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\n\nproto.Mysqlx.Crud.Update.prototype.clearCollection = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Update.prototype.hasCollection = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional DataModel data_model = 3;\n * @return {!proto.Mysqlx.Crud.DataModel}\n */\nproto.Mysqlx.Crud.Update.prototype.getDataModel = function() {\n  return /** @type {!proto.Mysqlx.Crud.DataModel} */ (jspb.Message.getFieldWithDefault(this, 3, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.DataModel} value */\nproto.Mysqlx.Crud.Update.prototype.setDataModel = function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.Mysqlx.Crud.Update.prototype.clearDataModel = function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Update.prototype.hasDataModel = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional Mysqlx.Expr.Expr criteria = 4;\n * @return {?proto.Mysqlx.Expr.Expr}\n */\nproto.Mysqlx.Crud.Update.prototype.getCriteria = function() {\n  return /** @type{?proto.Mysqlx.Expr.Expr} */ (\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 4));\n};\n\n\n/** @param {?proto.Mysqlx.Expr.Expr|undefined} value */\nproto.Mysqlx.Crud.Update.prototype.setCriteria = function(value) {\n  jspb.Message.setWrapperField(this, 4, value);\n};\n\n\nproto.Mysqlx.Crud.Update.prototype.clearCriteria = function() {\n  this.setCriteria(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Update.prototype.hasCriteria = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * repeated Mysqlx.Datatypes.Scalar args = 8;\n * @return {!Array.<!proto.Mysqlx.Datatypes.Scalar>}\n */\nproto.Mysqlx.Crud.Update.prototype.getArgsList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Datatypes.Scalar>} */ (\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_datatypes_pb.Scalar, 8));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Datatypes.Scalar>} value */\nproto.Mysqlx.Crud.Update.prototype.setArgsList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 8, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Datatypes.Scalar=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Datatypes.Scalar}\n */\nproto.Mysqlx.Crud.Update.prototype.addArgs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.Mysqlx.Datatypes.Scalar, opt_index);\n};\n\n\nproto.Mysqlx.Crud.Update.prototype.clearArgsList = function() {\n  this.setArgsList([]);\n};\n\n\n/**\n * repeated Order order = 6;\n * @return {!Array.<!proto.Mysqlx.Crud.Order>}\n */\nproto.Mysqlx.Crud.Update.prototype.getOrderList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Crud.Order>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Order, 6));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Crud.Order>} value */\nproto.Mysqlx.Crud.Update.prototype.setOrderList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 6, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Crud.Order=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Crud.Order}\n */\nproto.Mysqlx.Crud.Update.prototype.addOrder = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Mysqlx.Crud.Order, opt_index);\n};\n\n\nproto.Mysqlx.Crud.Update.prototype.clearOrderList = function() {\n  this.setOrderList([]);\n};\n\n\n/**\n * repeated UpdateOperation operation = 7;\n * @return {!Array.<!proto.Mysqlx.Crud.UpdateOperation>}\n */\nproto.Mysqlx.Crud.Update.prototype.getOperationList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Crud.UpdateOperation>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.UpdateOperation, 7));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Crud.UpdateOperation>} value */\nproto.Mysqlx.Crud.Update.prototype.setOperationList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 7, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Crud.UpdateOperation=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Crud.UpdateOperation}\n */\nproto.Mysqlx.Crud.Update.prototype.addOperation = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.Mysqlx.Crud.UpdateOperation, opt_index);\n};\n\n\nproto.Mysqlx.Crud.Update.prototype.clearOperationList = function() {\n  this.setOperationList([]);\n};\n\n\n/**\n * optional Limit limit = 5;\n * @return {?proto.Mysqlx.Crud.Limit}\n */\nproto.Mysqlx.Crud.Update.prototype.getLimit = function() {\n  return /** @type{?proto.Mysqlx.Crud.Limit} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Limit, 5));\n};\n\n\n/** @param {?proto.Mysqlx.Crud.Limit|undefined} value */\nproto.Mysqlx.Crud.Update.prototype.setLimit = function(value) {\n  jspb.Message.setWrapperField(this, 5, value);\n};\n\n\nproto.Mysqlx.Crud.Update.prototype.clearLimit = function() {\n  this.setLimit(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Update.prototype.hasLimit = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * optional LimitExpr limit_expr = 9;\n * @return {?proto.Mysqlx.Crud.LimitExpr}\n */\nproto.Mysqlx.Crud.Update.prototype.getLimitExpr = function() {\n  return /** @type{?proto.Mysqlx.Crud.LimitExpr} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.LimitExpr, 9));\n};\n\n\n/** @param {?proto.Mysqlx.Crud.LimitExpr|undefined} value */\nproto.Mysqlx.Crud.Update.prototype.setLimitExpr = function(value) {\n  jspb.Message.setWrapperField(this, 9, value);\n};\n\n\nproto.Mysqlx.Crud.Update.prototype.clearLimitExpr = function() {\n  this.setLimitExpr(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Update.prototype.hasLimitExpr = function() {\n  return jspb.Message.getField(this, 9) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Crud.Delete = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Delete.repeatedFields_, null);\n};\ngoog.inherits(proto.Mysqlx.Crud.Delete, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.Delete.displayName = 'proto.Mysqlx.Crud.Delete';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Mysqlx.Crud.Delete.repeatedFields_ = [6,5];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Crud.Delete.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Crud.Delete.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Crud.Delete} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Delete.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),\n    dataModel: jspb.Message.getField(msg, 2),\n    criteria: (f = msg.getCriteria()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),\n    argsList: jspb.Message.toObjectList(msg.getArgsList(),\n    mysqlx_datatypes_pb.Scalar.toObject, includeInstance),\n    orderList: jspb.Message.toObjectList(msg.getOrderList(),\n    proto.Mysqlx.Crud.Order.toObject, includeInstance),\n    limit: (f = msg.getLimit()) && proto.Mysqlx.Crud.Limit.toObject(includeInstance, f),\n    limitExpr: (f = msg.getLimitExpr()) && proto.Mysqlx.Crud.LimitExpr.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.Delete}\n */\nproto.Mysqlx.Crud.Delete.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.Delete;\n  return proto.Mysqlx.Crud.Delete.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.Delete} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.Delete}\n */\nproto.Mysqlx.Crud.Delete.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.Mysqlx.Crud.Collection;\n      reader.readMessage(value,proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);\n      msg.setCollection(value);\n      break;\n    case 2:\n      var value = /** @type {!proto.Mysqlx.Crud.DataModel} */ (reader.readEnum());\n      msg.setDataModel(value);\n      break;\n    case 3:\n      var value = new mysqlx_expr_pb.Expr;\n      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);\n      msg.setCriteria(value);\n      break;\n    case 6:\n      var value = new mysqlx_datatypes_pb.Scalar;\n      reader.readMessage(value,mysqlx_datatypes_pb.Scalar.deserializeBinaryFromReader);\n      msg.addArgs(value);\n      break;\n    case 5:\n      var value = new proto.Mysqlx.Crud.Order;\n      reader.readMessage(value,proto.Mysqlx.Crud.Order.deserializeBinaryFromReader);\n      msg.addOrder(value);\n      break;\n    case 4:\n      var value = new proto.Mysqlx.Crud.Limit;\n      reader.readMessage(value,proto.Mysqlx.Crud.Limit.deserializeBinaryFromReader);\n      msg.setLimit(value);\n      break;\n    case 7:\n      var value = new proto.Mysqlx.Crud.LimitExpr;\n      reader.readMessage(value,proto.Mysqlx.Crud.LimitExpr.deserializeBinaryFromReader);\n      msg.setLimitExpr(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Crud.Delete.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.Delete.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.Delete} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.Delete.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCollection();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.Mysqlx.Crud.Collection.serializeBinaryToWriter\n    );\n  }\n  f = /** @type {!proto.Mysqlx.Crud.DataModel} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getCriteria();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      mysqlx_expr_pb.Expr.serializeBinaryToWriter\n    );\n  }\n  f = message.getArgsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      6,\n      f,\n      mysqlx_datatypes_pb.Scalar.serializeBinaryToWriter\n    );\n  }\n  f = message.getOrderList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      5,\n      f,\n      proto.Mysqlx.Crud.Order.serializeBinaryToWriter\n    );\n  }\n  f = message.getLimit();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.Mysqlx.Crud.Limit.serializeBinaryToWriter\n    );\n  }\n  f = message.getLimitExpr();\n  if (f != null) {\n    writer.writeMessage(\n      7,\n      f,\n      proto.Mysqlx.Crud.LimitExpr.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * required Collection collection = 1;\n * @return {!proto.Mysqlx.Crud.Collection}\n */\nproto.Mysqlx.Crud.Delete.prototype.getCollection = function() {\n  return /** @type{!proto.Mysqlx.Crud.Collection} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 1, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.Collection} value */\nproto.Mysqlx.Crud.Delete.prototype.setCollection = function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.Mysqlx.Crud.Delete.prototype.clearCollection = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Delete.prototype.hasCollection = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional DataModel data_model = 2;\n * @return {!proto.Mysqlx.Crud.DataModel}\n */\nproto.Mysqlx.Crud.Delete.prototype.getDataModel = function() {\n  return /** @type {!proto.Mysqlx.Crud.DataModel} */ (jspb.Message.getFieldWithDefault(this, 2, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.DataModel} value */\nproto.Mysqlx.Crud.Delete.prototype.setDataModel = function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.Mysqlx.Crud.Delete.prototype.clearDataModel = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Delete.prototype.hasDataModel = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional Mysqlx.Expr.Expr criteria = 3;\n * @return {?proto.Mysqlx.Expr.Expr}\n */\nproto.Mysqlx.Crud.Delete.prototype.getCriteria = function() {\n  return /** @type{?proto.Mysqlx.Expr.Expr} */ (\n    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 3));\n};\n\n\n/** @param {?proto.Mysqlx.Expr.Expr|undefined} value */\nproto.Mysqlx.Crud.Delete.prototype.setCriteria = function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\nproto.Mysqlx.Crud.Delete.prototype.clearCriteria = function() {\n  this.setCriteria(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Delete.prototype.hasCriteria = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * repeated Mysqlx.Datatypes.Scalar args = 6;\n * @return {!Array.<!proto.Mysqlx.Datatypes.Scalar>}\n */\nproto.Mysqlx.Crud.Delete.prototype.getArgsList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Datatypes.Scalar>} */ (\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_datatypes_pb.Scalar, 6));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Datatypes.Scalar>} value */\nproto.Mysqlx.Crud.Delete.prototype.setArgsList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 6, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Datatypes.Scalar=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Datatypes.Scalar}\n */\nproto.Mysqlx.Crud.Delete.prototype.addArgs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Mysqlx.Datatypes.Scalar, opt_index);\n};\n\n\nproto.Mysqlx.Crud.Delete.prototype.clearArgsList = function() {\n  this.setArgsList([]);\n};\n\n\n/**\n * repeated Order order = 5;\n * @return {!Array.<!proto.Mysqlx.Crud.Order>}\n */\nproto.Mysqlx.Crud.Delete.prototype.getOrderList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Crud.Order>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Order, 5));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Crud.Order>} value */\nproto.Mysqlx.Crud.Delete.prototype.setOrderList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 5, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Crud.Order=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Crud.Order}\n */\nproto.Mysqlx.Crud.Delete.prototype.addOrder = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Mysqlx.Crud.Order, opt_index);\n};\n\n\nproto.Mysqlx.Crud.Delete.prototype.clearOrderList = function() {\n  this.setOrderList([]);\n};\n\n\n/**\n * optional Limit limit = 4;\n * @return {?proto.Mysqlx.Crud.Limit}\n */\nproto.Mysqlx.Crud.Delete.prototype.getLimit = function() {\n  return /** @type{?proto.Mysqlx.Crud.Limit} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Limit, 4));\n};\n\n\n/** @param {?proto.Mysqlx.Crud.Limit|undefined} value */\nproto.Mysqlx.Crud.Delete.prototype.setLimit = function(value) {\n  jspb.Message.setWrapperField(this, 4, value);\n};\n\n\nproto.Mysqlx.Crud.Delete.prototype.clearLimit = function() {\n  this.setLimit(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Delete.prototype.hasLimit = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional LimitExpr limit_expr = 7;\n * @return {?proto.Mysqlx.Crud.LimitExpr}\n */\nproto.Mysqlx.Crud.Delete.prototype.getLimitExpr = function() {\n  return /** @type{?proto.Mysqlx.Crud.LimitExpr} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.LimitExpr, 7));\n};\n\n\n/** @param {?proto.Mysqlx.Crud.LimitExpr|undefined} value */\nproto.Mysqlx.Crud.Delete.prototype.setLimitExpr = function(value) {\n  jspb.Message.setWrapperField(this, 7, value);\n};\n\n\nproto.Mysqlx.Crud.Delete.prototype.clearLimitExpr = function() {\n  this.setLimitExpr(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.Delete.prototype.hasLimitExpr = function() {\n  return jspb.Message.getField(this, 7) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Crud.CreateView = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.CreateView.repeatedFields_, null);\n};\ngoog.inherits(proto.Mysqlx.Crud.CreateView, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.CreateView.displayName = 'proto.Mysqlx.Crud.CreateView';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Mysqlx.Crud.CreateView.repeatedFields_ = [6];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Crud.CreateView.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Crud.CreateView.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Crud.CreateView} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.CreateView.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),\n    definer: jspb.Message.getField(msg, 2),\n    algorithm: jspb.Message.getFieldWithDefault(msg, 3, 1),\n    security: jspb.Message.getFieldWithDefault(msg, 4, 2),\n    check: jspb.Message.getField(msg, 5),\n    columnList: jspb.Message.getRepeatedField(msg, 6),\n    stmt: (f = msg.getStmt()) && proto.Mysqlx.Crud.Find.toObject(includeInstance, f),\n    replaceExisting: jspb.Message.getFieldWithDefault(msg, 8, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.CreateView}\n */\nproto.Mysqlx.Crud.CreateView.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.CreateView;\n  return proto.Mysqlx.Crud.CreateView.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.CreateView} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.CreateView}\n */\nproto.Mysqlx.Crud.CreateView.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.Mysqlx.Crud.Collection;\n      reader.readMessage(value,proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);\n      msg.setCollection(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setDefiner(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */ (reader.readEnum());\n      msg.setAlgorithm(value);\n      break;\n    case 4:\n      var value = /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */ (reader.readEnum());\n      msg.setSecurity(value);\n      break;\n    case 5:\n      var value = /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */ (reader.readEnum());\n      msg.setCheck(value);\n      break;\n    case 6:\n      var value = /** @type {string} */ (reader.readString());\n      msg.addColumn(value);\n      break;\n    case 7:\n      var value = new proto.Mysqlx.Crud.Find;\n      reader.readMessage(value,proto.Mysqlx.Crud.Find.deserializeBinaryFromReader);\n      msg.setStmt(value);\n      break;\n    case 8:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setReplaceExisting(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Crud.CreateView.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.CreateView.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.CreateView} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.CreateView.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCollection();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.Mysqlx.Crud.Collection.serializeBinaryToWriter\n    );\n  }\n  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */ (jspb.Message.getField(message, 3));\n  if (f != null) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f = /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */ (jspb.Message.getField(message, 4));\n  if (f != null) {\n    writer.writeEnum(\n      4,\n      f\n    );\n  }\n  f = /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */ (jspb.Message.getField(message, 5));\n  if (f != null) {\n    writer.writeEnum(\n      5,\n      f\n    );\n  }\n  f = message.getColumnList();\n  if (f.length > 0) {\n    writer.writeRepeatedString(\n      6,\n      f\n    );\n  }\n  f = message.getStmt();\n  if (f != null) {\n    writer.writeMessage(\n      7,\n      f,\n      proto.Mysqlx.Crud.Find.serializeBinaryToWriter\n    );\n  }\n  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));\n  if (f != null) {\n    writer.writeBool(\n      8,\n      f\n    );\n  }\n};\n\n\n/**\n * required Collection collection = 1;\n * @return {!proto.Mysqlx.Crud.Collection}\n */\nproto.Mysqlx.Crud.CreateView.prototype.getCollection = function() {\n  return /** @type{!proto.Mysqlx.Crud.Collection} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 1, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.Collection} value */\nproto.Mysqlx.Crud.CreateView.prototype.setCollection = function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.Mysqlx.Crud.CreateView.prototype.clearCollection = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.CreateView.prototype.hasCollection = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional string definer = 2;\n * @return {string}\n */\nproto.Mysqlx.Crud.CreateView.prototype.getDefiner = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Mysqlx.Crud.CreateView.prototype.setDefiner = function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.Mysqlx.Crud.CreateView.prototype.clearDefiner = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.CreateView.prototype.hasDefiner = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional ViewAlgorithm algorithm = 3;\n * @return {!proto.Mysqlx.Crud.ViewAlgorithm}\n */\nproto.Mysqlx.Crud.CreateView.prototype.getAlgorithm = function() {\n  return /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */ (jspb.Message.getFieldWithDefault(this, 3, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.ViewAlgorithm} value */\nproto.Mysqlx.Crud.CreateView.prototype.setAlgorithm = function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.Mysqlx.Crud.CreateView.prototype.clearAlgorithm = function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.CreateView.prototype.hasAlgorithm = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional ViewSqlSecurity security = 4;\n * @return {!proto.Mysqlx.Crud.ViewSqlSecurity}\n */\nproto.Mysqlx.Crud.CreateView.prototype.getSecurity = function() {\n  return /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */ (jspb.Message.getFieldWithDefault(this, 4, 2));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.ViewSqlSecurity} value */\nproto.Mysqlx.Crud.CreateView.prototype.setSecurity = function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.Mysqlx.Crud.CreateView.prototype.clearSecurity = function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.CreateView.prototype.hasSecurity = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional ViewCheckOption check = 5;\n * @return {!proto.Mysqlx.Crud.ViewCheckOption}\n */\nproto.Mysqlx.Crud.CreateView.prototype.getCheck = function() {\n  return /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */ (jspb.Message.getFieldWithDefault(this, 5, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.ViewCheckOption} value */\nproto.Mysqlx.Crud.CreateView.prototype.setCheck = function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.Mysqlx.Crud.CreateView.prototype.clearCheck = function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.CreateView.prototype.hasCheck = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * repeated string column = 6;\n * @return {!Array.<string>}\n */\nproto.Mysqlx.Crud.CreateView.prototype.getColumnList = function() {\n  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 6));\n};\n\n\n/** @param {!Array.<string>} value */\nproto.Mysqlx.Crud.CreateView.prototype.setColumnList = function(value) {\n  jspb.Message.setField(this, 6, value || []);\n};\n\n\n/**\n * @param {!string} value\n * @param {number=} opt_index\n */\nproto.Mysqlx.Crud.CreateView.prototype.addColumn = function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 6, value, opt_index);\n};\n\n\nproto.Mysqlx.Crud.CreateView.prototype.clearColumnList = function() {\n  this.setColumnList([]);\n};\n\n\n/**\n * required Find stmt = 7;\n * @return {!proto.Mysqlx.Crud.Find}\n */\nproto.Mysqlx.Crud.CreateView.prototype.getStmt = function() {\n  return /** @type{!proto.Mysqlx.Crud.Find} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Find, 7, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.Find} value */\nproto.Mysqlx.Crud.CreateView.prototype.setStmt = function(value) {\n  jspb.Message.setWrapperField(this, 7, value);\n};\n\n\nproto.Mysqlx.Crud.CreateView.prototype.clearStmt = function() {\n  jspb.Message.setField(this, 7, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.CreateView.prototype.hasStmt = function() {\n  return jspb.Message.getField(this, 7) != null;\n};\n\n\n/**\n * optional bool replace_existing = 8;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val === true/false} in those cases.\n * @return {boolean}\n */\nproto.Mysqlx.Crud.CreateView.prototype.getReplaceExisting = function() {\n  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));\n};\n\n\n/** @param {boolean} value */\nproto.Mysqlx.Crud.CreateView.prototype.setReplaceExisting = function(value) {\n  jspb.Message.setField(this, 8, value);\n};\n\n\nproto.Mysqlx.Crud.CreateView.prototype.clearReplaceExisting = function() {\n  jspb.Message.setField(this, 8, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.CreateView.prototype.hasReplaceExisting = function() {\n  return jspb.Message.getField(this, 8) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Crud.ModifyView = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.ModifyView.repeatedFields_, null);\n};\ngoog.inherits(proto.Mysqlx.Crud.ModifyView, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.ModifyView.displayName = 'proto.Mysqlx.Crud.ModifyView';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Mysqlx.Crud.ModifyView.repeatedFields_ = [6];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Crud.ModifyView.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Crud.ModifyView.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Crud.ModifyView} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.ModifyView.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),\n    definer: jspb.Message.getField(msg, 2),\n    algorithm: jspb.Message.getField(msg, 3),\n    security: jspb.Message.getField(msg, 4),\n    check: jspb.Message.getField(msg, 5),\n    columnList: jspb.Message.getRepeatedField(msg, 6),\n    stmt: (f = msg.getStmt()) && proto.Mysqlx.Crud.Find.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.ModifyView}\n */\nproto.Mysqlx.Crud.ModifyView.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.ModifyView;\n  return proto.Mysqlx.Crud.ModifyView.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.ModifyView} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.ModifyView}\n */\nproto.Mysqlx.Crud.ModifyView.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.Mysqlx.Crud.Collection;\n      reader.readMessage(value,proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);\n      msg.setCollection(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setDefiner(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */ (reader.readEnum());\n      msg.setAlgorithm(value);\n      break;\n    case 4:\n      var value = /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */ (reader.readEnum());\n      msg.setSecurity(value);\n      break;\n    case 5:\n      var value = /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */ (reader.readEnum());\n      msg.setCheck(value);\n      break;\n    case 6:\n      var value = /** @type {string} */ (reader.readString());\n      msg.addColumn(value);\n      break;\n    case 7:\n      var value = new proto.Mysqlx.Crud.Find;\n      reader.readMessage(value,proto.Mysqlx.Crud.Find.deserializeBinaryFromReader);\n      msg.setStmt(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Crud.ModifyView.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.ModifyView.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.ModifyView} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.ModifyView.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCollection();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.Mysqlx.Crud.Collection.serializeBinaryToWriter\n    );\n  }\n  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */ (jspb.Message.getField(message, 3));\n  if (f != null) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f = /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */ (jspb.Message.getField(message, 4));\n  if (f != null) {\n    writer.writeEnum(\n      4,\n      f\n    );\n  }\n  f = /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */ (jspb.Message.getField(message, 5));\n  if (f != null) {\n    writer.writeEnum(\n      5,\n      f\n    );\n  }\n  f = message.getColumnList();\n  if (f.length > 0) {\n    writer.writeRepeatedString(\n      6,\n      f\n    );\n  }\n  f = message.getStmt();\n  if (f != null) {\n    writer.writeMessage(\n      7,\n      f,\n      proto.Mysqlx.Crud.Find.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * required Collection collection = 1;\n * @return {!proto.Mysqlx.Crud.Collection}\n */\nproto.Mysqlx.Crud.ModifyView.prototype.getCollection = function() {\n  return /** @type{!proto.Mysqlx.Crud.Collection} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 1, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.Collection} value */\nproto.Mysqlx.Crud.ModifyView.prototype.setCollection = function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.clearCollection = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.ModifyView.prototype.hasCollection = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional string definer = 2;\n * @return {string}\n */\nproto.Mysqlx.Crud.ModifyView.prototype.getDefiner = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Mysqlx.Crud.ModifyView.prototype.setDefiner = function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.clearDefiner = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.ModifyView.prototype.hasDefiner = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional ViewAlgorithm algorithm = 3;\n * @return {!proto.Mysqlx.Crud.ViewAlgorithm}\n */\nproto.Mysqlx.Crud.ModifyView.prototype.getAlgorithm = function() {\n  return /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */ (jspb.Message.getFieldWithDefault(this, 3, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.ViewAlgorithm} value */\nproto.Mysqlx.Crud.ModifyView.prototype.setAlgorithm = function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.clearAlgorithm = function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.ModifyView.prototype.hasAlgorithm = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional ViewSqlSecurity security = 4;\n * @return {!proto.Mysqlx.Crud.ViewSqlSecurity}\n */\nproto.Mysqlx.Crud.ModifyView.prototype.getSecurity = function() {\n  return /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */ (jspb.Message.getFieldWithDefault(this, 4, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.ViewSqlSecurity} value */\nproto.Mysqlx.Crud.ModifyView.prototype.setSecurity = function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.clearSecurity = function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.ModifyView.prototype.hasSecurity = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional ViewCheckOption check = 5;\n * @return {!proto.Mysqlx.Crud.ViewCheckOption}\n */\nproto.Mysqlx.Crud.ModifyView.prototype.getCheck = function() {\n  return /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */ (jspb.Message.getFieldWithDefault(this, 5, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.ViewCheckOption} value */\nproto.Mysqlx.Crud.ModifyView.prototype.setCheck = function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.clearCheck = function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.ModifyView.prototype.hasCheck = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * repeated string column = 6;\n * @return {!Array.<string>}\n */\nproto.Mysqlx.Crud.ModifyView.prototype.getColumnList = function() {\n  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 6));\n};\n\n\n/** @param {!Array.<string>} value */\nproto.Mysqlx.Crud.ModifyView.prototype.setColumnList = function(value) {\n  jspb.Message.setField(this, 6, value || []);\n};\n\n\n/**\n * @param {!string} value\n * @param {number=} opt_index\n */\nproto.Mysqlx.Crud.ModifyView.prototype.addColumn = function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 6, value, opt_index);\n};\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.clearColumnList = function() {\n  this.setColumnList([]);\n};\n\n\n/**\n * optional Find stmt = 7;\n * @return {?proto.Mysqlx.Crud.Find}\n */\nproto.Mysqlx.Crud.ModifyView.prototype.getStmt = function() {\n  return /** @type{?proto.Mysqlx.Crud.Find} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Find, 7));\n};\n\n\n/** @param {?proto.Mysqlx.Crud.Find|undefined} value */\nproto.Mysqlx.Crud.ModifyView.prototype.setStmt = function(value) {\n  jspb.Message.setWrapperField(this, 7, value);\n};\n\n\nproto.Mysqlx.Crud.ModifyView.prototype.clearStmt = function() {\n  this.setStmt(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.ModifyView.prototype.hasStmt = function() {\n  return jspb.Message.getField(this, 7) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Crud.DropView = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Crud.DropView, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Crud.DropView.displayName = 'proto.Mysqlx.Crud.DropView';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Crud.DropView.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Crud.DropView.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Crud.DropView} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.DropView.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),\n    ifExists: jspb.Message.getFieldWithDefault(msg, 2, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Crud.DropView}\n */\nproto.Mysqlx.Crud.DropView.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Crud.DropView;\n  return proto.Mysqlx.Crud.DropView.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Crud.DropView} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Crud.DropView}\n */\nproto.Mysqlx.Crud.DropView.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.Mysqlx.Crud.Collection;\n      reader.readMessage(value,proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);\n      msg.setCollection(value);\n      break;\n    case 2:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setIfExists(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Crud.DropView.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Crud.DropView.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Crud.DropView} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Crud.DropView.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCollection();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.Mysqlx.Crud.Collection.serializeBinaryToWriter\n    );\n  }\n  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeBool(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * required Collection collection = 1;\n * @return {!proto.Mysqlx.Crud.Collection}\n */\nproto.Mysqlx.Crud.DropView.prototype.getCollection = function() {\n  return /** @type{!proto.Mysqlx.Crud.Collection} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 1, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Crud.Collection} value */\nproto.Mysqlx.Crud.DropView.prototype.setCollection = function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.Mysqlx.Crud.DropView.prototype.clearCollection = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.DropView.prototype.hasCollection = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional bool if_exists = 2;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val === true/false} in those cases.\n * @return {boolean}\n */\nproto.Mysqlx.Crud.DropView.prototype.getIfExists = function() {\n  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));\n};\n\n\n/** @param {boolean} value */\nproto.Mysqlx.Crud.DropView.prototype.setIfExists = function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.Mysqlx.Crud.DropView.prototype.clearIfExists = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Crud.DropView.prototype.hasIfExists = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * @enum {number}\n */\nproto.Mysqlx.Crud.DataModel = {\n  DOCUMENT: 1,\n  TABLE: 2\n};\n\n/**\n * @enum {number}\n */\nproto.Mysqlx.Crud.ViewAlgorithm = {\n  UNDEFINED: 1,\n  MERGE: 2,\n  TEMPTABLE: 3\n};\n\n/**\n * @enum {number}\n */\nproto.Mysqlx.Crud.ViewSqlSecurity = {\n  INVOKER: 1,\n  DEFINER: 2\n};\n\n/**\n * @enum {number}\n */\nproto.Mysqlx.Crud.ViewCheckOption = {\n  LOCAL: 1,\n  CASCADED: 2\n};\n\ngoog.object.extend(exports, proto.Mysqlx.Crud);\n"]},"metadata":{},"sourceType":"script"}