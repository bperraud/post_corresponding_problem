{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst Pa = require('parsimmon');\n\nconst ignoreCase = str => Pa((input, i) => {\n  const j = i + str.length;\n  const head = input.slice(i, j);\n\n  if (head.toLowerCase() === str.toLowerCase()) {\n    return Pa.makeSuccess(j, head);\n  } // wrap the expected value in single-quotes to fit the underlying Parsimmon exception format\n\n\n  return Pa.makeFailure(i, `'${str.toLowerCase()}'`);\n});\n\nmodule.exports = options => ({\n  AND() {\n    return Pa.alt(Pa.string('&&'), ignoreCase('AND')).result('&&');\n  },\n\n  AS() {\n    return ignoreCase('AS');\n  },\n\n  ASC() {\n    return ignoreCase('ASC').result(1);\n  },\n\n  BETWEEN() {\n    return ignoreCase('BETWEEN').result('between');\n  },\n\n  BINARY() {\n    return ignoreCase('BINARY').result('BINARY');\n  },\n\n  CAST() {\n    return ignoreCase('CAST').result('cast');\n  },\n\n  CHAR() {\n    return ignoreCase('CHAR').result('CHAR');\n  },\n\n  DATE() {\n    return ignoreCase('DATE').result('DATE');\n  },\n\n  DATETIME() {\n    return ignoreCase('DATETIME').result('DATETIME');\n  },\n\n  DECIMAL() {\n    return ignoreCase('DECIMAL').result('DECIMAL');\n  },\n\n  DESC() {\n    return ignoreCase('DESC').result(2);\n  },\n\n  DIV() {\n    return ignoreCase('DIV').result('div');\n  },\n\n  ESCAPE() {\n    return ignoreCase('ESCAPE').result('escape');\n  },\n\n  FALSE() {\n    return ignoreCase('FALSE').result(false);\n  },\n\n  IN() {\n    return ignoreCase('IN').result('in');\n  },\n\n  INTEGER() {\n    return ignoreCase('INTEGER').result('INTEGER');\n  },\n\n  INTERVAL() {\n    return ignoreCase('INTERVAL');\n  },\n\n  IS() {\n    return ignoreCase('IS').result('is');\n  },\n\n  JSON() {\n    return ignoreCase('JSON').result('JSON');\n  },\n\n  LIKE() {\n    return ignoreCase('LIKE').result('like');\n  },\n\n  NOT() {\n    return ignoreCase('NOT').result('not');\n  },\n\n  NULL() {\n    return ignoreCase('NULL').result(null);\n  },\n\n  OR() {\n    return Pa.alt(Pa.string('||'), ignoreCase('OR')).result('||');\n  },\n\n  OVERLAPS() {\n    return ignoreCase('OVERLAPS').result('overlaps');\n  },\n\n  REGEXP() {\n    return ignoreCase('REGEXP').result('regexp');\n  },\n\n  SIGNED() {\n    return ignoreCase('SIGNED').result('SIGNED');\n  },\n\n  TIME() {\n    return ignoreCase('TIME').result('TIME');\n  },\n\n  TRUE() {\n    return ignoreCase('TRUE').result(true);\n  },\n\n  UNSIGNED() {\n    return ignoreCase('UNSIGNED').result('UNSIGNED');\n  }\n\n});","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/ExprParser/lib/grammar/keywords.js"],"names":["Pa","require","ignoreCase","str","input","i","j","length","head","slice","toLowerCase","makeSuccess","makeFailure","module","exports","options","AND","alt","string","result","AS","ASC","BETWEEN","BINARY","CAST","CHAR","DATE","DATETIME","DECIMAL","DESC","DIV","ESCAPE","FALSE","IN","INTEGER","INTERVAL","IS","JSON","LIKE","NOT","NULL","OR","OVERLAPS","REGEXP","SIGNED","TIME","TRUE","UNSIGNED"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst Pa = require('parsimmon');\n\nconst ignoreCase = str => Pa((input, i) => {\n    const j = i + str.length;\n    const head = input.slice(i, j);\n\n    if (head.toLowerCase() === str.toLowerCase()) {\n        return Pa.makeSuccess(j, head);\n    }\n\n    // wrap the expected value in single-quotes to fit the underlying Parsimmon exception format\n    return Pa.makeFailure(i, `'${str.toLowerCase()}'`);\n});\n\nmodule.exports = options => ({\n    AND () {\n        return Pa.alt(Pa.string('&&'), ignoreCase('AND')).result('&&');\n    },\n\n    AS () {\n        return ignoreCase('AS');\n    },\n\n    ASC () {\n        return ignoreCase('ASC').result(1);\n    },\n\n    BETWEEN () {\n        return ignoreCase('BETWEEN').result('between');\n    },\n\n    BINARY () {\n        return ignoreCase('BINARY').result('BINARY');\n    },\n\n    CAST () {\n        return ignoreCase('CAST').result('cast');\n    },\n\n    CHAR () {\n        return ignoreCase('CHAR').result('CHAR');\n    },\n\n    DATE () {\n        return ignoreCase('DATE').result('DATE');\n    },\n\n    DATETIME () {\n        return ignoreCase('DATETIME').result('DATETIME');\n    },\n\n    DECIMAL () {\n        return ignoreCase('DECIMAL').result('DECIMAL');\n    },\n\n    DESC () {\n        return ignoreCase('DESC').result(2);\n    },\n\n    DIV () {\n        return ignoreCase('DIV').result('div');\n    },\n\n    ESCAPE () {\n        return ignoreCase('ESCAPE').result('escape');\n    },\n\n    FALSE () {\n        return ignoreCase('FALSE').result(false);\n    },\n\n    IN () {\n        return ignoreCase('IN').result('in');\n    },\n\n    INTEGER () {\n        return ignoreCase('INTEGER').result('INTEGER');\n    },\n\n    INTERVAL () {\n        return ignoreCase('INTERVAL');\n    },\n\n    IS () {\n        return ignoreCase('IS').result('is');\n    },\n\n    JSON () {\n        return ignoreCase('JSON').result('JSON');\n    },\n\n    LIKE () {\n        return ignoreCase('LIKE').result('like');\n    },\n\n    NOT () {\n        return ignoreCase('NOT').result('not');\n    },\n\n    NULL () {\n        return ignoreCase('NULL').result(null);\n    },\n\n    OR () {\n        return Pa.alt(Pa.string('||'), ignoreCase('OR')).result('||');\n    },\n\n    OVERLAPS () {\n        return ignoreCase('OVERLAPS').result('overlaps');\n    },\n\n    REGEXP () {\n        return ignoreCase('REGEXP').result('regexp');\n    },\n\n    SIGNED () {\n        return ignoreCase('SIGNED').result('SIGNED');\n    },\n\n    TIME () {\n        return ignoreCase('TIME').result('TIME');\n    },\n\n    TRUE () {\n        return ignoreCase('TRUE').result(true);\n    },\n\n    UNSIGNED () {\n        return ignoreCase('UNSIGNED').result('UNSIGNED');\n    }\n});\n"]},"metadata":{},"sourceType":"script"}