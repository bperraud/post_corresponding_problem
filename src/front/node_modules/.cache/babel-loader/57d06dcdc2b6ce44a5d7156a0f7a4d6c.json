{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst InsertStub = require('../../../Stubs/mysqlx_crud_pb').Insert;\n\nconst collection = require('./Collection');\n\nconst column = require('./Column');\n\nconst list = require('../../Traits/List');\n\nconst polyglot = require('../../Traits/Polyglot');\n\nconst scalar = require('../Datatypes/Scalar');\n\nconst serializable = require('../../Traits/Serializable');\n\nconst typedRow = require('./TypedRow');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Insert\n * @param {proto.Mysqlx.Crud.Insert} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Insert}\n */\n\n\nfunction Insert(proto) {\n  return Object.assign({}, polyglot(proto), serializable(proto), wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Crud.Insert#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        collection: collection(proto.getCollection()).toJSON(),\n        data_model: this.getDataModel(),\n        projection: list(proto.getProjectionList().map(c => column(c))).toJSON(),\n        row: list(proto.getRowList().map(row => typedRow(row))).toJSON(),\n        args: list(proto.getArgsList().map(arg => scalar(arg))).toJSON(),\n        upsert: proto.getUpsert()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Insert instance for a given statement.\n * @param {module:CollectionAdd|module:TableInsert} statement\n * @returns {module:adapters.Mysqlx.Crud.Insert}\n */\n\n\nInsert.create = function (statement) {\n  const proto = new InsertStub();\n  proto.setCollection(collection.create(statement.getTableName(), statement.getSchema()).valueOf());\n  proto.setDataModel(statement.getCategory());\n  proto.setProjectionList(statement.getColumns().map(c => column.create(c).valueOf()));\n  proto.setRowList(statement.getItems().map(fields => typedRow.create(fields).valueOf()));\n  proto.setUpsert(statement.isUpsert());\n  return Insert(proto);\n};\n\nmodule.exports = Insert;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Crud/Insert.js"],"names":["InsertStub","require","Insert","collection","column","list","polyglot","scalar","serializable","typedRow","wraps","proto","Object","assign","toJSON","getCollection","data_model","getDataModel","projection","getProjectionList","map","c","row","getRowList","args","getArgsList","arg","upsert","getUpsert","create","statement","setCollection","getTableName","getSchema","valueOf","setDataModel","getCategory","setProjectionList","getColumns","setRowList","getItems","fields","setUpsert","isUpsert","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,+BAAD,CAAP,CAAyCC,MAA5D;;AACA,MAAMC,UAAU,GAAGF,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,mBAAD,CAApB;;AACA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,uBAAD,CAAxB;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,qBAAD,CAAtB;;AACA,MAAMO,YAAY,GAAGP,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAMQ,QAAQ,GAAGR,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMS,KAAK,GAAGT,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAiBS,KAAjB,EAAwB;AACpB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,QAAQ,CAACK,KAAD,CAA1B,EAAmCH,YAAY,CAACG,KAAD,CAA/C,EAAwDD,KAAK,CAACC,KAAD,CAA7D,EAAsE;AACzE;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAO;AACHX,QAAAA,UAAU,EAAEA,UAAU,CAACQ,KAAK,CAACI,aAAN,EAAD,CAAV,CAAkCD,MAAlC,EADT;AAEHE,QAAAA,UAAU,EAAE,KAAKC,YAAL,EAFT;AAGHC,QAAAA,UAAU,EAAEb,IAAI,CAACM,KAAK,CAACQ,iBAAN,GAA0BC,GAA1B,CAA8BC,CAAC,IAAIjB,MAAM,CAACiB,CAAD,CAAzC,CAAD,CAAJ,CAAoDP,MAApD,EAHT;AAIHQ,QAAAA,GAAG,EAAEjB,IAAI,CAACM,KAAK,CAACY,UAAN,GAAmBH,GAAnB,CAAuBE,GAAG,IAAIb,QAAQ,CAACa,GAAD,CAAtC,CAAD,CAAJ,CAAmDR,MAAnD,EAJF;AAKHU,QAAAA,IAAI,EAAEnB,IAAI,CAACM,KAAK,CAACc,WAAN,GAAoBL,GAApB,CAAwBM,GAAG,IAAInB,MAAM,CAACmB,GAAD,CAArC,CAAD,CAAJ,CAAkDZ,MAAlD,EALH;AAMHa,QAAAA,MAAM,EAAEhB,KAAK,CAACiB,SAAN;AANL,OAAP;AAQH;;AAhBwE,GAAtE,CAAP;AAkBH;AAED;AACA;AACA;AACA;AACA;;;AACA1B,MAAM,CAAC2B,MAAP,GAAgB,UAAUC,SAAV,EAAqB;AACjC,QAAMnB,KAAK,GAAG,IAAIX,UAAJ,EAAd;AAEAW,EAAAA,KAAK,CAACoB,aAAN,CAAoB5B,UAAU,CAAC0B,MAAX,CAAkBC,SAAS,CAACE,YAAV,EAAlB,EAA4CF,SAAS,CAACG,SAAV,EAA5C,EAAmEC,OAAnE,EAApB;AACAvB,EAAAA,KAAK,CAACwB,YAAN,CAAmBL,SAAS,CAACM,WAAV,EAAnB;AACAzB,EAAAA,KAAK,CAAC0B,iBAAN,CAAwBP,SAAS,CAACQ,UAAV,GAAuBlB,GAAvB,CAA2BC,CAAC,IAAIjB,MAAM,CAACyB,MAAP,CAAcR,CAAd,EAAiBa,OAAjB,EAAhC,CAAxB;AACAvB,EAAAA,KAAK,CAAC4B,UAAN,CAAiBT,SAAS,CAACU,QAAV,GAAqBpB,GAArB,CAAyBqB,MAAM,IAAIhC,QAAQ,CAACoB,MAAT,CAAgBY,MAAhB,EAAwBP,OAAxB,EAAnC,CAAjB;AACAvB,EAAAA,KAAK,CAAC+B,SAAN,CAAgBZ,SAAS,CAACa,QAAV,EAAhB;AAEA,SAAOzC,MAAM,CAACS,KAAD,CAAb;AACH,CAVD;;AAYAiC,MAAM,CAACC,OAAP,GAAiB3C,MAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst InsertStub = require('../../../Stubs/mysqlx_crud_pb').Insert;\nconst collection = require('./Collection');\nconst column = require('./Column');\nconst list = require('../../Traits/List');\nconst polyglot = require('../../Traits/Polyglot');\nconst scalar = require('../Datatypes/Scalar');\nconst serializable = require('../../Traits/Serializable');\nconst typedRow = require('./TypedRow');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Insert\n * @param {proto.Mysqlx.Crud.Insert} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Insert}\n */\nfunction Insert (proto) {\n    return Object.assign({}, polyglot(proto), serializable(proto), wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Crud.Insert#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                collection: collection(proto.getCollection()).toJSON(),\n                data_model: this.getDataModel(),\n                projection: list(proto.getProjectionList().map(c => column(c))).toJSON(),\n                row: list(proto.getRowList().map(row => typedRow(row))).toJSON(),\n                args: list(proto.getArgsList().map(arg => scalar(arg))).toJSON(),\n                upsert: proto.getUpsert()\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Insert instance for a given statement.\n * @param {module:CollectionAdd|module:TableInsert} statement\n * @returns {module:adapters.Mysqlx.Crud.Insert}\n */\nInsert.create = function (statement) {\n    const proto = new InsertStub();\n\n    proto.setCollection(collection.create(statement.getTableName(), statement.getSchema()).valueOf());\n    proto.setDataModel(statement.getCategory());\n    proto.setProjectionList(statement.getColumns().map(c => column.create(c).valueOf()));\n    proto.setRowList(statement.getItems().map(fields => typedRow.create(fields).valueOf()));\n    proto.setUpsert(statement.isUpsert());\n\n    return Insert(proto);\n};\n\nmodule.exports = Insert;\n"]},"metadata":{},"sourceType":"script"}