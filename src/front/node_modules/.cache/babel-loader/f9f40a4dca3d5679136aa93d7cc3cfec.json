{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst parseFlexibleParamList = require('./Util/parseFlexibleParamList');\n\nconst preparing = require('./Preparing');\n/**\n * Grouping mixin.\n * @mixin\n * @alias Grouping\n * @param {Object} state - grouping properties\n * @returns {Grouping}\n */\n\n\nfunction Grouping(state) {\n  state = Object.assign({\n    groupings: [],\n    preparable: preparing()\n  }, state);\n  return {\n    /**\n     * Retrieve the query grouping criteria.\n     * @function\n     * @private\n     * @name Grouping#getGroupingCriteria\n     * @returns {string} The criteria expression string.\n     */\n    getGroupingCriteria() {\n      return state.criteria;\n    },\n\n    /**\n     * Retrieve the list of columns to group.\n     * @function\n     * @private\n     * @name Grouping#getGroupings\n     * @returns {string[]} The list of column names.\n     */\n    getGroupings() {\n      return state.groupings;\n    },\n\n    /**\n     * Add <code>GROUP BY</code> clause (set the grouping options of the result set).\n     * @function\n     * @name Grouping#groupBy\n     * @param {...string|string[]} [GroupByExprStr] - columns to group by\n     * @throws {Error} When an expression is invalid.\n     * @example\n     * // arguments as columns group by\n     * const query = table.select('foo', 'bar').groupBy('foo asc', 'bar desc')\n     *\n     * // array of columns to group by\n     * const query = table.select('foo', 'bar').groupBy(['foo asc', 'bar desc'])\n     * @returns {Grouping} The query instance.\n     */\n    groupBy() {\n      state.preparable.forceRestart();\n      return this.setGroupings(parseFlexibleParamList(Array.prototype.slice.call(arguments)));\n    },\n\n    /**\n     * Determine if the grouping criteria expression needs to be parsed.\n     * @function\n     * @private\n     * @name Grouping#hasBaseGroupingCriteria\n     * @returns {boolean}\n     */\n    hasBaseGroupingCriteria() {\n      const criteria = (state.criteria || '').toString().trim().toLowerCase();\n      return !criteria.length || criteria === 'true';\n    },\n\n    /**\n     * Add <code>HAVING</code> clause.\n     * @function\n     * @name Grouping#having\n     * @param {SearchConditionStr} expr - filtering criteria\n     * @returns {Grouping} The query instance.\n     */\n    having(criteria) {\n      state.preparable.forceRestart();\n      return this.setGroupingCriteria(criteria);\n    },\n\n    /**\n     * Set the query grouping criteria.\n     * @function\n     * @private\n     * @name Grouping#setGroupingCriteria\n     * @param {string} criteria - expression string\n     * @returns {Grouping} The query instance.\n     */\n    setGroupingCriteria(criteria) {\n      state.criteria = criteria;\n      return this;\n    },\n\n    /**\n     * Set the list of columns to group.\n     * @function\n     * @private\n     * @name Grouping#setGroupings\n     * @param {string[]} groupings - list of column names\n     * @returns {Grouping} The query instance.\n     */\n    setGroupings(groupings) {\n      state.groupings = groupings;\n      return this;\n    }\n\n  };\n}\n\nmodule.exports = Grouping;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/Grouping.js"],"names":["parseFlexibleParamList","require","preparing","Grouping","state","Object","assign","groupings","preparable","getGroupingCriteria","criteria","getGroupings","groupBy","forceRestart","setGroupings","Array","prototype","slice","call","arguments","hasBaseGroupingCriteria","toString","trim","toLowerCase","length","having","setGroupingCriteria","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,+BAAD,CAAtC;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,QAAT,CAAmBC,KAAnB,EAA0B;AACtBA,EAAAA,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,SAAS,EAAE,EAAb;AAAiBC,IAAAA,UAAU,EAAEN,SAAS;AAAtC,GAAd,EAA0DE,KAA1D,CAAR;AAEA,SAAO;AACH;AACR;AACA;AACA;AACA;AACA;AACA;AACQK,IAAAA,mBAAmB,GAAI;AACnB,aAAOL,KAAK,CAACM,QAAb;AACH,KAVE;;AAYH;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,YAAY,GAAI;AACZ,aAAOP,KAAK,CAACG,SAAb;AACH,KArBE;;AAuBH;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQK,IAAAA,OAAO,GAAI;AACPR,MAAAA,KAAK,CAACI,UAAN,CAAiBK,YAAjB;AAEA,aAAO,KAAKC,YAAL,CAAkBd,sBAAsB,CAACe,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAD,CAAxC,CAAP;AACH,KAzCE;;AA2CH;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,uBAAuB,GAAI;AACvB,YAAMV,QAAQ,GAAG,CAACN,KAAK,CAACM,QAAN,IAAkB,EAAnB,EAAuBW,QAAvB,GAAkCC,IAAlC,GAAyCC,WAAzC,EAAjB;AAEA,aAAO,CAACb,QAAQ,CAACc,MAAV,IAAoBd,QAAQ,KAAK,MAAxC;AACH,KAtDE;;AAwDH;AACR;AACA;AACA;AACA;AACA;AACA;AACQe,IAAAA,MAAM,CAAEf,QAAF,EAAY;AACdN,MAAAA,KAAK,CAACI,UAAN,CAAiBK,YAAjB;AAEA,aAAO,KAAKa,mBAAL,CAAyBhB,QAAzB,CAAP;AACH,KAnEE;;AAqEH;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQgB,IAAAA,mBAAmB,CAAEhB,QAAF,EAAY;AAC3BN,MAAAA,KAAK,CAACM,QAAN,GAAiBA,QAAjB;AAEA,aAAO,IAAP;AACH,KAjFE;;AAmFH;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQI,IAAAA,YAAY,CAAEP,SAAF,EAAa;AACrBH,MAAAA,KAAK,CAACG,SAAN,GAAkBA,SAAlB;AAEA,aAAO,IAAP;AACH;;AA/FE,GAAP;AAiGH;;AAEDoB,MAAM,CAACC,OAAP,GAAiBzB,QAAjB","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst parseFlexibleParamList = require('./Util/parseFlexibleParamList');\nconst preparing = require('./Preparing');\n\n/**\n * Grouping mixin.\n * @mixin\n * @alias Grouping\n * @param {Object} state - grouping properties\n * @returns {Grouping}\n */\nfunction Grouping (state) {\n    state = Object.assign({ groupings: [], preparable: preparing() }, state);\n\n    return {\n        /**\n         * Retrieve the query grouping criteria.\n         * @function\n         * @private\n         * @name Grouping#getGroupingCriteria\n         * @returns {string} The criteria expression string.\n         */\n        getGroupingCriteria () {\n            return state.criteria;\n        },\n\n        /**\n         * Retrieve the list of columns to group.\n         * @function\n         * @private\n         * @name Grouping#getGroupings\n         * @returns {string[]} The list of column names.\n         */\n        getGroupings () {\n            return state.groupings;\n        },\n\n        /**\n         * Add <code>GROUP BY</code> clause (set the grouping options of the result set).\n         * @function\n         * @name Grouping#groupBy\n         * @param {...string|string[]} [GroupByExprStr] - columns to group by\n         * @throws {Error} When an expression is invalid.\n         * @example\n         * // arguments as columns group by\n         * const query = table.select('foo', 'bar').groupBy('foo asc', 'bar desc')\n         *\n         * // array of columns to group by\n         * const query = table.select('foo', 'bar').groupBy(['foo asc', 'bar desc'])\n         * @returns {Grouping} The query instance.\n         */\n        groupBy () {\n            state.preparable.forceRestart();\n\n            return this.setGroupings(parseFlexibleParamList(Array.prototype.slice.call(arguments)));\n        },\n\n        /**\n         * Determine if the grouping criteria expression needs to be parsed.\n         * @function\n         * @private\n         * @name Grouping#hasBaseGroupingCriteria\n         * @returns {boolean}\n         */\n        hasBaseGroupingCriteria () {\n            const criteria = (state.criteria || '').toString().trim().toLowerCase();\n\n            return !criteria.length || criteria === 'true';\n        },\n\n        /**\n         * Add <code>HAVING</code> clause.\n         * @function\n         * @name Grouping#having\n         * @param {SearchConditionStr} expr - filtering criteria\n         * @returns {Grouping} The query instance.\n         */\n        having (criteria) {\n            state.preparable.forceRestart();\n\n            return this.setGroupingCriteria(criteria);\n        },\n\n        /**\n         * Set the query grouping criteria.\n         * @function\n         * @private\n         * @name Grouping#setGroupingCriteria\n         * @param {string} criteria - expression string\n         * @returns {Grouping} The query instance.\n         */\n        setGroupingCriteria (criteria) {\n            state.criteria = criteria;\n\n            return this;\n        },\n\n        /**\n         * Set the list of columns to group.\n         * @function\n         * @private\n         * @name Grouping#setGroupings\n         * @param {string[]} groupings - list of column names\n         * @returns {Grouping} The query instance.\n         */\n        setGroupings (groupings) {\n            state.groupings = groupings;\n\n            return this;\n        }\n    };\n}\n\nmodule.exports = Grouping;\n"]},"metadata":{},"sourceType":"script"}