{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst Expr = require('../../../../Protocol/Stubs/mysqlx_expr_pb').Expr;\n\nconst Scalar = require('../../../../Protocol/Stubs/mysqlx_datatypes_pb').Scalar;\n\nconst Pa = require('parsimmon');\n\nconst bytes = require('../../../../Protocol/Wrappers/ScalarValues/bytes');\n\nconst parser = options => r => Pa.alt(Pa.seq(r.SIGNED, Pa.seq(Pa.whitespace, r.INTEGER).tie().atMost(1).map(data => !data.length ? '' : data[0])).tie(), Pa.seq(r.UNSIGNED, Pa.seq(Pa.whitespace, r.INTEGER).tie().atMost(1).map(data => !data.length ? '' : data[0])).tie(), Pa.seq(r.CHAR, r.lengthSpec.atMost(1).map(data => !data.length ? '' : data[0])).tie(), Pa.seq(r.BINARY, r.lengthSpec.atMost(1).map(data => !data.length ? '' : data[0])).tie(), Pa.seq(r.DECIMAL, Pa.alt(r.lengthSpec, Pa.seq(Pa.string('('), Pa.optWhitespace, r.INT, Pa.optWhitespace, Pa.string(','), Pa.optWhitespace, r.INT, Pa.optWhitespace, Pa.string(')')).tie()).atMost(1).map(data => !data.length ? '' : data[0])).tie(), r.TIME, r.DATETIME, r.DATE, r.JSON).map(data => {\n  const bin = new Scalar.Octets();\n  bin.setValue(bytes.create(Buffer.from(data)).valueOf());\n  const scalar = new Scalar();\n  scalar.setType(Scalar.Type.V_OCTETS);\n  scalar.setVOctets(bin);\n  const expr = new Expr();\n  expr.setType(Expr.Type.LITERAL);\n  expr.setLiteral(scalar);\n  return expr;\n});\n\nmodule.exports = {\n  name: 'CAST_TYPE',\n  parser\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/ExprParser/lib/grammar/booleanExpressions/castType.js"],"names":["Expr","require","Scalar","Pa","bytes","parser","options","r","alt","seq","SIGNED","whitespace","INTEGER","tie","atMost","map","data","length","UNSIGNED","CHAR","lengthSpec","BINARY","DECIMAL","string","optWhitespace","INT","TIME","DATETIME","DATE","JSON","bin","Octets","setValue","create","Buffer","from","valueOf","scalar","setType","Type","V_OCTETS","setVOctets","expr","LITERAL","setLiteral","module","exports","name"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst Expr = require('../../../../Protocol/Stubs/mysqlx_expr_pb').Expr;\nconst Scalar = require('../../../../Protocol/Stubs/mysqlx_datatypes_pb').Scalar;\nconst Pa = require('parsimmon');\nconst bytes = require('../../../../Protocol/Wrappers/ScalarValues/bytes');\n\nconst parser = options => r => Pa\n    .alt(\n        Pa\n            .seq(\n                r.SIGNED,\n                Pa\n                    .seq(\n                        Pa.whitespace,\n                        r.INTEGER\n                    )\n                    .tie()\n                    .atMost(1)\n                    .map(data => !data.length ? '' : data[0])\n            )\n            .tie(),\n        Pa\n            .seq(\n                r.UNSIGNED,\n                Pa\n                    .seq(\n                        Pa.whitespace,\n                        r.INTEGER\n                    )\n                    .tie()\n                    .atMost(1)\n                    .map(data => !data.length ? '' : data[0])\n            )\n            .tie(),\n        Pa\n            .seq(\n                r.CHAR,\n                r.lengthSpec.atMost(1).map(data => !data.length ? '' : data[0])\n            )\n            .tie(),\n        Pa\n            .seq(\n                r.BINARY,\n                r.lengthSpec.atMost(1).map(data => !data.length ? '' : data[0])\n            )\n            .tie(),\n        Pa\n            .seq(\n                r.DECIMAL,\n                Pa\n                    .alt(\n                        r.lengthSpec,\n                        Pa\n                            .seq(\n                                Pa.string('('),\n                                Pa.optWhitespace,\n                                r.INT,\n                                Pa.optWhitespace,\n                                Pa.string(','),\n                                Pa.optWhitespace,\n                                r.INT,\n                                Pa.optWhitespace,\n                                Pa.string(')')\n                            )\n                            .tie()\n                    )\n                    .atMost(1)\n                    .map(data => !data.length ? '' : data[0])\n            )\n            .tie(),\n        r.TIME,\n        r.DATETIME,\n        r.DATE,\n        r.JSON\n    )\n    .map(data => {\n        const bin = new Scalar.Octets();\n        bin.setValue(bytes.create(Buffer.from(data)).valueOf());\n\n        const scalar = new Scalar();\n        scalar.setType(Scalar.Type.V_OCTETS);\n        scalar.setVOctets(bin);\n\n        const expr = new Expr();\n        expr.setType(Expr.Type.LITERAL);\n        expr.setLiteral(scalar);\n\n        return expr;\n    });\n\nmodule.exports = { name: 'CAST_TYPE', parser };\n"]},"metadata":{},"sourceType":"script"}