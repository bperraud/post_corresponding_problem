{"ast":null,"code":"/*\n * Copyright (c) 2016, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst ColumnType = require('../Protocol/Wrappers/Messages/Resultset/ColumnMetadata').COLUMN_TYPE;\n/**\n * Column metadata wrapper factory.\n * @module Column\n */\n\n/**\n * @alias module:Column\n * @param {module:ColumnMetadata} [metadata] - metadata protocol object\n * @returns {Column} The Column instance\n */\n\n\nfunction Column(metadata) {\n  return {\n    /**\n     * Retrieve the name of the charset being used.\n     * @function\n     * @name module:Column#getCharacterSetName\n     * @returns {string}\n     */\n    getCharacterSetName() {\n      return metadata.getCharset();\n    },\n\n    /**\n     * Retrieve the name of the collation being used.\n     * @function\n     * @name module:Column#getCollationName\n     * @returns {string}\n     */\n    getCollationName() {\n      return metadata.getCollation();\n    },\n\n    /**\n     * Retrieve the alias of the column.\n     * @function\n     * @name module:Column#getColumnLabel\n     * @returns {string}\n     */\n    getColumnLabel() {\n      return metadata.getAlias();\n    },\n\n    /**\n     * Retrieve the actual name of the column.\n     * @function\n     * @name module:Column#getColumnName\n     * @returns {string}\n     */\n    getColumnName() {\n      return metadata.getName();\n    },\n\n    /**\n     * Retrieve the number of fractional digits allowed for the column (DECIMAL or similar types).\n     * @function\n     * @name module:Column#getFractionalDigits\n     * @returns {number}\n     */\n    getFractionalDigits() {\n      return metadata.getFractionalDigits();\n    },\n\n    /**\n     * Retrieve the allowed size of the column.\n     * @function\n     * @name module:Column#getLength\n     * @returns {number}\n     */\n    getLength() {\n      return metadata.getLength();\n    },\n\n    /**\n     * Retrieve the name of the schema where the table belongs to.\n     * @function\n     * @name module:Column#getSchemaName\n     * @returns {string}\n     */\n    getSchemaName() {\n      return metadata.getSchema();\n    },\n\n    /**\n     * Retrieve the alias of the table where the column belongs to.\n     * @function\n     * @name module:Column#getTableLabel\n     * @returns {string}\n     */\n    getTableLabel() {\n      return metadata.getTableAlias();\n    },\n\n    /**\n     * Retrieve the actual name of the table where the column belongs to.\n     * @function\n     * @name module:Column#getTableName\n     * @returns {string}\n     */\n    getTableName() {\n      return metadata.getTableName();\n    },\n\n    /**\n     * Retrieve the X DevAPI type of the column.\n     * @function\n     * @name module:Column#getType\n     * @returns {ColumnType}\n     */\n    getType() {\n      return metadata.getTypeString();\n    },\n\n    /**\n     * Check if the column value is signed or not (for INT or similar types).\n     * @function\n     * @name module:Column#isNumberSigned\n     * @returns {boolean}\n     */\n    isNumberSigned() {\n      return metadata.isSigned();\n    },\n\n    /**\n     * Check if the column value is being padded.\n     * @function\n     * @name module:Column#isPadded\n     * @returns {string}\n     */\n    isPadded() {\n      return metadata.isFlagged();\n    }\n\n  };\n}\n/**\n * Column type.\n * @type {ColumnType}\n * @const\n * @private\n */\n\n\nColumn.Type = ColumnType;\nmodule.exports = Column;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/Column.js"],"names":["ColumnType","require","COLUMN_TYPE","Column","metadata","getCharacterSetName","getCharset","getCollationName","getCollation","getColumnLabel","getAlias","getColumnName","getName","getFractionalDigits","getLength","getSchemaName","getSchema","getTableLabel","getTableAlias","getTableName","getType","getTypeString","isNumberSigned","isSigned","isPadded","isFlagged","Type","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,wDAAD,CAAP,CAAkEC,WAArF;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAiBC,QAAjB,EAA2B;AACvB,SAAO;AACH;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,mBAAmB,GAAI;AACnB,aAAOD,QAAQ,CAACE,UAAT,EAAP;AACH,KATE;;AAWH;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,gBAAgB,GAAI;AAChB,aAAOH,QAAQ,CAACI,YAAT,EAAP;AACH,KAnBE;;AAqBH;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,cAAc,GAAI;AACd,aAAOL,QAAQ,CAACM,QAAT,EAAP;AACH,KA7BE;;AA+BH;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,aAAa,GAAI;AACb,aAAOP,QAAQ,CAACQ,OAAT,EAAP;AACH,KAvCE;;AAyCH;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,mBAAmB,GAAI;AACnB,aAAOT,QAAQ,CAACS,mBAAT,EAAP;AACH,KAjDE;;AAmDH;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,SAAS,GAAI;AACT,aAAOV,QAAQ,CAACU,SAAT,EAAP;AACH,KA3DE;;AA6DH;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,aAAa,GAAI;AACb,aAAOX,QAAQ,CAACY,SAAT,EAAP;AACH,KArEE;;AAuEH;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,aAAa,GAAI;AACb,aAAOb,QAAQ,CAACc,aAAT,EAAP;AACH,KA/EE;;AAiFH;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,YAAY,GAAI;AACZ,aAAOf,QAAQ,CAACe,YAAT,EAAP;AACH,KAzFE;;AA2FH;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,OAAO,GAAI;AACP,aAAOhB,QAAQ,CAACiB,aAAT,EAAP;AACH,KAnGE;;AAqGH;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,cAAc,GAAI;AACd,aAAOlB,QAAQ,CAACmB,QAAT,EAAP;AACH,KA7GE;;AA+GH;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,QAAQ,GAAI;AACR,aAAOpB,QAAQ,CAACqB,SAAT,EAAP;AACH;;AAvHE,GAAP;AAyHH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAtB,MAAM,CAACuB,IAAP,GAAc1B,UAAd;AAEA2B,MAAM,CAACC,OAAP,GAAiBzB,MAAjB","sourcesContent":["/*\n * Copyright (c) 2016, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst ColumnType = require('../Protocol/Wrappers/Messages/Resultset/ColumnMetadata').COLUMN_TYPE;\n\n/**\n * Column metadata wrapper factory.\n * @module Column\n */\n\n/**\n * @alias module:Column\n * @param {module:ColumnMetadata} [metadata] - metadata protocol object\n * @returns {Column} The Column instance\n */\nfunction Column (metadata) {\n    return {\n        /**\n         * Retrieve the name of the charset being used.\n         * @function\n         * @name module:Column#getCharacterSetName\n         * @returns {string}\n         */\n        getCharacterSetName () {\n            return metadata.getCharset();\n        },\n\n        /**\n         * Retrieve the name of the collation being used.\n         * @function\n         * @name module:Column#getCollationName\n         * @returns {string}\n         */\n        getCollationName () {\n            return metadata.getCollation();\n        },\n\n        /**\n         * Retrieve the alias of the column.\n         * @function\n         * @name module:Column#getColumnLabel\n         * @returns {string}\n         */\n        getColumnLabel () {\n            return metadata.getAlias();\n        },\n\n        /**\n         * Retrieve the actual name of the column.\n         * @function\n         * @name module:Column#getColumnName\n         * @returns {string}\n         */\n        getColumnName () {\n            return metadata.getName();\n        },\n\n        /**\n         * Retrieve the number of fractional digits allowed for the column (DECIMAL or similar types).\n         * @function\n         * @name module:Column#getFractionalDigits\n         * @returns {number}\n         */\n        getFractionalDigits () {\n            return metadata.getFractionalDigits();\n        },\n\n        /**\n         * Retrieve the allowed size of the column.\n         * @function\n         * @name module:Column#getLength\n         * @returns {number}\n         */\n        getLength () {\n            return metadata.getLength();\n        },\n\n        /**\n         * Retrieve the name of the schema where the table belongs to.\n         * @function\n         * @name module:Column#getSchemaName\n         * @returns {string}\n         */\n        getSchemaName () {\n            return metadata.getSchema();\n        },\n\n        /**\n         * Retrieve the alias of the table where the column belongs to.\n         * @function\n         * @name module:Column#getTableLabel\n         * @returns {string}\n         */\n        getTableLabel () {\n            return metadata.getTableAlias();\n        },\n\n        /**\n         * Retrieve the actual name of the table where the column belongs to.\n         * @function\n         * @name module:Column#getTableName\n         * @returns {string}\n         */\n        getTableName () {\n            return metadata.getTableName();\n        },\n\n        /**\n         * Retrieve the X DevAPI type of the column.\n         * @function\n         * @name module:Column#getType\n         * @returns {ColumnType}\n         */\n        getType () {\n            return metadata.getTypeString();\n        },\n\n        /**\n         * Check if the column value is signed or not (for INT or similar types).\n         * @function\n         * @name module:Column#isNumberSigned\n         * @returns {boolean}\n         */\n        isNumberSigned () {\n            return metadata.isSigned();\n        },\n\n        /**\n         * Check if the column value is being padded.\n         * @function\n         * @name module:Column#isPadded\n         * @returns {string}\n         */\n        isPadded () {\n            return metadata.isFlagged();\n        }\n    };\n}\n\n/**\n * Column type.\n * @type {ColumnType}\n * @const\n * @private\n */\nColumn.Type = ColumnType;\n\nmodule.exports = Column;\n"]},"metadata":{},"sourceType":"script"}