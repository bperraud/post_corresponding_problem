{"ast":null,"code":"/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst inserting = require('./Inserting');\n\nconst parseFlexibleParamList = require('./Util/parseFlexibleParamList');\n\nconst result = require('./Result');\n\nconst query = require('./Query');\n/**\n * CollectionAdd factory.\n * @module CollectionAdd\n * @mixes Inserting\n * @mixes Query\n */\n\n/**\n * @typedef {Object} CollectionAddOptions\n * @prop {boolean} upsert - upsert query\n */\n\n/**\n * @private\n * @alias module:CollectionAdd\n * @param {Connection} connection - database connection context\n * @param {module:Schema} schema - schema to bind\n * @param {string} tableName - collection name\n * @param {Object[]} documents - list of documents to add\n * @param {CollectionAddOptions} options - additional options\n * @returns {module:CollectionAdd}\n */\n\n\nfunction CollectionAdd(connection, schema, tableName, documents, options) {\n  documents = documents || [];\n  return Object.assign({}, inserting(options), query({\n    schema,\n    tableName\n  }), {\n    /**\n     * Run the query to save the documents to the collection in the database.\n     * If a document does not contain an <code>_id</code>, it will be assigned a UUID-like value.\n     * @function\n     * @name module:CollectionAdd#execute\n     * @tutorial Working_with_Documents\n     * @returns {Promise.<module:Result>}\n     */\n    execute() {\n      if (!this.getItems().length) {\n        return Promise.resolve();\n      } // Before trying to send any message to the server, we need to\n      // check if the connection is open (has a client instance) or if\n      // it became idle in the meantime.\n\n\n      if (!connection.isOpen() || connection.isIdle()) {\n        // There is always a default error (ER_DEVAPI_CONNECTION_CLOSED).\n        return Promise.reject(connection.getError());\n      }\n\n      return connection.getClient().crudInsert(this).then(details => result(details));\n    },\n\n    /**\n     * Create query to add one or various documents.\n     * @function\n     * @name module:CollectionAdd#add\n     * @param {...Object|Object[]} input - document or list of documents\n     * @throws {Error} When the input type is invalid.\n     * @example\n     * // arguments as single documents\n     * collection.add({ foo: 'baz' }).add({ bar: 'qux' }, { biz: 'quux' })\n     *\n     * // array of documents\n     * collection.add([{ foo: 'baz' }]).add([{ bar: 'qux' }, { biz: 'quux' }])\n     * @returns {module:CollectionAdd} The query instance.\n     */\n    add() {\n      return this.setItems(this.getItems().concat(parseFlexibleParamList(Array.prototype.slice.call(arguments))));\n    }\n\n  }).add(documents);\n}\n\nmodule.exports = CollectionAdd;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/CollectionAdd.js"],"names":["inserting","require","parseFlexibleParamList","result","query","CollectionAdd","connection","schema","tableName","documents","options","Object","assign","execute","getItems","length","Promise","resolve","isOpen","isIdle","reject","getError","getClient","crudInsert","then","details","add","setItems","concat","Array","prototype","slice","call","arguments","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,+BAAD,CAAtC;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,SAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,aAAT,CAAwBC,UAAxB,EAAoCC,MAApC,EAA4CC,SAA5C,EAAuDC,SAAvD,EAAkEC,OAAlE,EAA2E;AACvED,EAAAA,SAAS,GAAGA,SAAS,IAAI,EAAzB;AAEA,SAAOE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,SAAS,CAACU,OAAD,CAA3B,EAAsCN,KAAK,CAAC;AAAEG,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAD,CAA3C,EAAoE;AACvE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQK,IAAAA,OAAO,GAAI;AACP,UAAI,CAAC,KAAKC,QAAL,GAAgBC,MAArB,EAA6B;AACzB,eAAOC,OAAO,CAACC,OAAR,EAAP;AACH,OAHM,CAKP;AACA;AACA;;;AACA,UAAI,CAACX,UAAU,CAACY,MAAX,EAAD,IAAwBZ,UAAU,CAACa,MAAX,EAA5B,EAAiD;AAC7C;AACA,eAAOH,OAAO,CAACI,MAAR,CAAed,UAAU,CAACe,QAAX,EAAf,CAAP;AACH;;AAED,aAAOf,UAAU,CAACgB,SAAX,GAAuBC,UAAvB,CAAkC,IAAlC,EACFC,IADE,CACGC,OAAO,IAAItB,MAAM,CAACsB,OAAD,CADpB,CAAP;AAEH,KAxBsE;;AA0BvE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,GAAI;AACH,aAAO,KAAKC,QAAL,CAAc,KAAKb,QAAL,GAAgBc,MAAhB,CAAuB1B,sBAAsB,CAAC2B,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAD,CAA7C,CAAd,CAAP;AACH;;AA1CsE,GAApE,EA2CJP,GA3CI,CA2CAjB,SA3CA,CAAP;AA4CH;;AAEDyB,MAAM,CAACC,OAAP,GAAiB9B,aAAjB","sourcesContent":["/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst inserting = require('./Inserting');\nconst parseFlexibleParamList = require('./Util/parseFlexibleParamList');\nconst result = require('./Result');\nconst query = require('./Query');\n\n/**\n * CollectionAdd factory.\n * @module CollectionAdd\n * @mixes Inserting\n * @mixes Query\n */\n\n/**\n * @typedef {Object} CollectionAddOptions\n * @prop {boolean} upsert - upsert query\n */\n\n/**\n * @private\n * @alias module:CollectionAdd\n * @param {Connection} connection - database connection context\n * @param {module:Schema} schema - schema to bind\n * @param {string} tableName - collection name\n * @param {Object[]} documents - list of documents to add\n * @param {CollectionAddOptions} options - additional options\n * @returns {module:CollectionAdd}\n */\nfunction CollectionAdd (connection, schema, tableName, documents, options) {\n    documents = documents || [];\n\n    return Object.assign({}, inserting(options), query({ schema, tableName }), {\n        /**\n         * Run the query to save the documents to the collection in the database.\n         * If a document does not contain an <code>_id</code>, it will be assigned a UUID-like value.\n         * @function\n         * @name module:CollectionAdd#execute\n         * @tutorial Working_with_Documents\n         * @returns {Promise.<module:Result>}\n         */\n        execute () {\n            if (!this.getItems().length) {\n                return Promise.resolve();\n            }\n\n            // Before trying to send any message to the server, we need to\n            // check if the connection is open (has a client instance) or if\n            // it became idle in the meantime.\n            if (!connection.isOpen() || connection.isIdle()) {\n                // There is always a default error (ER_DEVAPI_CONNECTION_CLOSED).\n                return Promise.reject(connection.getError());\n            }\n\n            return connection.getClient().crudInsert(this)\n                .then(details => result(details));\n        },\n\n        /**\n         * Create query to add one or various documents.\n         * @function\n         * @name module:CollectionAdd#add\n         * @param {...Object|Object[]} input - document or list of documents\n         * @throws {Error} When the input type is invalid.\n         * @example\n         * // arguments as single documents\n         * collection.add({ foo: 'baz' }).add({ bar: 'qux' }, { biz: 'quux' })\n         *\n         * // array of documents\n         * collection.add([{ foo: 'baz' }]).add([{ bar: 'qux' }, { biz: 'quux' }])\n         * @returns {module:CollectionAdd} The query instance.\n         */\n        add () {\n            return this.setItems(this.getItems().concat(parseFlexibleParamList(Array.prototype.slice.call(arguments))));\n        }\n    }).add(documents);\n}\n\nmodule.exports = CollectionAdd;\n"]},"metadata":{},"sourceType":"script"}