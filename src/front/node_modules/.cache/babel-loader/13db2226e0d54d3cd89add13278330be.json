{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst Expr = require('../../../../Protocol/Stubs/mysqlx_expr_pb').Expr;\n\nconst FunctionCall = require('../../../../Protocol/Stubs/mysqlx_expr_pb').FunctionCall;\n\nconst Pa = require('parsimmon');\n\nconst parser = options => r => Pa.seq(r.schemaQualifiedIdent, Pa.string('('), Pa.optWhitespace, r.argsList.atMost(1), Pa.optWhitespace, Pa.string(')')).map(data => {\n  const functionCall = new FunctionCall();\n  functionCall.setName(data[0]);\n  const expr = new Expr();\n  expr.setType(Expr.Type.FUNC_CALL);\n  const argsList = data[3] && data[3][0] ? data[3][0] : [];\n  argsList.forEach(additional => {\n    functionCall.addParam(additional);\n  });\n  expr.setFunctionCall(functionCall);\n  return expr;\n});\n\nmodule.exports = {\n  name: 'FUNCTION_CALL',\n  parser\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/ExprParser/lib/grammar/booleanExpressions/functionCall.js"],"names":["Expr","require","FunctionCall","Pa","parser","options","r","seq","schemaQualifiedIdent","string","optWhitespace","argsList","atMost","map","data","functionCall","setName","expr","setType","Type","FUNC_CALL","forEach","additional","addParam","setFunctionCall","module","exports","name"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,2CAAD,CAAP,CAAqDD,IAAlE;;AACA,MAAME,YAAY,GAAGD,OAAO,CAAC,2CAAD,CAAP,CAAqDC,YAA1E;;AACA,MAAMC,EAAE,GAAGF,OAAO,CAAC,WAAD,CAAlB;;AAEA,MAAMG,MAAM,GAAGC,OAAO,IAAIC,CAAC,IAAIH,EAAE,CAC5BI,GAD0B,CAEvBD,CAAC,CAACE,oBAFqB,EAGvBL,EAAE,CAACM,MAAH,CAAU,GAAV,CAHuB,EAIvBN,EAAE,CAACO,aAJoB,EAKvBJ,CAAC,CAACK,QAAF,CAAWC,MAAX,CAAkB,CAAlB,CALuB,EAMvBT,EAAE,CAACO,aANoB,EAOvBP,EAAE,CAACM,MAAH,CAAU,GAAV,CAPuB,EAS1BI,GAT0B,CAStBC,IAAI,IAAI;AACT,QAAMC,YAAY,GAAG,IAAIb,YAAJ,EAArB;AACAa,EAAAA,YAAY,CAACC,OAAb,CAAqBF,IAAI,CAAC,CAAD,CAAzB;AAEA,QAAMG,IAAI,GAAG,IAAIjB,IAAJ,EAAb;AACAiB,EAAAA,IAAI,CAACC,OAAL,CAAalB,IAAI,CAACmB,IAAL,CAAUC,SAAvB;AAEA,QAAMT,QAAQ,GAAGG,IAAI,CAAC,CAAD,CAAJ,IAAWA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAX,GAAwBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAxB,GAAqC,EAAtD;AAEAH,EAAAA,QAAQ,CAACU,OAAT,CAAkBC,UAAD,IAAgB;AAC7BP,IAAAA,YAAY,CAACQ,QAAb,CAAsBD,UAAtB;AACH,GAFD;AAIAL,EAAAA,IAAI,CAACO,eAAL,CAAqBT,YAArB;AAEA,SAAOE,IAAP;AACH,CAzB0B,CAA/B;;AA2BAQ,MAAM,CAACC,OAAP,GAAiB;AAAEC,EAAAA,IAAI,EAAE,eAAR;AAAyBvB,EAAAA;AAAzB,CAAjB","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst Expr = require('../../../../Protocol/Stubs/mysqlx_expr_pb').Expr;\nconst FunctionCall = require('../../../../Protocol/Stubs/mysqlx_expr_pb').FunctionCall;\nconst Pa = require('parsimmon');\n\nconst parser = options => r => Pa\n    .seq(\n        r.schemaQualifiedIdent,\n        Pa.string('('),\n        Pa.optWhitespace,\n        r.argsList.atMost(1),\n        Pa.optWhitespace,\n        Pa.string(')')\n    )\n    .map(data => {\n        const functionCall = new FunctionCall();\n        functionCall.setName(data[0]);\n\n        const expr = new Expr();\n        expr.setType(Expr.Type.FUNC_CALL);\n\n        const argsList = data[3] && data[3][0] ? data[3][0] : [];\n\n        argsList.forEach((additional) => {\n            functionCall.addParam(additional);\n        });\n\n        expr.setFunctionCall(functionCall);\n\n        return expr;\n    });\n\nmodule.exports = { name: 'FUNCTION_CALL', parser };\n"]},"metadata":{},"sourceType":"script"}