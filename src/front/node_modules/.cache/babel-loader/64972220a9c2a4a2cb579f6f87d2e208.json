{"ast":null,"code":"/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst authenticationManager = require('./lib/Authentication/AuthenticationManager');\n\nconst client = require('./lib/DevAPI/Client');\n\nconst errors = require('./lib/constants/errors');\n\nconst expr = require('./lib/Protocol/Wrappers/Messages/Expr/Expr');\n\nconst locking = require('./lib/DevAPI/Locking');\n\nconst mysql41Auth = require('./lib/Authentication/MySQL41Auth');\n\nconst parseUri = require('./lib/DevAPI/Util/URIParser');\n\nconst plainAuth = require('./lib/Authentication/PlainAuth');\n\nconst query = require('./lib/DevAPI/Query');\n\nconst sha256MemoryAuth = require('./lib/Authentication/SHA256MemoryAuth');\n\nconst schema = require('./lib/DevAPI/Schema');\n/**\n * @module mysqlx\n */\n\n/**\n * Register default authentication plugins.\n */\n\n\nauthenticationManager.registerPlugin(mysql41Auth);\nauthenticationManager.registerPlugin(plainAuth);\nauthenticationManager.registerPlugin(sha256MemoryAuth);\n/**\n * String validation options.\n * @private\n * @typedef {Object} StringValidation\n * @prop {boolean} [enforceJSON=false]\n * @prop {boolean} [allowUndefined=false]\n */\n\n/**\n * Parse a connection specification.\n * @private\n * @param {string|module:Connection~Properties} input - connection specification\n * @param {StringValidation} [options] - string validation options\n * @throws when the input is not a valid connection specification.\n * @returns {Promise.<module:Session>}\n */\n\nfunction parseConnectionSpec(input, options) {\n  options = Object.assign({\n    enforceJSON: false\n  }, options);\n  const isPlainObject = typeof input === 'object' && !Array.isArray(input);\n  const isString = typeof input === 'string';\n\n  if (!isPlainObject && !isString) {\n    throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_CONNECTION_DEFINITION);\n  }\n\n  if (isPlainObject) {\n    return input;\n  }\n\n  try {\n    return JSON.parse(input);\n  } catch (err) {\n    if (err.name === 'SyntaxError' && !options.enforceJSON) {\n      return parseUri(input);\n    }\n\n    throw err;\n  }\n}\n/**\n * Create an X DevAPI session using a standalone connection.\n * @param {string|module:Connection~Properties} connection - a connection string (URI) or a set of connection properties\n * @example\n * mysqlx.getSession({ user: 'root' })\n *   .then(session => {\n *     console.log(session.inspect()); // { host: 'localhost', port: 33060, user: 'root', pooling: false, ... }\n *   })\n * @returns {Promise.<module:Session>}\n */\n\n\nexports.getSession = function () {\n  let connection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  try {\n    const config = Object.assign({}, parseConnectionSpec(connection), {\n      pooling: {\n        enabled: false\n      }\n    });\n    client.validate(config); // { host: _, port: _, pooling: { enabled: false }, ... }\n\n    return client(config).getSession();\n  } catch (err) {\n    return Promise.reject(err);\n  }\n};\n/**\n * Create a new X DevAPI connection pool.\n * @param {string|module:Connection~Properties} connection - a connection string (URI) or a set of connection properties\n * @param {module:Client~Properties} [options] - extended client options\n * @example\n * const client = mysqlx.getClient({ user: 'root' }, { pooling: { enabled: true, maxSize: 3 } })\n *\n * client.getSession()\n *   .then(session => {\n *     console.log(session.inspect()); // { host: 'localhost', port: 33060, user: 'root', pooling: true, ... }\n *   })\n * @returns {module:Client}\n */\n\n\nexports.getClient = function () {\n  let connection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const config = Object.assign({}, parseConnectionSpec(connection), parseConnectionSpec(options, {\n    enforceJSON: true,\n    allowUndefined: true\n  }));\n  client.validate(config); // { host: _, port: _, pooling: { enabled: _, maxSize: _ }, ... }\n\n  return client(config);\n};\n/**\n * Additional parser options.\n * @typedef {Object} ParserOptions\n * @prop {module:mysqlx~Mode} [mode] - the parsing mode\n */\n\n/**\n * Parse an expression string into a Mysqlx.Expr.Expr.\n * @param {string} value - expression string\n * @param {module:mysqlx~ParserOptions} [options] - additional options\n * @return {proto.Mysqlx.Expr.Expr} The protobuf object version.\n */\n\n\nexports.expr = function (value, options) {\n  return expr.create(value, Object.assign({}, options, {\n    toParse: true\n  })).valueOf();\n};\n/**\n * Retrieve the connector version number (from package.json).\n * @return {string}\n */\n\n\nexports.getVersion = function () {\n  return require('./package').version;\n};\n/**\n * Database entity types.\n * @name Mode\n * @type {Query~DataModel}\n * @example\n * mysqlx.Mode.TABLE\n * mysqlx.Mode.DOCUMENT\n */\n\n\nexports.Mode = query.Type;\n/**\n * Locking modes.\n * @name LockContention\n * @type {Locking~LockContention}\n * @example\n * mysqlx.LockContention.DEFAULT\n * mysqlx.LockContention.NOWAIT\n * mysqlx.LockContention.SKIP_LOCKED\n */\n\nexports.LockContention = locking.LockContention;\n/**\n * Schema validation.\n * @name Schema\n * @example\n * mysqlx.Schema.ValidationLevel.OFF\n * mysqlx.Schema.ValidationLevel.STRICT\n */\n\nexports.Schema = {\n  ValidationLevel: schema.ValidationLevel\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/index.js"],"names":["authenticationManager","require","client","errors","expr","locking","mysql41Auth","parseUri","plainAuth","query","sha256MemoryAuth","schema","registerPlugin","parseConnectionSpec","input","options","Object","assign","enforceJSON","isPlainObject","Array","isArray","isString","Error","MESSAGES","ER_DEVAPI_BAD_CONNECTION_DEFINITION","JSON","parse","err","name","exports","getSession","connection","config","pooling","enabled","validate","Promise","reject","getClient","allowUndefined","value","create","toParse","valueOf","getVersion","version","Mode","Type","LockContention","Schema","ValidationLevel"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,4CAAD,CAArC;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,qBAAD,CAAtB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,wBAAD,CAAtB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,4CAAD,CAApB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,sBAAD,CAAvB;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,kCAAD,CAA3B;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,6BAAD,CAAxB;;AACA,MAAMO,SAAS,GAAGP,OAAO,CAAC,gCAAD,CAAzB;;AACA,MAAMQ,KAAK,GAAGR,OAAO,CAAC,oBAAD,CAArB;;AACA,MAAMS,gBAAgB,GAAGT,OAAO,CAAC,uCAAD,CAAhC;;AACA,MAAMU,MAAM,GAAGV,OAAO,CAAC,qBAAD,CAAtB;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AACAD,qBAAqB,CAACY,cAAtB,CAAqCN,WAArC;AACAN,qBAAqB,CAACY,cAAtB,CAAqCJ,SAArC;AACAR,qBAAqB,CAACY,cAAtB,CAAqCF,gBAArC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASG,mBAAT,CAA8BC,KAA9B,EAAqCC,OAArC,EAA8C;AAC1CA,EAAAA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,WAAW,EAAE;AAAf,GAAd,EAAsCH,OAAtC,CAAV;AAEA,QAAMI,aAAa,GAAG,OAAOL,KAAP,KAAiB,QAAjB,IAA6B,CAACM,KAAK,CAACC,OAAN,CAAcP,KAAd,CAApD;AACA,QAAMQ,QAAQ,GAAG,OAAOR,KAAP,KAAiB,QAAlC;;AAEA,MAAI,CAACK,aAAD,IAAkB,CAACG,QAAvB,EAAiC;AAC7B,UAAM,IAAIC,KAAJ,CAAUpB,MAAM,CAACqB,QAAP,CAAgBC,mCAA1B,CAAN;AACH;;AAED,MAAIN,aAAJ,EAAmB;AACf,WAAOL,KAAP;AACH;;AAED,MAAI;AACA,WAAOY,IAAI,CAACC,KAAL,CAAWb,KAAX,CAAP;AACH,GAFD,CAEE,OAAOc,GAAP,EAAY;AACV,QAAIA,GAAG,CAACC,IAAJ,KAAa,aAAb,IAA8B,CAACd,OAAO,CAACG,WAA3C,EAAwD;AACpD,aAAOX,QAAQ,CAACO,KAAD,CAAf;AACH;;AAED,UAAMc,GAAN;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,OAAO,CAACC,UAAR,GAAqB,YAA2B;AAAA,MAAjBC,UAAiB,uEAAJ,EAAI;;AAC5C,MAAI;AACA,UAAMC,MAAM,GAAGjB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,mBAAmB,CAACmB,UAAD,CAArC,EAAmD;AAAEE,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX;AAAX,KAAnD,CAAf;AACAjC,IAAAA,MAAM,CAACkC,QAAP,CAAgBH,MAAhB,EAFA,CAGA;;AACA,WAAO/B,MAAM,CAAC+B,MAAD,CAAN,CAAeF,UAAf,EAAP;AACH,GALD,CAKE,OAAOH,GAAP,EAAY;AACV,WAAOS,OAAO,CAACC,MAAR,CAAeV,GAAf,CAAP;AACH;AACJ,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,OAAO,CAACS,SAAR,GAAoB,YAAyC;AAAA,MAA/BP,UAA+B,uEAAlB,EAAkB;AAAA,MAAdjB,OAAc,uEAAJ,EAAI;AACzD,QAAMkB,MAAM,GAAGjB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,mBAAmB,CAACmB,UAAD,CAArC,EAAmDnB,mBAAmB,CAACE,OAAD,EAAU;AAAEG,IAAAA,WAAW,EAAE,IAAf;AAAqBsB,IAAAA,cAAc,EAAE;AAArC,GAAV,CAAtE,CAAf;AACAtC,EAAAA,MAAM,CAACkC,QAAP,CAAgBH,MAAhB,EAFyD,CAIzD;;AACA,SAAO/B,MAAM,CAAC+B,MAAD,CAAb;AACH,CAND;AAQA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAH,OAAO,CAAC1B,IAAR,GAAe,UAAUqC,KAAV,EAAiB1B,OAAjB,EAA0B;AACrC,SAAOX,IAAI,CAACsC,MAAL,CAAYD,KAAZ,EAAmBzB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,OAAlB,EAA2B;AAAE4B,IAAAA,OAAO,EAAE;AAAX,GAA3B,CAAnB,EAAkEC,OAAlE,EAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;;;AACAd,OAAO,CAACe,UAAR,GAAqB,YAAY;AAC7B,SAAO5C,OAAO,CAAC,WAAD,CAAP,CAAqB6C,OAA5B;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhB,OAAO,CAACiB,IAAR,GAAetC,KAAK,CAACuC,IAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAlB,OAAO,CAACmB,cAAR,GAAyB5C,OAAO,CAAC4C,cAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAnB,OAAO,CAACoB,MAAR,GAAiB;AACbC,EAAAA,eAAe,EAAExC,MAAM,CAACwC;AADX,CAAjB","sourcesContent":["/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst authenticationManager = require('./lib/Authentication/AuthenticationManager');\nconst client = require('./lib/DevAPI/Client');\nconst errors = require('./lib/constants/errors');\nconst expr = require('./lib/Protocol/Wrappers/Messages/Expr/Expr');\nconst locking = require('./lib/DevAPI/Locking');\nconst mysql41Auth = require('./lib/Authentication/MySQL41Auth');\nconst parseUri = require('./lib/DevAPI/Util/URIParser');\nconst plainAuth = require('./lib/Authentication/PlainAuth');\nconst query = require('./lib/DevAPI/Query');\nconst sha256MemoryAuth = require('./lib/Authentication/SHA256MemoryAuth');\nconst schema = require('./lib/DevAPI/Schema');\n\n/**\n * @module mysqlx\n */\n\n/**\n * Register default authentication plugins.\n */\nauthenticationManager.registerPlugin(mysql41Auth);\nauthenticationManager.registerPlugin(plainAuth);\nauthenticationManager.registerPlugin(sha256MemoryAuth);\n\n/**\n * String validation options.\n * @private\n * @typedef {Object} StringValidation\n * @prop {boolean} [enforceJSON=false]\n * @prop {boolean} [allowUndefined=false]\n */\n\n/**\n * Parse a connection specification.\n * @private\n * @param {string|module:Connection~Properties} input - connection specification\n * @param {StringValidation} [options] - string validation options\n * @throws when the input is not a valid connection specification.\n * @returns {Promise.<module:Session>}\n */\nfunction parseConnectionSpec (input, options) {\n    options = Object.assign({ enforceJSON: false }, options);\n\n    const isPlainObject = typeof input === 'object' && !Array.isArray(input);\n    const isString = typeof input === 'string';\n\n    if (!isPlainObject && !isString) {\n        throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_CONNECTION_DEFINITION);\n    }\n\n    if (isPlainObject) {\n        return input;\n    }\n\n    try {\n        return JSON.parse(input);\n    } catch (err) {\n        if (err.name === 'SyntaxError' && !options.enforceJSON) {\n            return parseUri(input);\n        }\n\n        throw err;\n    }\n}\n\n/**\n * Create an X DevAPI session using a standalone connection.\n * @param {string|module:Connection~Properties} connection - a connection string (URI) or a set of connection properties\n * @example\n * mysqlx.getSession({ user: 'root' })\n *   .then(session => {\n *     console.log(session.inspect()); // { host: 'localhost', port: 33060, user: 'root', pooling: false, ... }\n *   })\n * @returns {Promise.<module:Session>}\n */\nexports.getSession = function (connection = {}) {\n    try {\n        const config = Object.assign({}, parseConnectionSpec(connection), { pooling: { enabled: false } });\n        client.validate(config);\n        // { host: _, port: _, pooling: { enabled: false }, ... }\n        return client(config).getSession();\n    } catch (err) {\n        return Promise.reject(err);\n    }\n};\n\n/**\n * Create a new X DevAPI connection pool.\n * @param {string|module:Connection~Properties} connection - a connection string (URI) or a set of connection properties\n * @param {module:Client~Properties} [options] - extended client options\n * @example\n * const client = mysqlx.getClient({ user: 'root' }, { pooling: { enabled: true, maxSize: 3 } })\n *\n * client.getSession()\n *   .then(session => {\n *     console.log(session.inspect()); // { host: 'localhost', port: 33060, user: 'root', pooling: true, ... }\n *   })\n * @returns {module:Client}\n */\nexports.getClient = function (connection = {}, options = {}) {\n    const config = Object.assign({}, parseConnectionSpec(connection), parseConnectionSpec(options, { enforceJSON: true, allowUndefined: true }));\n    client.validate(config);\n\n    // { host: _, port: _, pooling: { enabled: _, maxSize: _ }, ... }\n    return client(config);\n};\n\n/**\n * Additional parser options.\n * @typedef {Object} ParserOptions\n * @prop {module:mysqlx~Mode} [mode] - the parsing mode\n */\n\n/**\n * Parse an expression string into a Mysqlx.Expr.Expr.\n * @param {string} value - expression string\n * @param {module:mysqlx~ParserOptions} [options] - additional options\n * @return {proto.Mysqlx.Expr.Expr} The protobuf object version.\n */\nexports.expr = function (value, options) {\n    return expr.create(value, Object.assign({}, options, { toParse: true })).valueOf();\n};\n\n/**\n * Retrieve the connector version number (from package.json).\n * @return {string}\n */\nexports.getVersion = function () {\n    return require('./package').version;\n};\n\n/**\n * Database entity types.\n * @name Mode\n * @type {Query~DataModel}\n * @example\n * mysqlx.Mode.TABLE\n * mysqlx.Mode.DOCUMENT\n */\nexports.Mode = query.Type;\n\n/**\n * Locking modes.\n * @name LockContention\n * @type {Locking~LockContention}\n * @example\n * mysqlx.LockContention.DEFAULT\n * mysqlx.LockContention.NOWAIT\n * mysqlx.LockContention.SKIP_LOCKED\n */\nexports.LockContention = locking.LockContention;\n\n/**\n * Schema validation.\n * @name Schema\n * @example\n * mysqlx.Schema.ValidationLevel.OFF\n * mysqlx.Schema.ValidationLevel.STRICT\n */\nexports.Schema = {\n    ValidationLevel: schema.ValidationLevel\n};\n"]},"metadata":{},"sourceType":"script"}