{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst filtering = require('./Filtering');\n\nconst query = require('./Query');\n\nconst tableFiltering = require('./TableFiltering');\n\nconst category = query.Type.DOCUMENT;\n/**\n * Binding mixin.\n * @mixin\n * @alias Binding\n * @param {Object} state - binding properties\n * @returns {Binding}\n */\n\nfunction Binding(state) {\n  state = Object.assign({\n    category,\n    bindings: {}\n  }, state);\n  const base = {\n    /**\n     * Bind values to query parameters.\n     * @function\n     * @name Binding#bind\n     * @param {string|Object} parameter - parameter name or mapping object\n     * @param {string} [value]\n     * @example\n     * // parameter name and value as arguments\n     * const query = collection.find('foo = :foo').bind('foo', 'bar')\n     *\n     * // parameter name and value as key-value pair in an object\n     * const query = collection.find('foo = :foo').bind({ foo: 'bar' })\n     * @returns {Binding} The query instance.\n     */\n    bind() {\n      if (!arguments.length) {\n        return this;\n      }\n\n      let binding = {};\n\n      if (Object(arguments[0]) === arguments[0]) {\n        binding = arguments[0];\n      } else {\n        binding = {\n          [arguments[0]]: arguments[1]\n        };\n      }\n\n      return this.setBindings(Object.assign({}, state.bindings, binding));\n    },\n\n    /**\n     * Retrieve the mapping of placeholders and values to bind.\n     * @function\n     * @private\n     * @name Binding#getBindings\n     * @returns {Object} The object containing the placeholder names and their values.\n     */\n    getBindings() {\n      return state.bindings;\n    },\n\n    /**\n     * Set the mapping of placeholders and values to bind.\n     * @function\n     * @private\n     * @name Binding#setBindings\n     * @param {Object} bindings - object with placeholders and values\n     * @returns {Binding} The query instance.\n     */\n    setBindings(bindings) {\n      state.bindings = bindings;\n      return this;\n    }\n\n  };\n\n  if (state.category === query.Type.DOCUMENT) {\n    return Object.assign({}, filtering(state), base);\n  }\n\n  return Object.assign({}, tableFiltering(state), base);\n}\n\nmodule.exports = Binding;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/Binding.js"],"names":["filtering","require","query","tableFiltering","category","Type","DOCUMENT","Binding","state","Object","assign","bindings","base","bind","arguments","length","binding","setBindings","getBindings","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,kBAAD,CAA9B;;AAEA,MAAMG,QAAQ,GAAGF,KAAK,CAACG,IAAN,CAAWC,QAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAkBC,KAAlB,EAAyB;AACrBA,EAAAA,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEN,IAAAA,QAAF;AAAYO,IAAAA,QAAQ,EAAE;AAAtB,GAAd,EAA0CH,KAA1C,CAAR;AAEA,QAAMI,IAAI,GAAG;AACT;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,IAAI,GAAI;AACJ,UAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACnB,eAAO,IAAP;AACH;;AAED,UAAIC,OAAO,GAAG,EAAd;;AAEA,UAAIP,MAAM,CAACK,SAAS,CAAC,CAAD,CAAV,CAAN,KAAyBA,SAAS,CAAC,CAAD,CAAtC,EAA2C;AACvCE,QAAAA,OAAO,GAAGF,SAAS,CAAC,CAAD,CAAnB;AACH,OAFD,MAEO;AACHE,QAAAA,OAAO,GAAG;AAAE,WAACF,SAAS,CAAC,CAAD,CAAV,GAAgBA,SAAS,CAAC,CAAD;AAA3B,SAAV;AACH;;AAED,aAAO,KAAKG,WAAL,CAAiBR,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,KAAK,CAACG,QAAxB,EAAkCK,OAAlC,CAAjB,CAAP;AACH,KA7BQ;;AA+BT;AACR;AACA;AACA;AACA;AACA;AACA;AACQE,IAAAA,WAAW,GAAI;AACX,aAAOV,KAAK,CAACG,QAAb;AACH,KAxCQ;;AA0CT;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQM,IAAAA,WAAW,CAAEN,QAAF,EAAY;AACnBH,MAAAA,KAAK,CAACG,QAAN,GAAiBA,QAAjB;AAEA,aAAO,IAAP;AACH;;AAtDQ,GAAb;;AAyDA,MAAIH,KAAK,CAACJ,QAAN,KAAmBF,KAAK,CAACG,IAAN,CAAWC,QAAlC,EAA4C;AACxC,WAAOG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,SAAS,CAACQ,KAAD,CAA3B,EAAoCI,IAApC,CAAP;AACH;;AAED,SAAOH,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,cAAc,CAACK,KAAD,CAAhC,EAAyCI,IAAzC,CAAP;AACH;;AAEDO,MAAM,CAACC,OAAP,GAAiBb,OAAjB","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst filtering = require('./Filtering');\nconst query = require('./Query');\nconst tableFiltering = require('./TableFiltering');\n\nconst category = query.Type.DOCUMENT;\n\n/**\n * Binding mixin.\n * @mixin\n * @alias Binding\n * @param {Object} state - binding properties\n * @returns {Binding}\n */\nfunction Binding (state) {\n    state = Object.assign({ category, bindings: {} }, state);\n\n    const base = {\n        /**\n         * Bind values to query parameters.\n         * @function\n         * @name Binding#bind\n         * @param {string|Object} parameter - parameter name or mapping object\n         * @param {string} [value]\n         * @example\n         * // parameter name and value as arguments\n         * const query = collection.find('foo = :foo').bind('foo', 'bar')\n         *\n         * // parameter name and value as key-value pair in an object\n         * const query = collection.find('foo = :foo').bind({ foo: 'bar' })\n         * @returns {Binding} The query instance.\n         */\n        bind () {\n            if (!arguments.length) {\n                return this;\n            }\n\n            let binding = {};\n\n            if (Object(arguments[0]) === arguments[0]) {\n                binding = arguments[0];\n            } else {\n                binding = { [arguments[0]]: arguments[1] };\n            }\n\n            return this.setBindings(Object.assign({}, state.bindings, binding));\n        },\n\n        /**\n         * Retrieve the mapping of placeholders and values to bind.\n         * @function\n         * @private\n         * @name Binding#getBindings\n         * @returns {Object} The object containing the placeholder names and their values.\n         */\n        getBindings () {\n            return state.bindings;\n        },\n\n        /**\n         * Set the mapping of placeholders and values to bind.\n         * @function\n         * @private\n         * @name Binding#setBindings\n         * @param {Object} bindings - object with placeholders and values\n         * @returns {Binding} The query instance.\n         */\n        setBindings (bindings) {\n            state.bindings = bindings;\n\n            return this;\n        }\n    };\n\n    if (state.category === query.Type.DOCUMENT) {\n        return Object.assign({}, filtering(state), base);\n    }\n\n    return Object.assign({}, tableFiltering(state), base);\n}\n\nmodule.exports = Binding;\n"]},"metadata":{},"sourceType":"script"}