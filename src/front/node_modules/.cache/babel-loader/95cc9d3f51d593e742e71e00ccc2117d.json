{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\nvar jspb = require('google-protobuf');\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar mysqlx_pb = require('./mysqlx_pb.js');\n\ngoog.exportSymbol('proto.Mysqlx.Resultset.ColumnMetaData', null, global);\ngoog.exportSymbol('proto.Mysqlx.Resultset.ColumnMetaData.FieldType', null, global);\ngoog.exportSymbol('proto.Mysqlx.Resultset.ContentType_BYTES', null, global);\ngoog.exportSymbol('proto.Mysqlx.Resultset.ContentType_DATETIME', null, global);\ngoog.exportSymbol('proto.Mysqlx.Resultset.FetchDone', null, global);\ngoog.exportSymbol('proto.Mysqlx.Resultset.FetchDoneMoreOutParams', null, global);\ngoog.exportSymbol('proto.Mysqlx.Resultset.FetchDoneMoreResultsets', null, global);\ngoog.exportSymbol('proto.Mysqlx.Resultset.FetchSuspended', null, global);\ngoog.exportSymbol('proto.Mysqlx.Resultset.Row', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.Mysqlx.Resultset.FetchDoneMoreOutParams = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Resultset.FetchDoneMoreOutParams, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Resultset.FetchDoneMoreOutParams.displayName = 'proto.Mysqlx.Resultset.FetchDoneMoreOutParams';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Resultset.FetchDoneMoreOutParams.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Resultset.FetchDoneMoreOutParams.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Resultset.FetchDoneMoreOutParams} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Resultset.FetchDoneMoreOutParams.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {};\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Resultset.FetchDoneMoreOutParams}\n */\n\n\nproto.Mysqlx.Resultset.FetchDoneMoreOutParams.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Resultset.FetchDoneMoreOutParams();\n  return proto.Mysqlx.Resultset.FetchDoneMoreOutParams.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Resultset.FetchDoneMoreOutParams} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Resultset.FetchDoneMoreOutParams}\n */\n\n\nproto.Mysqlx.Resultset.FetchDoneMoreOutParams.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Resultset.FetchDoneMoreOutParams.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Resultset.FetchDoneMoreOutParams.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Resultset.FetchDoneMoreOutParams} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Resultset.FetchDoneMoreOutParams.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Resultset.FetchDoneMoreResultsets = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Resultset.FetchDoneMoreResultsets, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Resultset.FetchDoneMoreResultsets.displayName = 'proto.Mysqlx.Resultset.FetchDoneMoreResultsets';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Resultset.FetchDoneMoreResultsets.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Resultset.FetchDoneMoreResultsets.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Resultset.FetchDoneMoreResultsets} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Resultset.FetchDoneMoreResultsets.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {};\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Resultset.FetchDoneMoreResultsets}\n */\n\n\nproto.Mysqlx.Resultset.FetchDoneMoreResultsets.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Resultset.FetchDoneMoreResultsets();\n  return proto.Mysqlx.Resultset.FetchDoneMoreResultsets.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Resultset.FetchDoneMoreResultsets} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Resultset.FetchDoneMoreResultsets}\n */\n\n\nproto.Mysqlx.Resultset.FetchDoneMoreResultsets.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Resultset.FetchDoneMoreResultsets.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Resultset.FetchDoneMoreResultsets.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Resultset.FetchDoneMoreResultsets} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Resultset.FetchDoneMoreResultsets.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Resultset.FetchDone = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Resultset.FetchDone, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Resultset.FetchDone.displayName = 'proto.Mysqlx.Resultset.FetchDone';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Resultset.FetchDone.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Resultset.FetchDone.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Resultset.FetchDone} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Resultset.FetchDone.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {};\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Resultset.FetchDone}\n */\n\n\nproto.Mysqlx.Resultset.FetchDone.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Resultset.FetchDone();\n  return proto.Mysqlx.Resultset.FetchDone.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Resultset.FetchDone} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Resultset.FetchDone}\n */\n\n\nproto.Mysqlx.Resultset.FetchDone.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Resultset.FetchDone.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Resultset.FetchDone.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Resultset.FetchDone} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Resultset.FetchDone.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Resultset.FetchSuspended = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Resultset.FetchSuspended, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Resultset.FetchSuspended.displayName = 'proto.Mysqlx.Resultset.FetchSuspended';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Resultset.FetchSuspended.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Resultset.FetchSuspended.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Resultset.FetchSuspended} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Resultset.FetchSuspended.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {};\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Resultset.FetchSuspended}\n */\n\n\nproto.Mysqlx.Resultset.FetchSuspended.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Resultset.FetchSuspended();\n  return proto.Mysqlx.Resultset.FetchSuspended.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Resultset.FetchSuspended} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Resultset.FetchSuspended}\n */\n\n\nproto.Mysqlx.Resultset.FetchSuspended.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Resultset.FetchSuspended.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Resultset.FetchSuspended.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Resultset.FetchSuspended} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Resultset.FetchSuspended.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Resultset.ColumnMetaData, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Resultset.ColumnMetaData.displayName = 'proto.Mysqlx.Resultset.ColumnMetaData';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Resultset.ColumnMetaData.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Resultset.ColumnMetaData.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Resultset.ColumnMetaData} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Resultset.ColumnMetaData.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      type: jspb.Message.getField(msg, 1),\n      name: msg.getName_asB64(),\n      originalName: msg.getOriginalName_asB64(),\n      table: msg.getTable_asB64(),\n      originalTable: msg.getOriginalTable_asB64(),\n      schema: msg.getSchema_asB64(),\n      catalog: msg.getCatalog_asB64(),\n      collation: jspb.Message.getField(msg, 8),\n      fractionalDigits: jspb.Message.getField(msg, 9),\n      length: jspb.Message.getField(msg, 10),\n      flags: jspb.Message.getField(msg, 11),\n      contentType: jspb.Message.getField(msg, 12)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Resultset.ColumnMetaData}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Resultset.ColumnMetaData();\n  return proto.Mysqlx.Resultset.ColumnMetaData.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Resultset.ColumnMetaData} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Resultset.ColumnMetaData}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!proto.Mysqlx.Resultset.ColumnMetaData.FieldType} */\n        reader.readEnum();\n        msg.setType(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setName(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setOriginalName(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setTable(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setOriginalTable(value);\n        break;\n\n      case 6:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setSchema(value);\n        break;\n\n      case 7:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setCatalog(value);\n        break;\n\n      case 8:\n        var value =\n        /** @type {number} */\n        reader.readUint64();\n        msg.setCollation(value);\n        break;\n\n      case 9:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setFractionalDigits(value);\n        break;\n\n      case 10:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setLength(value);\n        break;\n\n      case 11:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setFlags(value);\n        break;\n\n      case 12:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setContentType(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Resultset.ColumnMetaData.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Resultset.ColumnMetaData} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {!proto.Mysqlx.Resultset.ColumnMetaData.FieldType} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeEnum(1, f);\n  }\n\n  f =\n  /** @type {!(string|Uint8Array)} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeBytes(2, f);\n  }\n\n  f =\n  /** @type {!(string|Uint8Array)} */\n  jspb.Message.getField(message, 3);\n\n  if (f != null) {\n    writer.writeBytes(3, f);\n  }\n\n  f =\n  /** @type {!(string|Uint8Array)} */\n  jspb.Message.getField(message, 4);\n\n  if (f != null) {\n    writer.writeBytes(4, f);\n  }\n\n  f =\n  /** @type {!(string|Uint8Array)} */\n  jspb.Message.getField(message, 5);\n\n  if (f != null) {\n    writer.writeBytes(5, f);\n  }\n\n  f =\n  /** @type {!(string|Uint8Array)} */\n  jspb.Message.getField(message, 6);\n\n  if (f != null) {\n    writer.writeBytes(6, f);\n  }\n\n  f =\n  /** @type {!(string|Uint8Array)} */\n  jspb.Message.getField(message, 7);\n\n  if (f != null) {\n    writer.writeBytes(7, f);\n  }\n\n  f =\n  /** @type {number} */\n  jspb.Message.getField(message, 8);\n\n  if (f != null) {\n    writer.writeUint64(8, f);\n  }\n\n  f =\n  /** @type {number} */\n  jspb.Message.getField(message, 9);\n\n  if (f != null) {\n    writer.writeUint32(9, f);\n  }\n\n  f =\n  /** @type {number} */\n  jspb.Message.getField(message, 10);\n\n  if (f != null) {\n    writer.writeUint32(10, f);\n  }\n\n  f =\n  /** @type {number} */\n  jspb.Message.getField(message, 11);\n\n  if (f != null) {\n    writer.writeUint32(11, f);\n  }\n\n  f =\n  /** @type {number} */\n  jspb.Message.getField(message, 12);\n\n  if (f != null) {\n    writer.writeUint32(12, f);\n  }\n};\n/**\n * @enum {number}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.FieldType = {\n  SINT: 1,\n  UINT: 2,\n  DOUBLE: 5,\n  FLOAT: 6,\n  BYTES: 7,\n  TIME: 10,\n  DATETIME: 12,\n  SET: 15,\n  ENUM: 16,\n  BIT: 17,\n  DECIMAL: 18\n};\n/**\n * required FieldType type = 1;\n * @return {!proto.Mysqlx.Resultset.ColumnMetaData.FieldType}\n */\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getType = function () {\n  return (\n    /** @type {!proto.Mysqlx.Resultset.ColumnMetaData.FieldType} */\n    jspb.Message.getFieldWithDefault(this, 1, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Resultset.ColumnMetaData.FieldType} value */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setType = function (value) {\n  jspb.Message.setField(this, 1, value);\n};\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearType = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasType = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional bytes name = 2;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getName = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * optional bytes name = 2;\n * This is a type-conversion wrapper around `getName()`\n * @return {string}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getName_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getName())\n  );\n};\n/**\n * optional bytes name = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getName()`\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getName_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getName())\n  );\n};\n/** @param {!(string|Uint8Array)} value */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setName = function (value) {\n  jspb.Message.setField(this, 2, value);\n};\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearName = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasName = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional bytes original_name = 3;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getOriginalName = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 3, \"\")\n  );\n};\n/**\n * optional bytes original_name = 3;\n * This is a type-conversion wrapper around `getOriginalName()`\n * @return {string}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getOriginalName_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getOriginalName())\n  );\n};\n/**\n * optional bytes original_name = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOriginalName()`\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getOriginalName_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getOriginalName())\n  );\n};\n/** @param {!(string|Uint8Array)} value */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setOriginalName = function (value) {\n  jspb.Message.setField(this, 3, value);\n};\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearOriginalName = function () {\n  jspb.Message.setField(this, 3, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasOriginalName = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * optional bytes table = 4;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getTable = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 4, \"\")\n  );\n};\n/**\n * optional bytes table = 4;\n * This is a type-conversion wrapper around `getTable()`\n * @return {string}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getTable_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getTable())\n  );\n};\n/**\n * optional bytes table = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getTable()`\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getTable_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getTable())\n  );\n};\n/** @param {!(string|Uint8Array)} value */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setTable = function (value) {\n  jspb.Message.setField(this, 4, value);\n};\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearTable = function () {\n  jspb.Message.setField(this, 4, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasTable = function () {\n  return jspb.Message.getField(this, 4) != null;\n};\n/**\n * optional bytes original_table = 5;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getOriginalTable = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 5, \"\")\n  );\n};\n/**\n * optional bytes original_table = 5;\n * This is a type-conversion wrapper around `getOriginalTable()`\n * @return {string}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getOriginalTable_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getOriginalTable())\n  );\n};\n/**\n * optional bytes original_table = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOriginalTable()`\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getOriginalTable_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getOriginalTable())\n  );\n};\n/** @param {!(string|Uint8Array)} value */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setOriginalTable = function (value) {\n  jspb.Message.setField(this, 5, value);\n};\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearOriginalTable = function () {\n  jspb.Message.setField(this, 5, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasOriginalTable = function () {\n  return jspb.Message.getField(this, 5) != null;\n};\n/**\n * optional bytes schema = 6;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getSchema = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 6, \"\")\n  );\n};\n/**\n * optional bytes schema = 6;\n * This is a type-conversion wrapper around `getSchema()`\n * @return {string}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getSchema_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getSchema())\n  );\n};\n/**\n * optional bytes schema = 6;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSchema()`\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getSchema_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getSchema())\n  );\n};\n/** @param {!(string|Uint8Array)} value */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setSchema = function (value) {\n  jspb.Message.setField(this, 6, value);\n};\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearSchema = function () {\n  jspb.Message.setField(this, 6, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasSchema = function () {\n  return jspb.Message.getField(this, 6) != null;\n};\n/**\n * optional bytes catalog = 7;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getCatalog = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 7, \"\")\n  );\n};\n/**\n * optional bytes catalog = 7;\n * This is a type-conversion wrapper around `getCatalog()`\n * @return {string}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getCatalog_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getCatalog())\n  );\n};\n/**\n * optional bytes catalog = 7;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getCatalog()`\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getCatalog_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getCatalog())\n  );\n};\n/** @param {!(string|Uint8Array)} value */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setCatalog = function (value) {\n  jspb.Message.setField(this, 7, value);\n};\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearCatalog = function () {\n  jspb.Message.setField(this, 7, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasCatalog = function () {\n  return jspb.Message.getField(this, 7) != null;\n};\n/**\n * optional uint64 collation = 8;\n * @return {number}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getCollation = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 8, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setCollation = function (value) {\n  jspb.Message.setField(this, 8, value);\n};\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearCollation = function () {\n  jspb.Message.setField(this, 8, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasCollation = function () {\n  return jspb.Message.getField(this, 8) != null;\n};\n/**\n * optional uint32 fractional_digits = 9;\n * @return {number}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getFractionalDigits = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 9, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setFractionalDigits = function (value) {\n  jspb.Message.setField(this, 9, value);\n};\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearFractionalDigits = function () {\n  jspb.Message.setField(this, 9, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasFractionalDigits = function () {\n  return jspb.Message.getField(this, 9) != null;\n};\n/**\n * optional uint32 length = 10;\n * @return {number}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getLength = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 10, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setLength = function (value) {\n  jspb.Message.setField(this, 10, value);\n};\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearLength = function () {\n  jspb.Message.setField(this, 10, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasLength = function () {\n  return jspb.Message.getField(this, 10) != null;\n};\n/**\n * optional uint32 flags = 11;\n * @return {number}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getFlags = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 11, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setFlags = function (value) {\n  jspb.Message.setField(this, 11, value);\n};\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearFlags = function () {\n  jspb.Message.setField(this, 11, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasFlags = function () {\n  return jspb.Message.getField(this, 11) != null;\n};\n/**\n * optional uint32 content_type = 12;\n * @return {number}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getContentType = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 12, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setContentType = function (value) {\n  jspb.Message.setField(this, 12, value);\n};\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearContentType = function () {\n  jspb.Message.setField(this, 12, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasContentType = function () {\n  return jspb.Message.getField(this, 12) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Resultset.Row = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Resultset.Row.repeatedFields_, null);\n};\n\ngoog.inherits(proto.Mysqlx.Resultset.Row, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Resultset.Row.displayName = 'proto.Mysqlx.Resultset.Row';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.Mysqlx.Resultset.Row.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Resultset.Row.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Resultset.Row.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Resultset.Row} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Resultset.Row.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      fieldList: msg.getFieldList_asB64()\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Resultset.Row}\n */\n\n\nproto.Mysqlx.Resultset.Row.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Resultset.Row();\n  return proto.Mysqlx.Resultset.Row.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Resultset.Row} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Resultset.Row}\n */\n\n\nproto.Mysqlx.Resultset.Row.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.addField(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Resultset.Row.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Resultset.Row.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Resultset.Row} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Resultset.Row.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getFieldList_asU8();\n\n  if (f.length > 0) {\n    writer.writeRepeatedBytes(1, f);\n  }\n};\n/**\n * repeated bytes field = 1;\n * @return {!(Array<!Uint8Array>|Array<string>)}\n */\n\n\nproto.Mysqlx.Resultset.Row.prototype.getFieldList = function () {\n  return (\n    /** @type {!(Array<!Uint8Array>|Array<string>)} */\n    jspb.Message.getRepeatedField(this, 1)\n  );\n};\n/**\n * repeated bytes field = 1;\n * This is a type-conversion wrapper around `getFieldList()`\n * @return {!Array.<string>}\n */\n\n\nproto.Mysqlx.Resultset.Row.prototype.getFieldList_asB64 = function () {\n  return (\n    /** @type {!Array.<string>} */\n    jspb.Message.bytesListAsB64(this.getFieldList())\n  );\n};\n/**\n * repeated bytes field = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getFieldList()`\n * @return {!Array.<!Uint8Array>}\n */\n\n\nproto.Mysqlx.Resultset.Row.prototype.getFieldList_asU8 = function () {\n  return (\n    /** @type {!Array.<!Uint8Array>} */\n    jspb.Message.bytesListAsU8(this.getFieldList())\n  );\n};\n/** @param {!(Array<!Uint8Array>|Array<string>)} value */\n\n\nproto.Mysqlx.Resultset.Row.prototype.setFieldList = function (value) {\n  jspb.Message.setField(this, 1, value || []);\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @param {number=} opt_index\n */\n\n\nproto.Mysqlx.Resultset.Row.prototype.addField = function (value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\nproto.Mysqlx.Resultset.Row.prototype.clearFieldList = function () {\n  this.setFieldList([]);\n};\n/**\n * @enum {number}\n */\n\n\nproto.Mysqlx.Resultset.ContentType_BYTES = {\n  GEOMETRY: 1,\n  JSON: 2,\n  XML: 3\n};\n/**\n * @enum {number}\n */\n\nproto.Mysqlx.Resultset.ContentType_DATETIME = {\n  DATE: 1,\n  DATETIME: 2\n};\ngoog.object.extend(exports, proto.Mysqlx.Resultset);","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Stubs/mysqlx_resultset_pb.js"],"names":["jspb","require","goog","global","Function","mysqlx_pb","exportSymbol","proto","Mysqlx","Resultset","FetchDoneMoreOutParams","opt_data","Message","initialize","inherits","DEBUG","COMPILED","displayName","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","undefined","FetchDoneMoreResultsets","FetchDone","FetchSuspended","ColumnMetaData","type","getField","name","getName_asB64","originalName","getOriginalName_asB64","table","getTable_asB64","originalTable","getOriginalTable_asB64","schema","getSchema_asB64","catalog","getCatalog_asB64","collation","fractionalDigits","length","flags","contentType","value","readEnum","setType","readBytes","setName","setOriginalName","setTable","setOriginalTable","setSchema","setCatalog","readUint64","setCollation","readUint32","setFractionalDigits","setLength","setFlags","setContentType","writeEnum","writeBytes","writeUint64","writeUint32","FieldType","SINT","UINT","DOUBLE","FLOAT","BYTES","TIME","DATETIME","SET","ENUM","BIT","DECIMAL","getType","getFieldWithDefault","setField","clearType","hasType","getName","bytesAsB64","getName_asU8","bytesAsU8","clearName","hasName","getOriginalName","getOriginalName_asU8","clearOriginalName","hasOriginalName","getTable","getTable_asU8","clearTable","hasTable","getOriginalTable","getOriginalTable_asU8","clearOriginalTable","hasOriginalTable","getSchema","getSchema_asU8","clearSchema","hasSchema","getCatalog","getCatalog_asU8","clearCatalog","hasCatalog","getCollation","clearCollation","hasCollation","getFractionalDigits","clearFractionalDigits","hasFractionalDigits","getLength","clearLength","hasLength","getFlags","clearFlags","hasFlags","getContentType","clearContentType","hasContentType","Row","repeatedFields_","fieldList","getFieldList_asB64","addField","getFieldList_asU8","writeRepeatedBytes","getFieldList","getRepeatedField","bytesListAsB64","bytesListAsU8","setFieldList","opt_index","addToRepeatedField","clearFieldList","ContentType_BYTES","GEOMETRY","JSON","XML","ContentType_DATETIME","DATE","object","extend","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar mysqlx_pb = require('./mysqlx_pb.js');\ngoog.exportSymbol('proto.Mysqlx.Resultset.ColumnMetaData', null, global);\ngoog.exportSymbol('proto.Mysqlx.Resultset.ColumnMetaData.FieldType', null, global);\ngoog.exportSymbol('proto.Mysqlx.Resultset.ContentType_BYTES', null, global);\ngoog.exportSymbol('proto.Mysqlx.Resultset.ContentType_DATETIME', null, global);\ngoog.exportSymbol('proto.Mysqlx.Resultset.FetchDone', null, global);\ngoog.exportSymbol('proto.Mysqlx.Resultset.FetchDoneMoreOutParams', null, global);\ngoog.exportSymbol('proto.Mysqlx.Resultset.FetchDoneMoreResultsets', null, global);\ngoog.exportSymbol('proto.Mysqlx.Resultset.FetchSuspended', null, global);\ngoog.exportSymbol('proto.Mysqlx.Resultset.Row', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Resultset.FetchDoneMoreOutParams = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Resultset.FetchDoneMoreOutParams, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Resultset.FetchDoneMoreOutParams.displayName = 'proto.Mysqlx.Resultset.FetchDoneMoreOutParams';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Resultset.FetchDoneMoreOutParams.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Resultset.FetchDoneMoreOutParams.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Resultset.FetchDoneMoreOutParams} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Resultset.FetchDoneMoreOutParams.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Resultset.FetchDoneMoreOutParams}\n */\nproto.Mysqlx.Resultset.FetchDoneMoreOutParams.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Resultset.FetchDoneMoreOutParams;\n  return proto.Mysqlx.Resultset.FetchDoneMoreOutParams.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Resultset.FetchDoneMoreOutParams} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Resultset.FetchDoneMoreOutParams}\n */\nproto.Mysqlx.Resultset.FetchDoneMoreOutParams.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Resultset.FetchDoneMoreOutParams.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Resultset.FetchDoneMoreOutParams.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Resultset.FetchDoneMoreOutParams} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Resultset.FetchDoneMoreOutParams.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Resultset.FetchDoneMoreResultsets = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Resultset.FetchDoneMoreResultsets, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Resultset.FetchDoneMoreResultsets.displayName = 'proto.Mysqlx.Resultset.FetchDoneMoreResultsets';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Resultset.FetchDoneMoreResultsets.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Resultset.FetchDoneMoreResultsets.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Resultset.FetchDoneMoreResultsets} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Resultset.FetchDoneMoreResultsets.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Resultset.FetchDoneMoreResultsets}\n */\nproto.Mysqlx.Resultset.FetchDoneMoreResultsets.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Resultset.FetchDoneMoreResultsets;\n  return proto.Mysqlx.Resultset.FetchDoneMoreResultsets.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Resultset.FetchDoneMoreResultsets} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Resultset.FetchDoneMoreResultsets}\n */\nproto.Mysqlx.Resultset.FetchDoneMoreResultsets.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Resultset.FetchDoneMoreResultsets.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Resultset.FetchDoneMoreResultsets.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Resultset.FetchDoneMoreResultsets} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Resultset.FetchDoneMoreResultsets.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Resultset.FetchDone = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Resultset.FetchDone, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Resultset.FetchDone.displayName = 'proto.Mysqlx.Resultset.FetchDone';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Resultset.FetchDone.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Resultset.FetchDone.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Resultset.FetchDone} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Resultset.FetchDone.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Resultset.FetchDone}\n */\nproto.Mysqlx.Resultset.FetchDone.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Resultset.FetchDone;\n  return proto.Mysqlx.Resultset.FetchDone.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Resultset.FetchDone} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Resultset.FetchDone}\n */\nproto.Mysqlx.Resultset.FetchDone.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Resultset.FetchDone.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Resultset.FetchDone.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Resultset.FetchDone} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Resultset.FetchDone.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Resultset.FetchSuspended = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Resultset.FetchSuspended, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Resultset.FetchSuspended.displayName = 'proto.Mysqlx.Resultset.FetchSuspended';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Resultset.FetchSuspended.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Resultset.FetchSuspended.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Resultset.FetchSuspended} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Resultset.FetchSuspended.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Resultset.FetchSuspended}\n */\nproto.Mysqlx.Resultset.FetchSuspended.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Resultset.FetchSuspended;\n  return proto.Mysqlx.Resultset.FetchSuspended.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Resultset.FetchSuspended} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Resultset.FetchSuspended}\n */\nproto.Mysqlx.Resultset.FetchSuspended.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Resultset.FetchSuspended.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Resultset.FetchSuspended.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Resultset.FetchSuspended} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Resultset.FetchSuspended.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Resultset.ColumnMetaData = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Resultset.ColumnMetaData, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Resultset.ColumnMetaData.displayName = 'proto.Mysqlx.Resultset.ColumnMetaData';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Resultset.ColumnMetaData.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Resultset.ColumnMetaData} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Resultset.ColumnMetaData.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    type: jspb.Message.getField(msg, 1),\n    name: msg.getName_asB64(),\n    originalName: msg.getOriginalName_asB64(),\n    table: msg.getTable_asB64(),\n    originalTable: msg.getOriginalTable_asB64(),\n    schema: msg.getSchema_asB64(),\n    catalog: msg.getCatalog_asB64(),\n    collation: jspb.Message.getField(msg, 8),\n    fractionalDigits: jspb.Message.getField(msg, 9),\n    length: jspb.Message.getField(msg, 10),\n    flags: jspb.Message.getField(msg, 11),\n    contentType: jspb.Message.getField(msg, 12)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Resultset.ColumnMetaData}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Resultset.ColumnMetaData;\n  return proto.Mysqlx.Resultset.ColumnMetaData.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Resultset.ColumnMetaData} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Resultset.ColumnMetaData}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.Mysqlx.Resultset.ColumnMetaData.FieldType} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setName(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOriginalName(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setTable(value);\n      break;\n    case 5:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOriginalTable(value);\n      break;\n    case 6:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSchema(value);\n      break;\n    case 7:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setCatalog(value);\n      break;\n    case 8:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setCollation(value);\n      break;\n    case 9:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setFractionalDigits(value);\n      break;\n    case 10:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setLength(value);\n      break;\n    case 11:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setFlags(value);\n      break;\n    case 12:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setContentType(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Resultset.ColumnMetaData.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Resultset.ColumnMetaData} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Resultset.ColumnMetaData.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {!proto.Mysqlx.Resultset.ColumnMetaData.FieldType} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));\n  if (f != null) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));\n  if (f != null) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));\n  if (f != null) {\n    writer.writeBytes(\n      5,\n      f\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));\n  if (f != null) {\n    writer.writeBytes(\n      6,\n      f\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));\n  if (f != null) {\n    writer.writeBytes(\n      7,\n      f\n    );\n  }\n  f = /** @type {number} */ (jspb.Message.getField(message, 8));\n  if (f != null) {\n    writer.writeUint64(\n      8,\n      f\n    );\n  }\n  f = /** @type {number} */ (jspb.Message.getField(message, 9));\n  if (f != null) {\n    writer.writeUint32(\n      9,\n      f\n    );\n  }\n  f = /** @type {number} */ (jspb.Message.getField(message, 10));\n  if (f != null) {\n    writer.writeUint32(\n      10,\n      f\n    );\n  }\n  f = /** @type {number} */ (jspb.Message.getField(message, 11));\n  if (f != null) {\n    writer.writeUint32(\n      11,\n      f\n    );\n  }\n  f = /** @type {number} */ (jspb.Message.getField(message, 12));\n  if (f != null) {\n    writer.writeUint32(\n      12,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.FieldType = {\n  SINT: 1,\n  UINT: 2,\n  DOUBLE: 5,\n  FLOAT: 6,\n  BYTES: 7,\n  TIME: 10,\n  DATETIME: 12,\n  SET: 15,\n  ENUM: 16,\n  BIT: 17,\n  DECIMAL: 18\n};\n\n/**\n * required FieldType type = 1;\n * @return {!proto.Mysqlx.Resultset.ColumnMetaData.FieldType}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getType = function() {\n  return /** @type {!proto.Mysqlx.Resultset.ColumnMetaData.FieldType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Resultset.ColumnMetaData.FieldType} value */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setType = function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearType = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasType = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional bytes name = 2;\n * @return {!(string|Uint8Array)}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getName = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes name = 2;\n * This is a type-conversion wrapper around `getName()`\n * @return {string}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getName_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getName()));\n};\n\n\n/**\n * optional bytes name = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getName()`\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getName_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getName()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setName = function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearName = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasName = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional bytes original_name = 3;\n * @return {!(string|Uint8Array)}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getOriginalName = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes original_name = 3;\n * This is a type-conversion wrapper around `getOriginalName()`\n * @return {string}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getOriginalName_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOriginalName()));\n};\n\n\n/**\n * optional bytes original_name = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOriginalName()`\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getOriginalName_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOriginalName()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setOriginalName = function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearOriginalName = function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasOriginalName = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional bytes table = 4;\n * @return {!(string|Uint8Array)}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getTable = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes table = 4;\n * This is a type-conversion wrapper around `getTable()`\n * @return {string}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getTable_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getTable()));\n};\n\n\n/**\n * optional bytes table = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getTable()`\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getTable_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getTable()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setTable = function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearTable = function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasTable = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional bytes original_table = 5;\n * @return {!(string|Uint8Array)}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getOriginalTable = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * optional bytes original_table = 5;\n * This is a type-conversion wrapper around `getOriginalTable()`\n * @return {string}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getOriginalTable_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOriginalTable()));\n};\n\n\n/**\n * optional bytes original_table = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOriginalTable()`\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getOriginalTable_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOriginalTable()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setOriginalTable = function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearOriginalTable = function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasOriginalTable = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * optional bytes schema = 6;\n * @return {!(string|Uint8Array)}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getSchema = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, \"\"));\n};\n\n\n/**\n * optional bytes schema = 6;\n * This is a type-conversion wrapper around `getSchema()`\n * @return {string}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getSchema_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSchema()));\n};\n\n\n/**\n * optional bytes schema = 6;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSchema()`\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getSchema_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSchema()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setSchema = function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearSchema = function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasSchema = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n/**\n * optional bytes catalog = 7;\n * @return {!(string|Uint8Array)}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getCatalog = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, \"\"));\n};\n\n\n/**\n * optional bytes catalog = 7;\n * This is a type-conversion wrapper around `getCatalog()`\n * @return {string}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getCatalog_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getCatalog()));\n};\n\n\n/**\n * optional bytes catalog = 7;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getCatalog()`\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getCatalog_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getCatalog()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setCatalog = function(value) {\n  jspb.Message.setField(this, 7, value);\n};\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearCatalog = function() {\n  jspb.Message.setField(this, 7, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasCatalog = function() {\n  return jspb.Message.getField(this, 7) != null;\n};\n\n\n/**\n * optional uint64 collation = 8;\n * @return {number}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getCollation = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));\n};\n\n\n/** @param {number} value */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setCollation = function(value) {\n  jspb.Message.setField(this, 8, value);\n};\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearCollation = function() {\n  jspb.Message.setField(this, 8, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasCollation = function() {\n  return jspb.Message.getField(this, 8) != null;\n};\n\n\n/**\n * optional uint32 fractional_digits = 9;\n * @return {number}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getFractionalDigits = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));\n};\n\n\n/** @param {number} value */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setFractionalDigits = function(value) {\n  jspb.Message.setField(this, 9, value);\n};\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearFractionalDigits = function() {\n  jspb.Message.setField(this, 9, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasFractionalDigits = function() {\n  return jspb.Message.getField(this, 9) != null;\n};\n\n\n/**\n * optional uint32 length = 10;\n * @return {number}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getLength = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));\n};\n\n\n/** @param {number} value */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setLength = function(value) {\n  jspb.Message.setField(this, 10, value);\n};\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearLength = function() {\n  jspb.Message.setField(this, 10, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasLength = function() {\n  return jspb.Message.getField(this, 10) != null;\n};\n\n\n/**\n * optional uint32 flags = 11;\n * @return {number}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getFlags = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));\n};\n\n\n/** @param {number} value */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setFlags = function(value) {\n  jspb.Message.setField(this, 11, value);\n};\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearFlags = function() {\n  jspb.Message.setField(this, 11, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasFlags = function() {\n  return jspb.Message.getField(this, 11) != null;\n};\n\n\n/**\n * optional uint32 content_type = 12;\n * @return {number}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.getContentType = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));\n};\n\n\n/** @param {number} value */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.setContentType = function(value) {\n  jspb.Message.setField(this, 12, value);\n};\n\n\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.clearContentType = function() {\n  jspb.Message.setField(this, 12, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Resultset.ColumnMetaData.prototype.hasContentType = function() {\n  return jspb.Message.getField(this, 12) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Resultset.Row = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Resultset.Row.repeatedFields_, null);\n};\ngoog.inherits(proto.Mysqlx.Resultset.Row, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Resultset.Row.displayName = 'proto.Mysqlx.Resultset.Row';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Mysqlx.Resultset.Row.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Resultset.Row.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Resultset.Row.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Resultset.Row} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Resultset.Row.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    fieldList: msg.getFieldList_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Resultset.Row}\n */\nproto.Mysqlx.Resultset.Row.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Resultset.Row;\n  return proto.Mysqlx.Resultset.Row.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Resultset.Row} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Resultset.Row}\n */\nproto.Mysqlx.Resultset.Row.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.addField(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Resultset.Row.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Resultset.Row.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Resultset.Row} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Resultset.Row.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getFieldList_asU8();\n  if (f.length > 0) {\n    writer.writeRepeatedBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated bytes field = 1;\n * @return {!(Array<!Uint8Array>|Array<string>)}\n */\nproto.Mysqlx.Resultset.Row.prototype.getFieldList = function() {\n  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * repeated bytes field = 1;\n * This is a type-conversion wrapper around `getFieldList()`\n * @return {!Array.<string>}\n */\nproto.Mysqlx.Resultset.Row.prototype.getFieldList_asB64 = function() {\n  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(\n      this.getFieldList()));\n};\n\n\n/**\n * repeated bytes field = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getFieldList()`\n * @return {!Array.<!Uint8Array>}\n */\nproto.Mysqlx.Resultset.Row.prototype.getFieldList_asU8 = function() {\n  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(\n      this.getFieldList()));\n};\n\n\n/** @param {!(Array<!Uint8Array>|Array<string>)} value */\nproto.Mysqlx.Resultset.Row.prototype.setFieldList = function(value) {\n  jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @param {number=} opt_index\n */\nproto.Mysqlx.Resultset.Row.prototype.addField = function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\nproto.Mysqlx.Resultset.Row.prototype.clearFieldList = function() {\n  this.setFieldList([]);\n};\n\n\n/**\n * @enum {number}\n */\nproto.Mysqlx.Resultset.ContentType_BYTES = {\n  GEOMETRY: 1,\n  JSON: 2,\n  XML: 3\n};\n\n/**\n * @enum {number}\n */\nproto.Mysqlx.Resultset.ContentType_DATETIME = {\n  DATE: 1,\n  DATETIME: 2\n};\n\ngoog.object.extend(exports, proto.Mysqlx.Resultset);\n"]},"metadata":{},"sourceType":"script"}