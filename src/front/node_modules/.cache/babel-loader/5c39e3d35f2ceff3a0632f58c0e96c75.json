{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst Expr = require('../../../../Protocol/Stubs/mysqlx_expr_pb');\n\nconst Pa = require('parsimmon');\n\nconst parser = options => r => Pa.seq(Pa.string('{'), Pa.optWhitespace, Pa.seq(r.jsonKeyValue, Pa.seq(Pa.optWhitespace, Pa.string(','), Pa.optWhitespace, r.jsonKeyValue).many()).atMost(1).map(data => {\n  const obj = new Expr.Object();\n  const optional = data[0];\n\n  if (!optional) {\n    return obj;\n  }\n\n  obj.addFld(optional[0]);\n  optional[1].forEach(additional => {\n    obj.addFld(additional[3]);\n  });\n  return obj;\n}), Pa.optWhitespace, Pa.string('}')).map(data => {\n  const expr = new Expr.Expr();\n  expr.setType(Expr.Expr.Type.OBJECT);\n  expr.setObject(data[2]);\n  return expr;\n});\n\nmodule.exports = {\n  name: 'JSON_DOC',\n  parser\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/ExprParser/lib/grammar/booleanExpressions/jsonDoc.js"],"names":["Expr","require","Pa","parser","options","r","seq","string","optWhitespace","jsonKeyValue","many","atMost","map","data","obj","Object","optional","addFld","forEach","additional","expr","setType","Type","OBJECT","setObject","module","exports","name"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,2CAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,WAAD,CAAlB;;AAEA,MAAME,MAAM,GAAGC,OAAO,IAAIC,CAAC,IAAIH,EAAE,CAC5BI,GAD0B,CAEvBJ,EAAE,CAACK,MAAH,CAAU,GAAV,CAFuB,EAGvBL,EAAE,CAACM,aAHoB,EAIvBN,EAAE,CACGI,GADL,CAEQD,CAAC,CAACI,YAFV,EAGQP,EAAE,CAACI,GAAH,CAAOJ,EAAE,CAACM,aAAV,EAAyBN,EAAE,CAACK,MAAH,CAAU,GAAV,CAAzB,EAAyCL,EAAE,CAACM,aAA5C,EAA2DH,CAAC,CAACI,YAA7D,EAA2EC,IAA3E,EAHR,EAKKC,MALL,CAKY,CALZ,EAMKC,GANL,CAMSC,IAAI,IAAI;AACT,QAAMC,GAAG,GAAG,IAAId,IAAI,CAACe,MAAT,EAAZ;AACA,QAAMC,QAAQ,GAAGH,IAAI,CAAC,CAAD,CAArB;;AAEA,MAAI,CAACG,QAAL,EAAe;AACX,WAAOF,GAAP;AACH;;AAEDA,EAAAA,GAAG,CAACG,MAAJ,CAAWD,QAAQ,CAAC,CAAD,CAAnB;AACAA,EAAAA,QAAQ,CAAC,CAAD,CAAR,CAAYE,OAAZ,CAAoBC,UAAU,IAAI;AAC9BL,IAAAA,GAAG,CAACG,MAAJ,CAAWE,UAAU,CAAC,CAAD,CAArB;AACH,GAFD;AAIA,SAAOL,GAAP;AACH,CApBL,CAJuB,EAyBvBZ,EAAE,CAACM,aAzBoB,EA0BvBN,EAAE,CAACK,MAAH,CAAU,GAAV,CA1BuB,EA4B1BK,GA5B0B,CA4BtBC,IAAI,IAAI;AACT,QAAMO,IAAI,GAAG,IAAIpB,IAAI,CAACA,IAAT,EAAb;AACAoB,EAAAA,IAAI,CAACC,OAAL,CAAarB,IAAI,CAACA,IAAL,CAAUsB,IAAV,CAAeC,MAA5B;AACAH,EAAAA,IAAI,CAACI,SAAL,CAAeX,IAAI,CAAC,CAAD,CAAnB;AAEA,SAAOO,IAAP;AACH,CAlC0B,CAA/B;;AAoCAK,MAAM,CAACC,OAAP,GAAiB;AAAEC,EAAAA,IAAI,EAAE,UAAR;AAAoBxB,EAAAA;AAApB,CAAjB","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst Expr = require('../../../../Protocol/Stubs/mysqlx_expr_pb');\nconst Pa = require('parsimmon');\n\nconst parser = options => r => Pa\n    .seq(\n        Pa.string('{'),\n        Pa.optWhitespace,\n        Pa\n            .seq(\n                r.jsonKeyValue,\n                Pa.seq(Pa.optWhitespace, Pa.string(','), Pa.optWhitespace, r.jsonKeyValue).many()\n            )\n            .atMost(1)\n            .map(data => {\n                const obj = new Expr.Object();\n                const optional = data[0];\n\n                if (!optional) {\n                    return obj;\n                }\n\n                obj.addFld(optional[0]);\n                optional[1].forEach(additional => {\n                    obj.addFld(additional[3]);\n                });\n\n                return obj;\n            }),\n        Pa.optWhitespace,\n        Pa.string('}')\n    )\n    .map(data => {\n        const expr = new Expr.Expr();\n        expr.setType(Expr.Expr.Type.OBJECT);\n        expr.setObject(data[2]);\n\n        return expr;\n    });\n\nmodule.exports = { name: 'JSON_DOC', parser };\n"]},"metadata":{},"sourceType":"script"}