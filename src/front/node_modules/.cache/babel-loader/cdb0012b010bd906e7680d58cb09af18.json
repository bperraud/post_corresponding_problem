{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst wraps = require('../Traits/Wraps');\n/**\n * Wrapper for protobuf bytes values.\n * @private\n * @alias module:adapters.Protobuf.bytes\n * @param {Uint8Array} binary - the binary content\n * @returns {module:adapters.Protobuf.bytes}\n */\n\n\nfunction bytes(typedArray) {\n  return Object.assign({}, wraps(typedArray), {\n    /**\n     * Convert the underlying typed array to a Node.js Buffer instance\n     * using shared memory space.\n     * @function\n     * @name module:adapters.Protobuf.bytes#toBuffer\n     * @returns {Buffer}\n     */\n    toBuffer() {\n      if (!(typedArray instanceof Uint8Array)) {\n        return Buffer.alloc(0);\n      } // We should provide the byte offset and length in order to create\n      // a view of the shared ArrayBuffer and avoid creating a new copy.\n\n\n      return Buffer.from(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n    },\n\n    /**\n     * Serialize to JSON.\n     * @function\n     * @name module:adapters.Protobuf.bytes#toBuffer\n     * @returns {Buffer}\n     */\n    toJSON() {\n      return this.toBuffer().toJSON();\n    },\n\n    /**\n     * Decode the underlying binary data to a string of a specific encoding.\n     * @function\n     * @name module:adapters.Protobuf.bytes#toString\n     * @param {string} [encoding] - utf8 by default\n     * @returns {string}\n     */\n    toString(encoding) {\n      return this.toBuffer().toString(encoding);\n    }\n\n  });\n}\n/**\n * Create a protobuf bytes wrapper representation.\n * @param {Buffer} buffer\n * @returns {module:adapters.Protobuf.bytes}\n */\n\n\nbytes.create = function (buffer) {\n  if (!(buffer instanceof Buffer)) {\n    return bytes(new Uint8Array());\n  } // We should use the Uint8Array constructor with the buffer data, byte\n  // offset and length in order to create a view of the shared ArrayBuffer\n  // and avoid creating a new copy.\n\n\n  return bytes(new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength / Uint8Array.BYTES_PER_ELEMENT));\n};\n/**\n * Deserialize raw data from the network.\n * @param {Buffer} buffer - the raw data\n * @returns {Uint8Array}\n */\n\n\nbytes.deserialize = function (buffer) {\n  return this.create(buffer).valueOf();\n};\n\nmodule.exports = bytes;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/ScalarValues/bytes.js"],"names":["wraps","require","bytes","typedArray","Object","assign","toBuffer","Uint8Array","Buffer","alloc","from","buffer","byteOffset","byteLength","toJSON","toString","encoding","create","BYTES_PER_ELEMENT","deserialize","valueOf","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,iBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAgBC,UAAhB,EAA4B;AACxB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAK,CAACG,UAAD,CAAvB,EAAqC;AACxC;AACR;AACA;AACA;AACA;AACA;AACA;AACQG,IAAAA,QAAQ,GAAI;AACR,UAAI,EAAEH,UAAU,YAAYI,UAAxB,CAAJ,EAAyC;AACrC,eAAOC,MAAM,CAACC,KAAP,CAAa,CAAb,CAAP;AACH,OAHO,CAKR;AACA;;;AACA,aAAOD,MAAM,CAACE,IAAP,CAAYP,UAAU,CAACQ,MAAvB,EAA+BR,UAAU,CAACS,UAA1C,EAAsDT,UAAU,CAACU,UAAjE,CAAP;AACH,KAhBuC;;AAkBxC;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,MAAM,GAAI;AACN,aAAO,KAAKR,QAAL,GAAgBQ,MAAhB,EAAP;AACH,KA1BuC;;AA4BxC;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,QAAQ,CAAEC,QAAF,EAAY;AAChB,aAAO,KAAKV,QAAL,GAAgBS,QAAhB,CAAyBC,QAAzB,CAAP;AACH;;AArCuC,GAArC,CAAP;AAuCH;AAED;AACA;AACA;AACA;AACA;;;AACAd,KAAK,CAACe,MAAN,GAAe,UAAUN,MAAV,EAAkB;AAC7B,MAAI,EAAEA,MAAM,YAAYH,MAApB,CAAJ,EAAiC;AAC7B,WAAON,KAAK,CAAC,IAAIK,UAAJ,EAAD,CAAZ;AACH,GAH4B,CAK7B;AACA;AACA;;;AACA,SAAOL,KAAK,CAAC,IAAIK,UAAJ,CAAeI,MAAM,CAACA,MAAtB,EAA8BA,MAAM,CAACC,UAArC,EAAiDD,MAAM,CAACE,UAAP,GAAoBN,UAAU,CAACW,iBAAhF,CAAD,CAAZ;AACH,CATD;AAWA;AACA;AACA;AACA;AACA;;;AACAhB,KAAK,CAACiB,WAAN,GAAoB,UAAUR,MAAV,EAAkB;AAClC,SAAO,KAAKM,MAAL,CAAYN,MAAZ,EAAoBS,OAApB,EAAP;AACH,CAFD;;AAIAC,MAAM,CAACC,OAAP,GAAiBpB,KAAjB","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst wraps = require('../Traits/Wraps');\n\n/**\n * Wrapper for protobuf bytes values.\n * @private\n * @alias module:adapters.Protobuf.bytes\n * @param {Uint8Array} binary - the binary content\n * @returns {module:adapters.Protobuf.bytes}\n */\nfunction bytes (typedArray) {\n    return Object.assign({}, wraps(typedArray), {\n        /**\n         * Convert the underlying typed array to a Node.js Buffer instance\n         * using shared memory space.\n         * @function\n         * @name module:adapters.Protobuf.bytes#toBuffer\n         * @returns {Buffer}\n         */\n        toBuffer () {\n            if (!(typedArray instanceof Uint8Array)) {\n                return Buffer.alloc(0);\n            }\n\n            // We should provide the byte offset and length in order to create\n            // a view of the shared ArrayBuffer and avoid creating a new copy.\n            return Buffer.from(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n        },\n\n        /**\n         * Serialize to JSON.\n         * @function\n         * @name module:adapters.Protobuf.bytes#toBuffer\n         * @returns {Buffer}\n         */\n        toJSON () {\n            return this.toBuffer().toJSON();\n        },\n\n        /**\n         * Decode the underlying binary data to a string of a specific encoding.\n         * @function\n         * @name module:adapters.Protobuf.bytes#toString\n         * @param {string} [encoding] - utf8 by default\n         * @returns {string}\n         */\n        toString (encoding) {\n            return this.toBuffer().toString(encoding);\n        }\n    });\n}\n\n/**\n * Create a protobuf bytes wrapper representation.\n * @param {Buffer} buffer\n * @returns {module:adapters.Protobuf.bytes}\n */\nbytes.create = function (buffer) {\n    if (!(buffer instanceof Buffer)) {\n        return bytes(new Uint8Array());\n    }\n\n    // We should use the Uint8Array constructor with the buffer data, byte\n    // offset and length in order to create a view of the shared ArrayBuffer\n    // and avoid creating a new copy.\n    return bytes(new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength / Uint8Array.BYTES_PER_ELEMENT));\n};\n\n/**\n * Deserialize raw data from the network.\n * @param {Buffer} buffer - the raw data\n * @returns {Uint8Array}\n */\nbytes.deserialize = function (buffer) {\n    return this.create(buffer).valueOf();\n};\n\nmodule.exports = bytes;\n"]},"metadata":{},"sourceType":"script"}