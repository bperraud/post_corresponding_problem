{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst ConditionStub = require('../../../Stubs/mysqlx_expect_pb').Open.Condition;\n\nconst bytes = require('../../ScalarValues/bytes');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Expect.Condition\n * @param {proto.Mysqlx.Expect.Condition} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Expect.Condition}\n */\n\n\nfunction Condition(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Retrieve the name of the key for the expected condition.\n     * @function\n     * @name module:adapters.Mysqlx.Expect.Condition#getKey\n     * @returns {string} The key name\n     */\n    getKey() {\n      return Object.keys(ConditionStub.Key).filter(k => ConditionStub.Key[k] === proto.getConditionKey())[0];\n    },\n\n    /**\n     * Retrieve the name of the operation to execute if the condition passes.\n     * @function\n     * @name module:adapters.Mysqlx.Expect.Condition#getOperation\n     * @returns {string} The operation name\n     */\n    getOperation() {\n      return Object.keys(ConditionStub.ConditionOperation).filter(k => ConditionStub.ConditionOperation[k] === proto.getOp())[0];\n    },\n\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Expect.Condition#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        condition_key: this.getKey(),\n        condition_value: bytes(proto.getConditionValue()).toJSON(),\n        op: this.getOperation()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Expect.Condition instance for a given expectation.\n * @returns {module:adapters.Mysqlx.Expect.Condition}\n */\n\n\nCondition.create = function (expectation) {\n  const proto = new ConditionStub();\n  proto.setConditionKey(expectation.key);\n  proto.setConditionValue(bytes.create(Buffer.from(expectation.value)).valueOf());\n  proto.setOp(expectation.condition);\n  return Condition(proto);\n};\n\nCondition.ACTION = ConditionStub.ConditionOperation;\nCondition.TYPE = ConditionStub.Key;\nmodule.exports = Condition;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Expect/Condition.js"],"names":["ConditionStub","require","Open","Condition","bytes","wraps","proto","Object","assign","getKey","keys","Key","filter","k","getConditionKey","getOperation","ConditionOperation","getOp","toJSON","condition_key","condition_value","getConditionValue","op","create","expectation","setConditionKey","key","setConditionValue","Buffer","from","value","valueOf","setOp","condition","ACTION","TYPE","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,iCAAD,CAAP,CAA2CC,IAA3C,CAAgDC,SAAtE;;AACA,MAAMC,KAAK,GAAGH,OAAO,CAAC,0BAAD,CAArB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,SAAT,CAAoBG,KAApB,EAA2B;AACvB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAK,CAACC,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAOF,MAAM,CAACG,IAAP,CAAYV,aAAa,CAACW,GAA1B,EACFC,MADE,CACKC,CAAC,IAAIb,aAAa,CAACW,GAAd,CAAkBE,CAAlB,MAAyBP,KAAK,CAACQ,eAAN,EADnC,EAC4D,CAD5D,CAAP;AAEH,KAVkC;;AAYnC;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,YAAY,GAAI;AACZ,aAAOR,MAAM,CAACG,IAAP,CAAYV,aAAa,CAACgB,kBAA1B,EACFJ,MADE,CACKC,CAAC,IAAIb,aAAa,CAACgB,kBAAd,CAAiCH,CAAjC,MAAwCP,KAAK,CAACW,KAAN,EADlD,EACiE,CADjE,CAAP;AAEH,KArBkC;;AAuBnC;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,MAAM,GAAI;AACN,aAAO;AACHC,QAAAA,aAAa,EAAE,KAAKV,MAAL,EADZ;AAEHW,QAAAA,eAAe,EAAEhB,KAAK,CAACE,KAAK,CAACe,iBAAN,EAAD,CAAL,CAAiCH,MAAjC,EAFd;AAGHI,QAAAA,EAAE,EAAE,KAAKP,YAAL;AAHD,OAAP;AAKH;;AAnCkC,GAAhC,CAAP;AAqCH;AAED;AACA;AACA;AACA;;;AACAZ,SAAS,CAACoB,MAAV,GAAmB,UAAUC,WAAV,EAAuB;AACtC,QAAMlB,KAAK,GAAG,IAAIN,aAAJ,EAAd;AACAM,EAAAA,KAAK,CAACmB,eAAN,CAAsBD,WAAW,CAACE,GAAlC;AACApB,EAAAA,KAAK,CAACqB,iBAAN,CAAwBvB,KAAK,CAACmB,MAAN,CAAaK,MAAM,CAACC,IAAP,CAAYL,WAAW,CAACM,KAAxB,CAAb,EAA6CC,OAA7C,EAAxB;AACAzB,EAAAA,KAAK,CAAC0B,KAAN,CAAYR,WAAW,CAACS,SAAxB;AAEA,SAAO9B,SAAS,CAACG,KAAD,CAAhB;AACH,CAPD;;AASAH,SAAS,CAAC+B,MAAV,GAAmBlC,aAAa,CAACgB,kBAAjC;AACAb,SAAS,CAACgC,IAAV,GAAiBnC,aAAa,CAACW,GAA/B;AAEAyB,MAAM,CAACC,OAAP,GAAiBlC,SAAjB","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst ConditionStub = require('../../../Stubs/mysqlx_expect_pb').Open.Condition;\nconst bytes = require('../../ScalarValues/bytes');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Expect.Condition\n * @param {proto.Mysqlx.Expect.Condition} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Expect.Condition}\n */\nfunction Condition (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Retrieve the name of the key for the expected condition.\n         * @function\n         * @name module:adapters.Mysqlx.Expect.Condition#getKey\n         * @returns {string} The key name\n         */\n        getKey () {\n            return Object.keys(ConditionStub.Key)\n                .filter(k => ConditionStub.Key[k] === proto.getConditionKey())[0];\n        },\n\n        /**\n         * Retrieve the name of the operation to execute if the condition passes.\n         * @function\n         * @name module:adapters.Mysqlx.Expect.Condition#getOperation\n         * @returns {string} The operation name\n         */\n        getOperation () {\n            return Object.keys(ConditionStub.ConditionOperation)\n                .filter(k => ConditionStub.ConditionOperation[k] === proto.getOp())[0];\n        },\n\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Expect.Condition#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                condition_key: this.getKey(),\n                condition_value: bytes(proto.getConditionValue()).toJSON(),\n                op: this.getOperation()\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Expect.Condition instance for a given expectation.\n * @returns {module:adapters.Mysqlx.Expect.Condition}\n */\nCondition.create = function (expectation) {\n    const proto = new ConditionStub();\n    proto.setConditionKey(expectation.key);\n    proto.setConditionValue(bytes.create(Buffer.from(expectation.value)).valueOf());\n    proto.setOp(expectation.condition);\n\n    return Condition(proto);\n};\n\nCondition.ACTION = ConditionStub.ConditionOperation;\nCondition.TYPE = ConditionStub.Key;\n\nmodule.exports = Condition;\n"]},"metadata":{},"sourceType":"script"}