{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst ResultsetStub = require('../../../Stubs/mysqlx_resultset_pb');\n\nconst ServerMessagesStub = require('../../../Stubs/mysqlx_pb').ServerMessages;\n\nconst bytes = require('../../ScalarValues/bytes');\n\nconst collations = require('../../../Collations');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * API Column types as described by [MY-130]{@tutorial Working_with_Tables}.\n * @private\n * @readonly\n * @name ColumnType\n * @enum {string}\n */\n\n\nconst COLUMN_TYPE = {\n  BIT: 'BIT',\n  TINYINT: 'TINYINT',\n  SMALLINT: 'SMALLINT',\n  MEDIUMINT: 'MEDIUMINT',\n  INT: 'INT',\n  BIGINT: 'BIGINT',\n  FLOAT: 'FLOAT',\n  DECIMAL: 'DECIMAL',\n  DOUBLE: 'DOUBLE',\n  JSON: 'JSON',\n  STRING: 'STRING',\n  BYTES: 'BYTES',\n  TIME: 'TIME',\n  DATE: 'DATE',\n  DATETIME: 'DATETIME',\n  TIMESTAMP: 'TIMESTAMP',\n  SET: 'SET',\n  ENUM: 'ENUM',\n  GEOMETRY: 'GEOMETRY'\n};\n/**\n * Extract the type string for binary content.\n * @private\n * @param {Mysqlx.Resultset.ContentType_BYTES} [contentType] - the column content type\n * @param {number} [collation] - the collation id\n * @returns {Column.Type}\n */\n\nfunction columnAsBinaryType(contentType, collation) {\n  const isBinary = collations.find(collation).charset === 'binary';\n\n  if (contentType === ResultsetStub.ContentType_BYTES.JSON) {\n    return COLUMN_TYPE.JSON;\n  }\n\n  if (contentType === ResultsetStub.ContentType_BYTES.GEOMETRY) {\n    return COLUMN_TYPE.GEOMETRY;\n  }\n\n  if (!isBinary) {\n    return COLUMN_TYPE.STRING;\n  }\n\n  return COLUMN_TYPE.BYTES;\n}\n/**\n * Extract the type string for date and time content.\n * @private\n * @param {Mysqlx.Resultset.ContentType_DATETIME} [contentType] - the column content type\n * @param {number} [flags] - the column flag set\n * @returns {Type}\n */\n\n\nfunction columnAsDateAndTime(contentType, flags) {\n  // X Protocol type specific flag as defined by Mysqlx.Resultset.ColumnMetaData docs\n  const isTimestamp = flags & 1;\n\n  if (contentType === ResultsetStub.ContentType_DATETIME.DATE) {\n    return COLUMN_TYPE.DATE;\n  }\n\n  if (!isTimestamp) {\n    return COLUMN_TYPE.DATETIME;\n  }\n\n  return COLUMN_TYPE.TIMESTAMP;\n}\n/**\n * Extract the type string for SQL DECIMAL values.\n * @private\n * @param {number} [flags] - the column flag set encoded as a decimal number\n * @returns {string}\n */\n\n\nfunction columnAsDecimal(flags) {\n  if (!isUnsignedType(flags)) {\n    return COLUMN_TYPE.DECIMAL;\n  }\n\n  return `UNSIGNED ${COLUMN_TYPE.DECIMAL}`;\n}\n/**\n * Extract the type string for SQL DOUBLE values.\n * @private\n * @param {number} [flags] - the column flag set encoded as a decimal number\n * @returns {string}\n */\n\n\nfunction columnAsDouble(flags) {\n  if (!isUnsignedType(flags)) {\n    return COLUMN_TYPE.DOUBLE;\n  }\n\n  return `UNSIGNED ${COLUMN_TYPE.DOUBLE}`;\n}\n/**\n * Extract the type string for SQL FLOAT values.\n * @private\n * @param {number} [flags] - the column flag set encoded as a decimal number\n * @returns {Type}\n */\n\n\nfunction columnAsFloat(flags) {\n  if (!isUnsignedType(flags)) {\n    return COLUMN_TYPE.FLOAT;\n  }\n\n  return `UNSIGNED ${COLUMN_TYPE.FLOAT}`;\n}\n/**\n * Extract the type string for SQL *INT values.\n * @private\n * @param {number} [size] - the column size\n * @returns {Type}\n */\n\n\nfunction columnAsInteger(size) {\n  if (size >= 20) {\n    return COLUMN_TYPE.BIGINT;\n  }\n\n  if (size >= 10) {\n    return COLUMN_TYPE.INT;\n  }\n\n  if (size >= 8) {\n    return COLUMN_TYPE.MEDIUMINT;\n  }\n\n  if (size >= 5) {\n    return COLUMN_TYPE.SMALLINT;\n  }\n\n  return COLUMN_TYPE.TINYINT;\n}\n/**\n * Extract the type string for SQL signed integers.\n * @private\n * @param {number} size - the column size\n * @returns {Type}\n */\n\n\nfunction columnAsSignedInteger(size) {\n  return columnAsInteger(size);\n}\n/**\n * Extract the type syting for SQL unsigned integers.\n * @private\n * @param {number} size - the column size\n * @returns {string}\n */\n\n\nfunction columnAsUnsignedInteger(size) {\n  return `UNSIGNED ${columnAsInteger(size)}`;\n}\n/**\n * Checks if the column flags match unsigned-specific types.\n * @private\n * @param {number} flags - the column flag set encoded as a decimal number\n * @returns {boolean}\n */\n\n\nfunction isUnsignedType(flags) {\n  // X Protocol type specific flag as defined by Mysqlx.Resultset.ColumnMetaData docs\n  return flags === 1;\n}\n/**\n * @private\n * @alias module:adapters.Mysqlx.Resultset.ColumnMetadataMetadata\n * @param {proto.Mysqlx.Resultset.ColumnMetaData} proto - protobuf stub\n * @returns {adapters.Mysqlx.Resultset.ColumnMetadataMetadata}\n */\n\n\nfunction ColumnMetadata(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Returns the protobuf message name field.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getAlias\n     * @returns {string}\n     */\n    getAlias() {\n      return bytes(proto.getName()).toString();\n    },\n\n    /**\n     * Returns the protobuf message catalog field.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getCatalog\n     * @returns {string}\n     */\n    getCatalog() {\n      return bytes(proto.getCatalog()).toString();\n    },\n\n    /**\n     * Returns the character set name of the respective collation id.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getCharset\n     * @returns {string}\n     */\n    getCharset() {\n      if (!proto.hasCollation()) {\n        return;\n      }\n\n      return collations.find(proto.getCollation()).charset;\n    },\n\n    /**\n     * Returns the collation name of the respective collation id.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getCollation\n     * @returns {string}\n     */\n    getCollation() {\n      if (!proto.hasCollation()) {\n        return;\n      }\n\n      return collations.find(proto.getCollation()).name;\n    },\n\n    /**\n     * Returns the name of the column Content-Type\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getContentType\n     * @returns {string}\n     */\n    getContentType() {\n      const values = ResultsetStub.ContentType_BYTES;\n      return Object.keys(values).filter(k => values[k] === proto.getContentType())[0];\n    },\n\n    /**\n     * Returns the value of the fractionalDigits protobuf message field.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getFractionalDigits\n     * @returns {number}\n     */\n    getFractionalDigits() {\n      return proto.getFractionalDigits();\n    },\n\n    /**\n     * Returns the value of the length protobuf message field.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getLength\n     * @returns {number}\n     */\n    getLength() {\n      return proto.getLength();\n    },\n\n    /**\n     * Returns the value of the originalName protobuf message field converted to a utf8 string.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getName\n     * @returns {string}\n     */\n    getName() {\n      return bytes(proto.getOriginalName()).toString();\n    },\n\n    /**\n     * Returns the value of the schema protobuf message field encoded as an utf8 string.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getSchema\n     * @returns {string}\n     */\n    getSchema() {\n      return bytes(proto.getSchema()).toString();\n    },\n\n    /**\n     * Returns the value of the table protobuf message field encoded as an utf8 string.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getTableAlias\n     * @returns {string}\n     */\n    getTableAlias() {\n      return bytes(proto.getTable()).toString();\n    },\n\n    /**\n     * Returns the value of the originalTable protobuf message field encoded as an utf8 string.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getTableName\n     * @returns {string}\n     */\n    getTableName() {\n      return bytes(proto.getOriginalTable()).toString();\n    },\n\n    /**\n     * Returns the type name of the underlying protocol message.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getType\n     * @returns {string}\n     */\n    getType() {\n      return Object.keys(ResultsetStub.ColumnMetaData.FieldType).filter(k => ResultsetStub.ColumnMetaData.FieldType[k] === proto.getType())[0];\n    },\n\n    /**\n     * Returns the type of the underlying protocol message.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getTypeId\n     * @returns {number}\n     */\n    getTypeId() {\n      return proto.getType();\n    },\n\n    /**\n     * Decodes the type string of the column using its type id.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getTypeString\n     * @returns {string}\n     */\n    getTypeString() {\n      switch (proto.getType()) {\n        case ResultsetStub.ColumnMetaData.FieldType.SINT:\n          return columnAsSignedInteger(proto.getLength());\n\n        case ResultsetStub.ColumnMetaData.FieldType.UINT:\n          return columnAsUnsignedInteger(proto.getLength());\n\n        case ResultsetStub.ColumnMetaData.FieldType.DOUBLE:\n          return columnAsDouble(proto.getFlags());\n\n        case ResultsetStub.ColumnMetaData.FieldType.FLOAT:\n          return columnAsFloat(proto.getFlags());\n\n        case ResultsetStub.ColumnMetaData.FieldType.BYTES:\n          return columnAsBinaryType(proto.getContentType(), proto.getCollation());\n\n        case ResultsetStub.ColumnMetaData.FieldType.TIME:\n          return COLUMN_TYPE.TIME;\n\n        case ResultsetStub.ColumnMetaData.FieldType.DATETIME:\n          return columnAsDateAndTime(proto.getContentType(), proto.getFlags());\n\n        case ResultsetStub.ColumnMetaData.FieldType.SET:\n          return COLUMN_TYPE.SET;\n\n        case ResultsetStub.ColumnMetaData.FieldType.ENUM:\n          return COLUMN_TYPE.ENUM;\n\n        case ResultsetStub.ColumnMetaData.FieldType.BIT:\n          return COLUMN_TYPE.BIT;\n\n        case ResultsetStub.ColumnMetaData.FieldType.DECIMAL:\n          return columnAsDecimal(proto.getFlags());\n      }\n    },\n\n    /**\n     * Checks if the column represents binary content.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#isBinary\n     * @returns {boolean}\n     */\n    isBinary() {\n      // TODO(Rui): not sure how to actually handle GEOMETRY values, so let's handle them as binary content for now\n      return !proto.hasContentType() && this.getCharset() === 'binary' || proto.getContentType() === ResultsetStub.ContentType_BYTES.GEOMETRY;\n    },\n\n    /**\n     * Checks if the value of the flags protobuf message field indicates type-specific behaviour.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#isFlagged\n     * @returns {string}\n     */\n    isFlagged() {\n      return !!(proto.getFlags() & 1);\n    },\n\n    /**\n     * Checks if the content type of the column is JSON.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#isJSON\n     * @returns {boolean}\n     */\n    isJSON() {\n      return proto.getContentType() === ResultsetStub.ContentType_BYTES.JSON;\n    },\n\n    /**\n     * Checks if the value of the type protobuf message field matches the value used for signed integers.\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#isSigned\n     * @returns {string}\n     */\n    isSigned() {\n      return proto.getType() === ResultsetStub.ColumnMetaData.FieldType.SINT;\n    },\n\n    /**\n     * Returns a JSON representation with utf8-encoded properties (to be used by JSON.stringify).\n     * @function\n     * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#toJSON\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        type: this.getType(),\n        name: this.getAlias(),\n        original_name: this.getName(),\n        table: this.getTableAlias(),\n        original_table: this.getTableName(),\n        schema: this.getSchema(),\n        catalog: this.getCatalog(),\n        collation: proto.getCollation(),\n        fractional_digits: proto.getFractionalDigits(),\n        length: proto.getLength(),\n        flags: proto.getFlags(),\n        content_type: this.getContentType()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Resultset.ColumnMetadata}\n */\n\n\nColumnMetadata.deserialize = function (buffer) {\n  return ColumnMetadata(ResultsetStub.ColumnMetaData.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nColumnMetadata.COLUMN_TYPE = COLUMN_TYPE;\nColumnMetadata.MESSAGE_ID = ServerMessagesStub.Type.RESULTSET_COLUMN_META_DATA;\nmodule.exports = ColumnMetadata;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Resultset/ColumnMetadata.js"],"names":["ResultsetStub","require","ServerMessagesStub","ServerMessages","bytes","collations","wraps","COLUMN_TYPE","BIT","TINYINT","SMALLINT","MEDIUMINT","INT","BIGINT","FLOAT","DECIMAL","DOUBLE","JSON","STRING","BYTES","TIME","DATE","DATETIME","TIMESTAMP","SET","ENUM","GEOMETRY","columnAsBinaryType","contentType","collation","isBinary","find","charset","ContentType_BYTES","columnAsDateAndTime","flags","isTimestamp","ContentType_DATETIME","columnAsDecimal","isUnsignedType","columnAsDouble","columnAsFloat","columnAsInteger","size","columnAsSignedInteger","columnAsUnsignedInteger","ColumnMetadata","proto","Object","assign","getAlias","getName","toString","getCatalog","getCharset","hasCollation","getCollation","name","getContentType","values","keys","filter","k","getFractionalDigits","getLength","getOriginalName","getSchema","getTableAlias","getTable","getTableName","getOriginalTable","getType","ColumnMetaData","FieldType","getTypeId","getTypeString","SINT","UINT","getFlags","hasContentType","isFlagged","isJSON","isSigned","toJSON","type","original_name","table","original_table","schema","catalog","fractional_digits","length","content_type","deserialize","buffer","deserializeBinary","MESSAGE_ID","Type","RESULTSET_COLUMN_META_DATA","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst ResultsetStub = require('../../../Stubs/mysqlx_resultset_pb');\nconst ServerMessagesStub = require('../../../Stubs/mysqlx_pb').ServerMessages;\nconst bytes = require('../../ScalarValues/bytes');\nconst collations = require('../../../Collations');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * API Column types as described by [MY-130]{@tutorial Working_with_Tables}.\n * @private\n * @readonly\n * @name ColumnType\n * @enum {string}\n */\nconst COLUMN_TYPE = {\n    BIT: 'BIT',\n    TINYINT: 'TINYINT',\n    SMALLINT: 'SMALLINT',\n    MEDIUMINT: 'MEDIUMINT',\n    INT: 'INT',\n    BIGINT: 'BIGINT',\n    FLOAT: 'FLOAT',\n    DECIMAL: 'DECIMAL',\n    DOUBLE: 'DOUBLE',\n    JSON: 'JSON',\n    STRING: 'STRING',\n    BYTES: 'BYTES',\n    TIME: 'TIME',\n    DATE: 'DATE',\n    DATETIME: 'DATETIME',\n    TIMESTAMP: 'TIMESTAMP',\n    SET: 'SET',\n    ENUM: 'ENUM',\n    GEOMETRY: 'GEOMETRY'\n};\n\n/**\n * Extract the type string for binary content.\n * @private\n * @param {Mysqlx.Resultset.ContentType_BYTES} [contentType] - the column content type\n * @param {number} [collation] - the collation id\n * @returns {Column.Type}\n */\nfunction columnAsBinaryType (contentType, collation) {\n    const isBinary = collations.find(collation).charset === 'binary';\n\n    if (contentType === ResultsetStub.ContentType_BYTES.JSON) {\n        return COLUMN_TYPE.JSON;\n    }\n\n    if (contentType === ResultsetStub.ContentType_BYTES.GEOMETRY) {\n        return COLUMN_TYPE.GEOMETRY;\n    }\n\n    if (!isBinary) {\n        return COLUMN_TYPE.STRING;\n    }\n\n    return COLUMN_TYPE.BYTES;\n}\n\n/**\n * Extract the type string for date and time content.\n * @private\n * @param {Mysqlx.Resultset.ContentType_DATETIME} [contentType] - the column content type\n * @param {number} [flags] - the column flag set\n * @returns {Type}\n */\nfunction columnAsDateAndTime (contentType, flags) {\n    // X Protocol type specific flag as defined by Mysqlx.Resultset.ColumnMetaData docs\n    const isTimestamp = flags & 1;\n\n    if (contentType === ResultsetStub.ContentType_DATETIME.DATE) {\n        return COLUMN_TYPE.DATE;\n    }\n\n    if (!isTimestamp) {\n        return COLUMN_TYPE.DATETIME;\n    }\n\n    return COLUMN_TYPE.TIMESTAMP;\n}\n\n/**\n * Extract the type string for SQL DECIMAL values.\n * @private\n * @param {number} [flags] - the column flag set encoded as a decimal number\n * @returns {string}\n */\nfunction columnAsDecimal (flags) {\n    if (!isUnsignedType(flags)) {\n        return COLUMN_TYPE.DECIMAL;\n    }\n\n    return `UNSIGNED ${COLUMN_TYPE.DECIMAL}`;\n}\n\n/**\n * Extract the type string for SQL DOUBLE values.\n * @private\n * @param {number} [flags] - the column flag set encoded as a decimal number\n * @returns {string}\n */\nfunction columnAsDouble (flags) {\n    if (!isUnsignedType(flags)) {\n        return COLUMN_TYPE.DOUBLE;\n    }\n\n    return `UNSIGNED ${COLUMN_TYPE.DOUBLE}`;\n}\n\n/**\n * Extract the type string for SQL FLOAT values.\n * @private\n * @param {number} [flags] - the column flag set encoded as a decimal number\n * @returns {Type}\n */\nfunction columnAsFloat (flags) {\n    if (!isUnsignedType(flags)) {\n        return COLUMN_TYPE.FLOAT;\n    }\n\n    return `UNSIGNED ${COLUMN_TYPE.FLOAT}`;\n}\n\n/**\n * Extract the type string for SQL *INT values.\n * @private\n * @param {number} [size] - the column size\n * @returns {Type}\n */\nfunction columnAsInteger (size) {\n    if (size >= 20) {\n        return COLUMN_TYPE.BIGINT;\n    }\n\n    if (size >= 10) {\n        return COLUMN_TYPE.INT;\n    }\n\n    if (size >= 8) {\n        return COLUMN_TYPE.MEDIUMINT;\n    }\n\n    if (size >= 5) {\n        return COLUMN_TYPE.SMALLINT;\n    }\n\n    return COLUMN_TYPE.TINYINT;\n}\n\n/**\n * Extract the type string for SQL signed integers.\n * @private\n * @param {number} size - the column size\n * @returns {Type}\n */\nfunction columnAsSignedInteger (size) {\n    return columnAsInteger(size);\n}\n\n/**\n * Extract the type syting for SQL unsigned integers.\n * @private\n * @param {number} size - the column size\n * @returns {string}\n */\nfunction columnAsUnsignedInteger (size) {\n    return `UNSIGNED ${columnAsInteger(size)}`;\n}\n\n/**\n * Checks if the column flags match unsigned-specific types.\n * @private\n * @param {number} flags - the column flag set encoded as a decimal number\n * @returns {boolean}\n */\nfunction isUnsignedType (flags) {\n    // X Protocol type specific flag as defined by Mysqlx.Resultset.ColumnMetaData docs\n    return flags === 1;\n}\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Resultset.ColumnMetadataMetadata\n * @param {proto.Mysqlx.Resultset.ColumnMetaData} proto - protobuf stub\n * @returns {adapters.Mysqlx.Resultset.ColumnMetadataMetadata}\n */\nfunction ColumnMetadata (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Returns the protobuf message name field.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getAlias\n         * @returns {string}\n         */\n        getAlias () {\n            return bytes(proto.getName()).toString();\n        },\n\n        /**\n         * Returns the protobuf message catalog field.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getCatalog\n         * @returns {string}\n         */\n        getCatalog () {\n            return bytes(proto.getCatalog()).toString();\n        },\n\n        /**\n         * Returns the character set name of the respective collation id.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getCharset\n         * @returns {string}\n         */\n        getCharset () {\n            if (!proto.hasCollation()) {\n                return;\n            }\n\n            return collations.find(proto.getCollation()).charset;\n        },\n\n        /**\n         * Returns the collation name of the respective collation id.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getCollation\n         * @returns {string}\n         */\n        getCollation () {\n            if (!proto.hasCollation()) {\n                return;\n            }\n\n            return collations.find(proto.getCollation()).name;\n        },\n\n        /**\n         * Returns the name of the column Content-Type\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getContentType\n         * @returns {string}\n         */\n        getContentType () {\n            const values = ResultsetStub.ContentType_BYTES;\n\n            return Object.keys(values)\n                .filter(k => values[k] === proto.getContentType())[0];\n        },\n\n        /**\n         * Returns the value of the fractionalDigits protobuf message field.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getFractionalDigits\n         * @returns {number}\n         */\n        getFractionalDigits () {\n            return proto.getFractionalDigits();\n        },\n\n        /**\n         * Returns the value of the length protobuf message field.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getLength\n         * @returns {number}\n         */\n        getLength () {\n            return proto.getLength();\n        },\n\n        /**\n         * Returns the value of the originalName protobuf message field converted to a utf8 string.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getName\n         * @returns {string}\n         */\n        getName () {\n            return bytes(proto.getOriginalName()).toString();\n        },\n\n        /**\n         * Returns the value of the schema protobuf message field encoded as an utf8 string.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getSchema\n         * @returns {string}\n         */\n        getSchema () {\n            return bytes(proto.getSchema()).toString();\n        },\n\n        /**\n         * Returns the value of the table protobuf message field encoded as an utf8 string.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getTableAlias\n         * @returns {string}\n         */\n        getTableAlias () {\n            return bytes(proto.getTable()).toString();\n        },\n\n        /**\n         * Returns the value of the originalTable protobuf message field encoded as an utf8 string.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getTableName\n         * @returns {string}\n         */\n        getTableName () {\n            return bytes(proto.getOriginalTable()).toString();\n        },\n\n        /**\n         * Returns the type name of the underlying protocol message.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getType\n         * @returns {string}\n         */\n        getType () {\n            return Object.keys(ResultsetStub.ColumnMetaData.FieldType)\n                .filter(k => ResultsetStub.ColumnMetaData.FieldType[k] === proto.getType())[0];\n        },\n\n        /**\n         * Returns the type of the underlying protocol message.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getTypeId\n         * @returns {number}\n         */\n        getTypeId () {\n            return proto.getType();\n        },\n\n        /**\n         * Decodes the type string of the column using its type id.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#getTypeString\n         * @returns {string}\n         */\n        getTypeString () {\n            switch (proto.getType()) {\n            case ResultsetStub.ColumnMetaData.FieldType.SINT:\n                return columnAsSignedInteger(proto.getLength());\n            case ResultsetStub.ColumnMetaData.FieldType.UINT:\n                return columnAsUnsignedInteger(proto.getLength());\n            case ResultsetStub.ColumnMetaData.FieldType.DOUBLE:\n                return columnAsDouble(proto.getFlags());\n            case ResultsetStub.ColumnMetaData.FieldType.FLOAT:\n                return columnAsFloat(proto.getFlags());\n            case ResultsetStub.ColumnMetaData.FieldType.BYTES:\n                return columnAsBinaryType(proto.getContentType(), proto.getCollation());\n            case ResultsetStub.ColumnMetaData.FieldType.TIME:\n                return COLUMN_TYPE.TIME;\n            case ResultsetStub.ColumnMetaData.FieldType.DATETIME:\n                return columnAsDateAndTime(proto.getContentType(), proto.getFlags());\n            case ResultsetStub.ColumnMetaData.FieldType.SET:\n                return COLUMN_TYPE.SET;\n            case ResultsetStub.ColumnMetaData.FieldType.ENUM:\n                return COLUMN_TYPE.ENUM;\n            case ResultsetStub.ColumnMetaData.FieldType.BIT:\n                return COLUMN_TYPE.BIT;\n            case ResultsetStub.ColumnMetaData.FieldType.DECIMAL:\n                return columnAsDecimal(proto.getFlags());\n            }\n        },\n\n        /**\n         * Checks if the column represents binary content.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#isBinary\n         * @returns {boolean}\n         */\n        isBinary () {\n            // TODO(Rui): not sure how to actually handle GEOMETRY values, so let's handle them as binary content for now\n            return (!proto.hasContentType() && this.getCharset() === 'binary') ||\n                proto.getContentType() === ResultsetStub.ContentType_BYTES.GEOMETRY;\n        },\n\n        /**\n         * Checks if the value of the flags protobuf message field indicates type-specific behaviour.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#isFlagged\n         * @returns {string}\n         */\n        isFlagged () {\n            return !!(proto.getFlags() & 1);\n        },\n\n        /**\n         * Checks if the content type of the column is JSON.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#isJSON\n         * @returns {boolean}\n         */\n        isJSON () {\n            return proto.getContentType() === ResultsetStub.ContentType_BYTES.JSON;\n        },\n\n        /**\n         * Checks if the value of the type protobuf message field matches the value used for signed integers.\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#isSigned\n         * @returns {string}\n         */\n        isSigned () {\n            return proto.getType() === ResultsetStub.ColumnMetaData.FieldType.SINT;\n        },\n\n        /**\n         * Returns a JSON representation with utf8-encoded properties (to be used by JSON.stringify).\n         * @function\n         * @name module:adapters.Mysqlx.Resultset.ColumnMetadata#toJSON\n         * @returns {Object}\n         */\n        toJSON () {\n            return {\n                type: this.getType(),\n                name: this.getAlias(),\n                original_name: this.getName(),\n                table: this.getTableAlias(),\n                original_table: this.getTableName(),\n                schema: this.getSchema(),\n                catalog: this.getCatalog(),\n                collation: proto.getCollation(),\n                fractional_digits: proto.getFractionalDigits(),\n                length: proto.getLength(),\n                flags: proto.getFlags(),\n                content_type: this.getContentType()\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Resultset.ColumnMetadata}\n */\nColumnMetadata.deserialize = function (buffer) {\n    return ColumnMetadata(ResultsetStub.ColumnMetaData.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nColumnMetadata.COLUMN_TYPE = COLUMN_TYPE;\nColumnMetadata.MESSAGE_ID = ServerMessagesStub.Type.RESULTSET_COLUMN_META_DATA;\n\nmodule.exports = ColumnMetadata;\n"]},"metadata":{},"sourceType":"script"}