{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst Expr = require('../../../../Protocol/Stubs/mysqlx_expr_pb').Expr;\n\nconst ColumnIdentifier = require('../../../../Protocol/Stubs/mysqlx_expr_pb').ColumnIdentifier;\n\nconst Pa = require('parsimmon');\n\nconst parser = options => r => Pa.seq(Pa.seq(r.ident, Pa.string('.'), Pa.seq(r.ident, Pa.string('.')).map(data => data[0]).atMost(1).map(data => data[0])).map(data => [data[0], data[2]]).atMost(1).map(data => data[0]), r.ident, Pa.seq(Pa.alt(Pa.string('->>'), Pa.string('->')), Pa.string(\"'\"), Pa.string('$'), r.documentPath, Pa.string(\"'\")).map(data => data[3]).atMost(1).map(data => data[0])).map(data => {\n  const columnId = new ColumnIdentifier();\n  columnId.setName(data[1]);\n  const meta = data[0] || [];\n\n  if (typeof meta[1] !== 'undefined') {\n    columnId.setSchemaName(meta[0]);\n    columnId.setTableName(meta[1]);\n  } else {\n    columnId.setTableName(meta[0]);\n  }\n\n  const paths = data[2] || [];\n  paths.forEach(path => {\n    columnId.addDocumentPath(path);\n  });\n  const expr = new Expr();\n  expr.setType(Expr.Type.IDENT);\n  expr.setIdentifier(columnId);\n  return expr;\n});\n\nmodule.exports = {\n  name: 'COLUMN_IDENT',\n  parser\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/ExprParser/lib/grammar/collectionOrTableExpressions/columnIdent.js"],"names":["Expr","require","ColumnIdentifier","Pa","parser","options","r","seq","ident","string","map","data","atMost","alt","documentPath","columnId","setName","meta","setSchemaName","setTableName","paths","forEach","path","addDocumentPath","expr","setType","Type","IDENT","setIdentifier","module","exports","name"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,2CAAD,CAAP,CAAqDD,IAAlE;;AACA,MAAME,gBAAgB,GAAGD,OAAO,CAAC,2CAAD,CAAP,CAAqDC,gBAA9E;;AACA,MAAMC,EAAE,GAAGF,OAAO,CAAC,WAAD,CAAlB;;AAEA,MAAMG,MAAM,GAAGC,OAAO,IAAIC,CAAC,IAAIH,EAAE,CAC5BI,GAD0B,CAEvBJ,EAAE,CACGI,GADL,CAEQD,CAAC,CAACE,KAFV,EAGQL,EAAE,CAACM,MAAH,CAAU,GAAV,CAHR,EAIQN,EAAE,CACGI,GADL,CACSD,CAAC,CAACE,KADX,EACkBL,EAAE,CAACM,MAAH,CAAU,GAAV,CADlB,EAEKC,GAFL,CAESC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAFrB,EAGKC,MAHL,CAGY,CAHZ,EAIKF,GAJL,CAISC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAJrB,CAJR,EAUKD,GAVL,CAUSC,IAAI,IAAI,CAACA,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAVjB,EAWKC,MAXL,CAWY,CAXZ,EAYKF,GAZL,CAYSC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAZrB,CAFuB,EAevBL,CAAC,CAACE,KAfqB,EAgBvBL,EAAE,CACGI,GADL,CAEQJ,EAAE,CAACU,GAAH,CAAOV,EAAE,CAACM,MAAH,CAAU,KAAV,CAAP,EAAyBN,EAAE,CAACM,MAAH,CAAU,IAAV,CAAzB,CAFR,EAGQN,EAAE,CAACM,MAAH,CAAU,GAAV,CAHR,EAIQN,EAAE,CAACM,MAAH,CAAU,GAAV,CAJR,EAKQH,CAAC,CAACQ,YALV,EAMQX,EAAE,CAACM,MAAH,CAAU,GAAV,CANR,EAQKC,GARL,CAQSC,IAAI,IAAIA,IAAI,CAAC,CAAD,CARrB,EASKC,MATL,CASY,CATZ,EAUKF,GAVL,CAUSC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAVrB,CAhBuB,EA4B1BD,GA5B0B,CA4BtBC,IAAI,IAAI;AACT,QAAMI,QAAQ,GAAG,IAAIb,gBAAJ,EAAjB;AACAa,EAAAA,QAAQ,CAACC,OAAT,CAAiBL,IAAI,CAAC,CAAD,CAArB;AAEA,QAAMM,IAAI,GAAGN,IAAI,CAAC,CAAD,CAAJ,IAAW,EAAxB;;AAEA,MAAI,OAAOM,IAAI,CAAC,CAAD,CAAX,KAAmB,WAAvB,EAAoC;AAChCF,IAAAA,QAAQ,CAACG,aAAT,CAAuBD,IAAI,CAAC,CAAD,CAA3B;AACAF,IAAAA,QAAQ,CAACI,YAAT,CAAsBF,IAAI,CAAC,CAAD,CAA1B;AACH,GAHD,MAGO;AACHF,IAAAA,QAAQ,CAACI,YAAT,CAAsBF,IAAI,CAAC,CAAD,CAA1B;AACH;;AAED,QAAMG,KAAK,GAAGT,IAAI,CAAC,CAAD,CAAJ,IAAW,EAAzB;AAEAS,EAAAA,KAAK,CAACC,OAAN,CAAcC,IAAI,IAAI;AAClBP,IAAAA,QAAQ,CAACQ,eAAT,CAAyBD,IAAzB;AACH,GAFD;AAIA,QAAME,IAAI,GAAG,IAAIxB,IAAJ,EAAb;AACAwB,EAAAA,IAAI,CAACC,OAAL,CAAazB,IAAI,CAAC0B,IAAL,CAAUC,KAAvB;AACAH,EAAAA,IAAI,CAACI,aAAL,CAAmBb,QAAnB;AAEA,SAAOS,IAAP;AACH,CApD0B,CAA/B;;AAsDAK,MAAM,CAACC,OAAP,GAAiB;AAAEC,EAAAA,IAAI,EAAE,cAAR;AAAwB3B,EAAAA;AAAxB,CAAjB","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst Expr = require('../../../../Protocol/Stubs/mysqlx_expr_pb').Expr;\nconst ColumnIdentifier = require('../../../../Protocol/Stubs/mysqlx_expr_pb').ColumnIdentifier;\nconst Pa = require('parsimmon');\n\nconst parser = options => r => Pa\n    .seq(\n        Pa\n            .seq(\n                r.ident,\n                Pa.string('.'),\n                Pa\n                    .seq(r.ident, Pa.string('.'))\n                    .map(data => data[0])\n                    .atMost(1)\n                    .map(data => data[0])\n            )\n            .map(data => [data[0], data[2]])\n            .atMost(1)\n            .map(data => data[0]),\n        r.ident,\n        Pa\n            .seq(\n                Pa.alt(Pa.string('->>'), Pa.string('->')),\n                Pa.string(\"'\"),\n                Pa.string('$'),\n                r.documentPath,\n                Pa.string(\"'\")\n            )\n            .map(data => data[3])\n            .atMost(1)\n            .map(data => data[0])\n    )\n    .map(data => {\n        const columnId = new ColumnIdentifier();\n        columnId.setName(data[1]);\n\n        const meta = data[0] || [];\n\n        if (typeof meta[1] !== 'undefined') {\n            columnId.setSchemaName(meta[0]);\n            columnId.setTableName(meta[1]);\n        } else {\n            columnId.setTableName(meta[0]);\n        }\n\n        const paths = data[2] || [];\n\n        paths.forEach(path => {\n            columnId.addDocumentPath(path);\n        });\n\n        const expr = new Expr();\n        expr.setType(Expr.Type.IDENT);\n        expr.setIdentifier(columnId);\n\n        return expr;\n    });\n\nmodule.exports = { name: 'COLUMN_IDENT', parser };\n"]},"metadata":{},"sourceType":"script"}