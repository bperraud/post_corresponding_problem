{"ast":null,"code":"/*\n * Copyright (c) 2018, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n/**\n * AuthPlugin mixin.\n * @mixin\n * @private\n * @alias AuthPlugin\n * @param {Object} state - plugin properties\n * @returns {AuthPlugin}\n */\n\nfunction AuthPlugin(state) {\n  // TODO(Rui): remove \"dbPassword\" and \"dbUser\" after deprecation period\n  state = Object.assign({\n    user: state && (state.dbUser || state.user),\n    password: state && (state.password || state.dbPassword) || ''\n  }, state, {\n    schema: state.schema || ''\n  });\n  return {\n    /**\n     * Retrieve the MySQL authentication plugin account user name.\n     * @function\n     * @name module:AuthPlugin#getUser\n     * @returns {string} The MySQL account user name.\n     */\n    getUser() {\n      return state.user;\n    },\n\n    /**\n     * Retrieve the MySQL authentication plugin account password.\n     * @function\n     * @name module:AuthPlugin#getPassword\n     * @returns {string} The MySQL account password.\n     */\n    getPassword() {\n      return state.password;\n    },\n\n    getSchema() {\n      return state.schema;\n    },\n\n    /**\n     * Start the authentication process.\n     * @function\n     * @name module:AuthPlugin#getPassword\n     * @param {Client} client - client instance\n     * @returns {Promise}\n     */\n    run(client) {\n      return client.authenticate(this);\n    }\n\n  };\n}\n\nmodule.exports = AuthPlugin;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Authentication/AuthPlugin.js"],"names":["AuthPlugin","state","Object","assign","user","dbUser","password","dbPassword","schema","getUser","getPassword","getSchema","run","client","authenticate","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,UAAT,CAAqBC,KAArB,EAA4B;AACxB;AACAA,EAAAA,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,IAAI,EAAEH,KAAK,KAAKA,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACG,IAA3B,CAAb;AAA+CE,IAAAA,QAAQ,EAAGL,KAAK,KAAKA,KAAK,CAACK,QAAN,IAAkBL,KAAK,CAACM,UAA7B,CAAN,IAAmD;AAA5G,GAAd,EAAgIN,KAAhI,EAAuI;AAAEO,IAAAA,MAAM,EAAEP,KAAK,CAACO,MAAN,IAAgB;AAA1B,GAAvI,CAAR;AAEA,SAAO;AACH;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,OAAO,GAAI;AACP,aAAOR,KAAK,CAACG,IAAb;AACH,KATE;;AAWH;AACR;AACA;AACA;AACA;AACA;AACQM,IAAAA,WAAW,GAAI;AACX,aAAOT,KAAK,CAACK,QAAb;AACH,KAnBE;;AAqBHK,IAAAA,SAAS,GAAI;AACT,aAAOV,KAAK,CAACO,MAAb;AACH,KAvBE;;AAyBH;AACR;AACA;AACA;AACA;AACA;AACA;AACQI,IAAAA,GAAG,CAAEC,MAAF,EAAU;AACT,aAAOA,MAAM,CAACC,YAAP,CAAoB,IAApB,CAAP;AACH;;AAlCE,GAAP;AAoCH;;AAEDC,MAAM,CAACC,OAAP,GAAiBhB,UAAjB","sourcesContent":["/*\n * Copyright (c) 2018, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\n/**\n * AuthPlugin mixin.\n * @mixin\n * @private\n * @alias AuthPlugin\n * @param {Object} state - plugin properties\n * @returns {AuthPlugin}\n */\nfunction AuthPlugin (state) {\n    // TODO(Rui): remove \"dbPassword\" and \"dbUser\" after deprecation period\n    state = Object.assign({ user: state && (state.dbUser || state.user), password: (state && (state.password || state.dbPassword)) || '' }, state, { schema: state.schema || '' });\n\n    return {\n        /**\n         * Retrieve the MySQL authentication plugin account user name.\n         * @function\n         * @name module:AuthPlugin#getUser\n         * @returns {string} The MySQL account user name.\n         */\n        getUser () {\n            return state.user;\n        },\n\n        /**\n         * Retrieve the MySQL authentication plugin account password.\n         * @function\n         * @name module:AuthPlugin#getPassword\n         * @returns {string} The MySQL account password.\n         */\n        getPassword () {\n            return state.password;\n        },\n\n        getSchema () {\n            return state.schema;\n        },\n\n        /**\n         * Start the authentication process.\n         * @function\n         * @name module:AuthPlugin#getPassword\n         * @param {Client} client - client instance\n         * @returns {Promise}\n         */\n        run (client) {\n            return client.authenticate(this);\n        }\n    };\n}\n\nmodule.exports = AuthPlugin;\n"]},"metadata":{},"sourceType":"script"}