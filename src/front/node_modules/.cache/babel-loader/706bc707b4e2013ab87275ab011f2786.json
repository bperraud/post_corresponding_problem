{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst FrameStub = require('../../../Stubs/mysqlx_notice_pb').Frame;\n\nconst ServerMessagesStub = require('../../../Stubs/mysqlx_pb').ServerMessages;\n\nconst bytes = require('../../../Wrappers/ScalarValues/bytes');\n\nconst empty = require('../../Traits/Empty');\n\nconst sessionStateChanged = require('./SessionStateChanged');\n\nconst sessionVariableChanged = require('./SessionVariableChanged');\n\nconst warning = require('./Warning');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Notice.Frame\n * @param {proto.Mysqlx.Notice.Frame} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Notice.Frame}\n */\n\n\nfunction Frame(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Get the payload of the notice.\n     * @function\n     * @name module:adapters.Mysqlx.Notice.Frame#getPayload\n     * @returns {module:adapters.Mysqlx.Notice.Warning|module:adapters.Mysqlx.Notice.SessionStateChanged|module:adapters.Mysqlx.Notice.SessionVariableChanged|module:adapters.Mysqlx.Empty}\n     */\n    getPayload() {\n      switch (proto.getType()) {\n        case FrameStub.Type.WARNING:\n          return warning.deserialize(bytes(proto.getPayload()).toBuffer());\n\n        case FrameStub.Type.SESSION_VARIABLE_CHANGED:\n          return sessionVariableChanged.deserialize(bytes(proto.getPayload()).toBuffer());\n\n        case FrameStub.Type.SESSION_STATE_CHANGED:\n          return sessionStateChanged.deserialize(bytes(proto.getPayload()).toBuffer());\n\n        case FrameStub.Type.SERVER_HELLO:\n          return empty();\n      }\n    },\n\n    /**\n     * Get the name of notice scope.\n     * @function\n     * @name module:adapters.Mysqlx.Notice.Frame#getScope\n     * @returns {string}\n     */\n    getScope() {\n      return Object.keys(FrameStub.Scope).filter(k => FrameStub.Scope[k] === proto.getScope())[0];\n    },\n\n    /**\n     * Get the protocol scope identifier.\n     * @function\n     * @name module:adapters.Mysqlx.Notice.Frame#getScopeId\n     * @returns {number}\n     */\n    getScopeId() {\n      return proto.getScope();\n    },\n\n    /**\n     * Get the name of the notice type.\n     * @function\n     * @name module:adapters.Mysqlx.Notice.Frame#getType\n     * @returns {string}\n     */\n    getType() {\n      return Object.keys(FrameStub.Type).filter(k => FrameStub.Type[k] === proto.getType())[0];\n    },\n\n    /**\n     * Get the protocol type identifier.\n     * @function\n     * @name module:adapters.Mysqlx.Notice.Frame#getTypeId\n     * @returns {number}\n     */\n    getTypeId() {\n      return proto.getType();\n    },\n\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Notice.Frame#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        type: this.getType(),\n        scope: this.getScope(),\n        payload: this.getPayload().toJSON()\n      };\n    },\n\n    /**\n     * Return a plain JavaScript object version of the underlying protobuf instance.\n     * @function\n     * @name module:adapters.Mysqlx.Notice.Frame#toObject\n     * @returns {Object}\n     */\n    toObject() {\n      const frame = {\n        scope: proto.getScope(),\n        type: proto.getType()\n      };\n\n      switch (proto.getType()) {\n        case FrameStub.Type.WARNING:\n          return Object.assign({}, frame, {\n            warning: this.getPayload().toObject()\n          });\n\n        case FrameStub.Type.SESSION_VARIABLE_CHANGED:\n          return Object.assign({}, frame, {\n            variable: this.getPayload().toObject()\n          });\n\n        case FrameStub.Type.SESSION_STATE_CHANGED:\n          return Object.assign({}, frame, {\n            state: this.getPayload().toObject()\n          });\n\n        default:\n          return frame;\n      }\n    }\n\n  });\n}\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Notice.Frame}\n */\n\n\nFrame.deserialize = function (buffer) {\n  return Frame(FrameStub.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nFrame.MESSAGE_ID = ServerMessagesStub.Type.NOTICE;\nFrame.Type = FrameStub.Type;\nmodule.exports = Frame;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Notice/Frame.js"],"names":["FrameStub","require","Frame","ServerMessagesStub","ServerMessages","bytes","empty","sessionStateChanged","sessionVariableChanged","warning","wraps","proto","Object","assign","getPayload","getType","Type","WARNING","deserialize","toBuffer","SESSION_VARIABLE_CHANGED","SESSION_STATE_CHANGED","SERVER_HELLO","getScope","keys","Scope","filter","k","getScopeId","getTypeId","toJSON","type","scope","payload","toObject","frame","variable","state","buffer","deserializeBinary","MESSAGE_ID","NOTICE","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst FrameStub = require('../../../Stubs/mysqlx_notice_pb').Frame;\nconst ServerMessagesStub = require('../../../Stubs/mysqlx_pb').ServerMessages;\nconst bytes = require('../../../Wrappers/ScalarValues/bytes');\nconst empty = require('../../Traits/Empty');\nconst sessionStateChanged = require('./SessionStateChanged');\nconst sessionVariableChanged = require('./SessionVariableChanged');\nconst warning = require('./Warning');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Notice.Frame\n * @param {proto.Mysqlx.Notice.Frame} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Notice.Frame}\n */\nfunction Frame (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Get the payload of the notice.\n         * @function\n         * @name module:adapters.Mysqlx.Notice.Frame#getPayload\n         * @returns {module:adapters.Mysqlx.Notice.Warning|module:adapters.Mysqlx.Notice.SessionStateChanged|module:adapters.Mysqlx.Notice.SessionVariableChanged|module:adapters.Mysqlx.Empty}\n         */\n        getPayload () {\n            switch (proto.getType()) {\n            case FrameStub.Type.WARNING:\n                return warning.deserialize(bytes(proto.getPayload()).toBuffer());\n            case FrameStub.Type.SESSION_VARIABLE_CHANGED:\n                return sessionVariableChanged.deserialize(bytes(proto.getPayload()).toBuffer());\n            case FrameStub.Type.SESSION_STATE_CHANGED:\n                return sessionStateChanged.deserialize(bytes(proto.getPayload()).toBuffer());\n            case FrameStub.Type.SERVER_HELLO:\n                return empty();\n            }\n        },\n\n        /**\n         * Get the name of notice scope.\n         * @function\n         * @name module:adapters.Mysqlx.Notice.Frame#getScope\n         * @returns {string}\n         */\n        getScope () {\n            return Object.keys(FrameStub.Scope)\n                .filter(k => FrameStub.Scope[k] === proto.getScope())[0];\n        },\n\n        /**\n         * Get the protocol scope identifier.\n         * @function\n         * @name module:adapters.Mysqlx.Notice.Frame#getScopeId\n         * @returns {number}\n         */\n        getScopeId () {\n            return proto.getScope();\n        },\n\n        /**\n         * Get the name of the notice type.\n         * @function\n         * @name module:adapters.Mysqlx.Notice.Frame#getType\n         * @returns {string}\n         */\n        getType () {\n            return Object.keys(FrameStub.Type)\n                .filter(k => FrameStub.Type[k] === proto.getType())[0];\n        },\n\n        /**\n         * Get the protocol type identifier.\n         * @function\n         * @name module:adapters.Mysqlx.Notice.Frame#getTypeId\n         * @returns {number}\n         */\n        getTypeId () {\n            return proto.getType();\n        },\n\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Notice.Frame#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                type: this.getType(),\n                scope: this.getScope(),\n                payload: this.getPayload().toJSON()\n            };\n        },\n\n        /**\n         * Return a plain JavaScript object version of the underlying protobuf instance.\n         * @function\n         * @name module:adapters.Mysqlx.Notice.Frame#toObject\n         * @returns {Object}\n         */\n        toObject () {\n            const frame = { scope: proto.getScope(), type: proto.getType() };\n\n            switch (proto.getType()) {\n            case FrameStub.Type.WARNING:\n                return Object.assign({}, frame, { warning: this.getPayload().toObject() });\n            case FrameStub.Type.SESSION_VARIABLE_CHANGED:\n                return Object.assign({}, frame, { variable: this.getPayload().toObject() });\n            case FrameStub.Type.SESSION_STATE_CHANGED:\n                return Object.assign({}, frame, { state: this.getPayload().toObject() });\n            default:\n                return frame;\n            }\n        }\n    });\n}\n\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Notice.Frame}\n */\nFrame.deserialize = function (buffer) {\n    return Frame(FrameStub.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nFrame.MESSAGE_ID = ServerMessagesStub.Type.NOTICE;\nFrame.Type = FrameStub.Type;\n\nmodule.exports = Frame;\n"]},"metadata":{},"sourceType":"script"}