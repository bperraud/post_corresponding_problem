{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst ColumnStub = require('../../../Stubs/mysqlx_crud_pb').Column;\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Column\n * @param {proto.Mysqlx.Crud.Column} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Column}\n */\n\n\nfunction Column(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Crud.Column#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        // In this case, the value of \"name\" is not an optional string\n        // because it is always defined (Mysqlx.Crud.Column does not\n        // make a lot of sense). Additionally, this message is only\n        // used on TABLE mode, which means the remaining parameters\n        // never defined.\n        name: proto.getName()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Column instance given its name.\n * @param {string} name - column name\n * @returns {module:adapters.Mysqlx.Crud.Column}\n */\n\n\nColumn.create = function (value) {\n  if (typeof value === 'undefined') {\n    return Column();\n  }\n\n  const proto = new ColumnStub(); // Only the column name is supported which means that, in the end, it will\n  // always be a string and the Mysqlx.Crud.Column message type is a waste\n\n  proto.setName(value);\n  return Column(proto);\n};\n\nmodule.exports = Column;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Crud/Column.js"],"names":["ColumnStub","require","Column","wraps","proto","Object","assign","toJSON","name","getName","create","value","setName","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,+BAAD,CAAP,CAAyCC,MAA5D;;AACA,MAAMC,KAAK,GAAGF,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAiBE,KAAjB,EAAwB;AACpB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAK,CAACC,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAO;AACH;AACA;AACA;AACA;AACA;AACAC,QAAAA,IAAI,EAAEJ,KAAK,CAACK,OAAN;AANH,OAAP;AAQH;;AAhBkC,GAAhC,CAAP;AAkBH;AAED;AACA;AACA;AACA;AACA;;;AACAP,MAAM,CAACQ,MAAP,GAAgB,UAAUC,KAAV,EAAiB;AAC7B,MAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;AAC9B,WAAOT,MAAM,EAAb;AACH;;AAED,QAAME,KAAK,GAAG,IAAIJ,UAAJ,EAAd,CAL6B,CAM7B;AACA;;AACAI,EAAAA,KAAK,CAACQ,OAAN,CAAcD,KAAd;AAEA,SAAOT,MAAM,CAACE,KAAD,CAAb;AACH,CAXD;;AAaAS,MAAM,CAACC,OAAP,GAAiBZ,MAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst ColumnStub = require('../../../Stubs/mysqlx_crud_pb').Column;\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Column\n * @param {proto.Mysqlx.Crud.Column} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Column}\n */\nfunction Column (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Crud.Column#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                // In this case, the value of \"name\" is not an optional string\n                // because it is always defined (Mysqlx.Crud.Column does not\n                // make a lot of sense). Additionally, this message is only\n                // used on TABLE mode, which means the remaining parameters\n                // never defined.\n                name: proto.getName()\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Column instance given its name.\n * @param {string} name - column name\n * @returns {module:adapters.Mysqlx.Crud.Column}\n */\nColumn.create = function (value) {\n    if (typeof value === 'undefined') {\n        return Column();\n    }\n\n    const proto = new ColumnStub();\n    // Only the column name is supported which means that, in the end, it will\n    // always be a string and the Mysqlx.Crud.Column message type is a waste\n    proto.setName(value);\n\n    return Column(proto);\n};\n\nmodule.exports = Column;\n"]},"metadata":{},"sourceType":"script"}