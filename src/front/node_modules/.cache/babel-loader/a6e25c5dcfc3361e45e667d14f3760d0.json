{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n/**\n * Mysqlx.Session outbound message handlers.\n * @private\n * @module handlers.Mysqlx.Session\n */\n\nconst authenticateContinue = require('../Wrappers/Messages/Session/AuthenticateContinue');\n\nconst authenticateStart = require('../Wrappers/Messages/Session/AuthenticateStart');\n\nconst close = require('../Wrappers/Messages/Session/Close');\n\nconst logger = require('../../logger');\n\nconst reset = require('../Wrappers/Messages/Session/Reset');\n\nconst log = logger('protocol:outbound:Mysqlx.Session');\n/**\n * Encode a Mysqlx.Session.AuthenticateStart protobuf message.\n * @function\n * @name module:handlers.Mysqlx.Session#encodeAuthenticateStart\n * @param {string} mechanism - name of the authentication mechanism\n * @param {Buffer} [token] - authentication token\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\n\nexports.encodeAuthenticateStart = function (mechanism, token) {\n  const outboundAuthenticateStart = authenticateStart.create(mechanism, token);\n  log.info('AuthenticateStart', outboundAuthenticateStart);\n  return outboundAuthenticateStart.serialize();\n};\n/**\n * Encode a Mysqlx.Session.AuthenticateContinue protobuf message.\n * @function\n * @name module:handlers.Mysqlx.Session#encodeAuthenticateContinue\n * @param {Buffer} token - raw authentication data\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\n\n\nexports.encodeAuthenticateContinue = function (token) {\n  const outboundAuthenticateContinue = authenticateContinue.create(token);\n  log.info('AuthenticateContinue', outboundAuthenticateContinue);\n  return outboundAuthenticateContinue.serialize();\n};\n/**\n * Encode a Mysqlx.Session.Close protobuf message.\n * @function\n * @name module:handlers.Mysqlx.Session#encodeClose\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\n\n\nexports.encodeClose = function () {\n  const outboundClose = close.create();\n  log.info('Close', outboundClose);\n  return outboundClose.serialize();\n};\n/**\n * Encode a Mysqlx.Session.Reset protobuf message.\n * @function\n * @name module:handlers.Mysqlx.Session#encodeReset\n * @param {Object} [options] - reset options\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\n\n\nexports.encodeReset = function (options) {\n  options = Object.assign({\n    keepOpen: true\n  }, options);\n  const outboundReset = reset.create(options.keepOpen);\n  log.info('Reset', outboundReset);\n  return outboundReset.serialize();\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/OutboundHandlers/Session.js"],"names":["authenticateContinue","require","authenticateStart","close","logger","reset","log","exports","encodeAuthenticateStart","mechanism","token","outboundAuthenticateStart","create","info","serialize","encodeAuthenticateContinue","outboundAuthenticateContinue","encodeClose","outboundClose","encodeReset","options","Object","assign","keepOpen","outboundReset"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,mDAAD,CAApC;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,gDAAD,CAAjC;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,oCAAD,CAArB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,cAAD,CAAtB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,oCAAD,CAArB;;AAEA,MAAMK,GAAG,GAAGF,MAAM,CAAC,kCAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAG,OAAO,CAACC,uBAAR,GAAkC,UAAUC,SAAV,EAAqBC,KAArB,EAA4B;AAC1D,QAAMC,yBAAyB,GAAGT,iBAAiB,CAACU,MAAlB,CAAyBH,SAAzB,EAAoCC,KAApC,CAAlC;AACAJ,EAAAA,GAAG,CAACO,IAAJ,CAAS,mBAAT,EAA8BF,yBAA9B;AAEA,SAAOA,yBAAyB,CAACG,SAA1B,EAAP;AACH,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAP,OAAO,CAACQ,0BAAR,GAAqC,UAAUL,KAAV,EAAiB;AAClD,QAAMM,4BAA4B,GAAGhB,oBAAoB,CAACY,MAArB,CAA4BF,KAA5B,CAArC;AACAJ,EAAAA,GAAG,CAACO,IAAJ,CAAS,sBAAT,EAAiCG,4BAAjC;AAEA,SAAOA,4BAA4B,CAACF,SAA7B,EAAP;AACH,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;;;AACAP,OAAO,CAACU,WAAR,GAAsB,YAAY;AAC9B,QAAMC,aAAa,GAAGf,KAAK,CAACS,MAAN,EAAtB;AACAN,EAAAA,GAAG,CAACO,IAAJ,CAAS,OAAT,EAAkBK,aAAlB;AAEA,SAAOA,aAAa,CAACJ,SAAd,EAAP;AACH,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAP,OAAO,CAACY,WAAR,GAAsB,UAAUC,OAAV,EAAmB;AACrCA,EAAAA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAd,EAAkCH,OAAlC,CAAV;AAEA,QAAMI,aAAa,GAAGnB,KAAK,CAACO,MAAN,CAAaQ,OAAO,CAACG,QAArB,CAAtB;AACAjB,EAAAA,GAAG,CAACO,IAAJ,CAAS,OAAT,EAAkBW,aAAlB;AAEA,SAAOA,aAAa,CAACV,SAAd,EAAP;AACH,CAPD","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\n/**\n * Mysqlx.Session outbound message handlers.\n * @private\n * @module handlers.Mysqlx.Session\n */\n\nconst authenticateContinue = require('../Wrappers/Messages/Session/AuthenticateContinue');\nconst authenticateStart = require('../Wrappers/Messages/Session/AuthenticateStart');\nconst close = require('../Wrappers/Messages/Session/Close');\nconst logger = require('../../logger');\nconst reset = require('../Wrappers/Messages/Session/Reset');\n\nconst log = logger('protocol:outbound:Mysqlx.Session');\n\n/**\n * Encode a Mysqlx.Session.AuthenticateStart protobuf message.\n * @function\n * @name module:handlers.Mysqlx.Session#encodeAuthenticateStart\n * @param {string} mechanism - name of the authentication mechanism\n * @param {Buffer} [token] - authentication token\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\nexports.encodeAuthenticateStart = function (mechanism, token) {\n    const outboundAuthenticateStart = authenticateStart.create(mechanism, token);\n    log.info('AuthenticateStart', outboundAuthenticateStart);\n\n    return outboundAuthenticateStart.serialize();\n};\n\n/**\n * Encode a Mysqlx.Session.AuthenticateContinue protobuf message.\n * @function\n * @name module:handlers.Mysqlx.Session#encodeAuthenticateContinue\n * @param {Buffer} token - raw authentication data\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\nexports.encodeAuthenticateContinue = function (token) {\n    const outboundAuthenticateContinue = authenticateContinue.create(token);\n    log.info('AuthenticateContinue', outboundAuthenticateContinue);\n\n    return outboundAuthenticateContinue.serialize();\n};\n\n/**\n * Encode a Mysqlx.Session.Close protobuf message.\n * @function\n * @name module:handlers.Mysqlx.Session#encodeClose\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\nexports.encodeClose = function () {\n    const outboundClose = close.create();\n    log.info('Close', outboundClose);\n\n    return outboundClose.serialize();\n};\n\n/**\n * Encode a Mysqlx.Session.Reset protobuf message.\n * @function\n * @name module:handlers.Mysqlx.Session#encodeReset\n * @param {Object} [options] - reset options\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\nexports.encodeReset = function (options) {\n    options = Object.assign({ keepOpen: true }, options);\n\n    const outboundReset = reset.create(options.keepOpen);\n    log.info('Reset', outboundReset);\n\n    return outboundReset.serialize();\n};\n"]},"metadata":{},"sourceType":"script"}