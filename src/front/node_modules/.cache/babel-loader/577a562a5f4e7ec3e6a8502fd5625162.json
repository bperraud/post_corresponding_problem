{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n/**\n * Mysqlx.Prepare outbound message handlers.\n * @private\n * @module handlers.Mysqlx.Prepare\n */\n\nconst deallocate = require('../Wrappers/Messages/Prepare/Deallocate');\n\nconst execute = require('../Wrappers/Messages/Prepare/Execute');\n\nconst logger = require('../../logger');\n\nconst prepare = require('../Wrappers/Messages/Prepare/Prepare');\n\nconst log = logger('protocol:outbound:Mysqlx.Prepare');\n/**\n * Encode a Mysqlx.Prepare.Prepare protobuf message.\n * @function\n * @name module:Prepare#encodePrepare\n * @param {Query} query - database operation instance\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\n\nexports.encodePrepare = function (query) {\n  const outboundPrepare = prepare.create(query);\n  log.info('Prepare', outboundPrepare);\n  return outboundPrepare.serialize();\n};\n/**\n * Encode a Mysqlx.Prepare.Execute protobuf message.\n * @function\n * @name module:Prepare#encodeExecute\n * @param {Query} query - database operation instance\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\n\n\nexports.encodeExecute = function (query) {\n  const outboundExecute = execute.create(query);\n  log.info('Execute', outboundExecute);\n  return outboundExecute.serialize();\n};\n/**\n * Encode a Mysqlx.Prepare.Deallocate protobuf message.\n * @function\n * @name module:Prepare#encodeDeallocate\n * @param {Query} query - database operation instance\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\n\n\nexports.encodeDeallocate = function (query) {\n  const outboundDeallocate = deallocate.create(query);\n  log.info('Deallocate', outboundDeallocate);\n  return outboundDeallocate.serialize();\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/OutboundHandlers/Prepare.js"],"names":["deallocate","require","execute","logger","prepare","log","exports","encodePrepare","query","outboundPrepare","create","info","serialize","encodeExecute","outboundExecute","encodeDeallocate","outboundDeallocate"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,yCAAD,CAA1B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,sCAAD,CAAvB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,cAAD,CAAtB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,sCAAD,CAAvB;;AAEA,MAAMI,GAAG,GAAGF,MAAM,CAAC,kCAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAG,OAAO,CAACC,aAAR,GAAwB,UAAUC,KAAV,EAAiB;AACrC,QAAMC,eAAe,GAAGL,OAAO,CAACM,MAAR,CAAeF,KAAf,CAAxB;AACAH,EAAAA,GAAG,CAACM,IAAJ,CAAS,SAAT,EAAoBF,eAApB;AAEA,SAAOA,eAAe,CAACG,SAAhB,EAAP;AACH,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAN,OAAO,CAACO,aAAR,GAAwB,UAAUL,KAAV,EAAiB;AACrC,QAAMM,eAAe,GAAGZ,OAAO,CAACQ,MAAR,CAAeF,KAAf,CAAxB;AACAH,EAAAA,GAAG,CAACM,IAAJ,CAAS,SAAT,EAAoBG,eAApB;AAEA,SAAOA,eAAe,CAACF,SAAhB,EAAP;AACH,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAN,OAAO,CAACS,gBAAR,GAA2B,UAAUP,KAAV,EAAiB;AACxC,QAAMQ,kBAAkB,GAAGhB,UAAU,CAACU,MAAX,CAAkBF,KAAlB,CAA3B;AACAH,EAAAA,GAAG,CAACM,IAAJ,CAAS,YAAT,EAAuBK,kBAAvB;AAEA,SAAOA,kBAAkB,CAACJ,SAAnB,EAAP;AACH,CALD","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\n/**\n * Mysqlx.Prepare outbound message handlers.\n * @private\n * @module handlers.Mysqlx.Prepare\n */\n\nconst deallocate = require('../Wrappers/Messages/Prepare/Deallocate');\nconst execute = require('../Wrappers/Messages/Prepare/Execute');\nconst logger = require('../../logger');\nconst prepare = require('../Wrappers/Messages/Prepare/Prepare');\n\nconst log = logger('protocol:outbound:Mysqlx.Prepare');\n\n/**\n * Encode a Mysqlx.Prepare.Prepare protobuf message.\n * @function\n * @name module:Prepare#encodePrepare\n * @param {Query} query - database operation instance\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\nexports.encodePrepare = function (query) {\n    const outboundPrepare = prepare.create(query);\n    log.info('Prepare', outboundPrepare);\n\n    return outboundPrepare.serialize();\n};\n\n/**\n * Encode a Mysqlx.Prepare.Execute protobuf message.\n * @function\n * @name module:Prepare#encodeExecute\n * @param {Query} query - database operation instance\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\nexports.encodeExecute = function (query) {\n    const outboundExecute = execute.create(query);\n    log.info('Execute', outboundExecute);\n\n    return outboundExecute.serialize();\n};\n\n/**\n * Encode a Mysqlx.Prepare.Deallocate protobuf message.\n * @function\n * @name module:Prepare#encodeDeallocate\n * @param {Query} query - database operation instance\n * @returns {Buffer} The protobuf encoded buffer payload.\n */\nexports.encodeDeallocate = function (query) {\n    const outboundDeallocate = deallocate.create(query);\n    log.info('Deallocate', outboundDeallocate);\n\n    return outboundDeallocate.serialize();\n};\n"]},"metadata":{},"sourceType":"script"}