{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst Datatypes = require('../../../Stubs/mysqlx_datatypes_pb');\n\nconst scalar = require('./Scalar');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Datatypes.Array\n * @param {proto.Mysqlx.Datatypes.Array} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Datatypes.Array}\n */\n\n\nfunction pArray(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Returns a list of the underlying native JavaScript type literals.\n     * @function\n     * @name module:adapters.Mysqlx.Datatypes.Any#toObject\n     * @returns {Object}\n     */\n    toArray() {\n      return proto.getValueList().map(v => any(v).toLiteral());\n    },\n\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Datatypes.Array#toJSON\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        value: proto.getValueList().map(v => any(v).toJSON())\n      };\n    }\n\n  });\n}\n/**\n * Checks if a value can be encoded as a Mysqlx.Datatypes.Array.\n * @returns {boolean}\n */\n\n\npArray.canEncode = function (value) {\n  return Array.isArray(value);\n};\n/**\n * Creates a wrapper of a Mysqlx.Datatypes.Array instance for a given value.\n * @returns {module:adapters.Mysqlx.Datatypes.Array}\n */\n\n\npArray.create = function (values) {\n  const proto = new Datatypes.Array();\n  proto.setValueList(values.map(value => any.create(value).valueOf()));\n  return pArray(proto);\n};\n/**\n * @private\n * @alias module:adapters.Mysqlx.Datatypes.Object\n * @param {proto.Mysqlx.Datatypes.Object} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Datatypes.Object}\n */\n\n\nfunction pObject(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Datatypes.Object#toJSON\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        fld: proto.getFldList().map(v => ({\n          key: v.getKey(),\n          value: any(v.getValue()).toJSON()\n        }))\n      };\n    },\n\n    /**\n     * Returns a key-value mapping of the encoded fields.\n     * @function\n     * @name module:adapters.Mysqlx.Datatypes.Any#toObject\n     * @returns {Object}\n     */\n    toObject() {\n      return proto.getFldList().reduce((objs, fld) => Object.assign({}, objs, {\n        [fld.getKey()]: any(fld.getValue()).toLiteral()\n      }), {});\n    }\n\n  });\n}\n\n;\n/**\n * Checks if a value can be encoded as a Mysqlx.Datatypes.Object.\n * @returns {boolean}\n */\n\npObject.canEncode = function (value) {\n  return !Array.isArray(value) && Object(value) === value;\n};\n/**\n * Creates a wrapper of a Mysqlx.Datatypes.Object instance for a given value.\n * @returns {module:adapters.Mysqlx.Datatypes.Object}\n */\n\n\npObject.create = function (values) {\n  const proto = new Datatypes.Object();\n  proto.setFldList(Object.keys(values).map(key => {\n    const field = new Datatypes.Object.ObjectField();\n    field.setKey(key);\n    field.setValue(any.create(values[key]).valueOf());\n    return field;\n  }));\n  return pObject(proto);\n};\n/**\n * @private\n * @alias module:adapters.Mysqlx.Datatypes.Any\n * @param {proto.Mysqlx.Datatypes.Any} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Datatypes.Any}\n */\n\n\nfunction any(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Retrieve the type name.\n     * @function\n     * @name module:adapters.Mysqlx.Datatypes.Any#getType\n     * @returns {string} The type name.\n     */\n    getType() {\n      return Object.keys(Datatypes.Any.Type).filter(k => Datatypes.Any.Type[k] === proto.getType())[0];\n    },\n\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Datatypes.Any#toJSON\n     * @returns {Object}\n     */\n    toJSON() {\n      switch (proto.getType()) {\n        case Datatypes.Any.Type.SCALAR:\n          return {\n            type: this.getType(),\n            scalar: scalar(proto.getScalar()).toJSON()\n          };\n\n        case Datatypes.Any.Type.OBJECT:\n          return {\n            type: this.getType(),\n            obj: pObject(proto.getObj()).toJSON()\n          };\n\n        case Datatypes.Any.Type.ARRAY:\n          return {\n            type: this.getType(),\n            array: pArray(proto.getArray()).toJSON()\n          };\n      }\n    },\n\n    /**\n     * Return the corresponding native JavaScript type literal for the underlying value.\n     * @function\n     * @name module:adapters.Mysqlx.Datatypes.Any#toLiteral\n     * @returns {*}\n     */\n    toLiteral() {\n      switch (proto.getType()) {\n        case Datatypes.Any.Type.SCALAR:\n          return scalar(proto.getScalar()).toLiteral();\n\n        case Datatypes.Any.Type.OBJECT:\n          return pObject(proto.getObj()).toObject();\n\n        case Datatypes.Any.Type.ARRAY:\n          return pArray(proto.getArray()).toArray();\n      }\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a Mysqlx.Datatypes.Any instance for a given value.\n * @returns {module:adapters.Mysqlx.Datatypes.Any}\n */\n\n\nany.create = function (value) {\n  const proto = new Datatypes.Any(); // if the value is an object, we first need to check if the value can be\n  // encoded as a Scalar (e.g. Buffer and Date)\n\n  if (scalar.canEncode(value)) {\n    proto.setType(Datatypes.Any.Type.SCALAR);\n    proto.setScalar(scalar.create(value).valueOf());\n  } else if (pArray.canEncode(value)) {\n    proto.setType(Datatypes.Any.Type.ARRAY);\n    proto.setArray(pArray.create(value).valueOf());\n  } else if (pObject.canEncode(value)) {\n    proto.setType(Datatypes.Any.Type.OBJECT);\n    proto.setObj(pObject.create(value).valueOf());\n  }\n\n  return any(proto);\n};\n\nmodule.exports = any;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Datatypes/Any.js"],"names":["Datatypes","require","scalar","wraps","pArray","proto","Object","assign","toArray","getValueList","map","v","any","toLiteral","toJSON","value","canEncode","Array","isArray","create","values","setValueList","valueOf","pObject","fld","getFldList","key","getKey","getValue","toObject","reduce","objs","setFldList","keys","field","ObjectField","setKey","setValue","getType","Any","Type","filter","k","SCALAR","type","getScalar","OBJECT","obj","getObj","ARRAY","array","getArray","setType","setScalar","setArray","setObj","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst Datatypes = require('../../../Stubs/mysqlx_datatypes_pb');\nconst scalar = require('./Scalar');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Datatypes.Array\n * @param {proto.Mysqlx.Datatypes.Array} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Datatypes.Array}\n */\nfunction pArray (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Returns a list of the underlying native JavaScript type literals.\n         * @function\n         * @name module:adapters.Mysqlx.Datatypes.Any#toObject\n         * @returns {Object}\n         */\n        toArray () {\n            return proto.getValueList().map(v => any(v).toLiteral());\n        },\n\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Datatypes.Array#toJSON\n         * @returns {Object}\n         */\n        toJSON () {\n            return { value: proto.getValueList().map(v => any(v).toJSON()) };\n        }\n    });\n}\n\n/**\n * Checks if a value can be encoded as a Mysqlx.Datatypes.Array.\n * @returns {boolean}\n */\npArray.canEncode = function (value) {\n    return Array.isArray(value);\n};\n\n/**\n * Creates a wrapper of a Mysqlx.Datatypes.Array instance for a given value.\n * @returns {module:adapters.Mysqlx.Datatypes.Array}\n */\npArray.create = function (values) {\n    const proto = new Datatypes.Array();\n    proto.setValueList(values.map(value => any.create(value).valueOf()));\n\n    return pArray(proto);\n};\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Datatypes.Object\n * @param {proto.Mysqlx.Datatypes.Object} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Datatypes.Object}\n */\nfunction pObject (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Datatypes.Object#toJSON\n         * @returns {Object}\n         */\n        toJSON () {\n            return { fld: proto.getFldList().map(v => ({ key: v.getKey(), value: any(v.getValue()).toJSON() })) };\n        },\n\n        /**\n         * Returns a key-value mapping of the encoded fields.\n         * @function\n         * @name module:adapters.Mysqlx.Datatypes.Any#toObject\n         * @returns {Object}\n         */\n        toObject () {\n            return proto.getFldList()\n                .reduce((objs, fld) => Object.assign({}, objs, { [fld.getKey()]: any(fld.getValue()).toLiteral() }), {});\n        }\n    });\n};\n\n/**\n * Checks if a value can be encoded as a Mysqlx.Datatypes.Object.\n * @returns {boolean}\n */\npObject.canEncode = function (value) {\n    return !Array.isArray(value) && Object(value) === value;\n};\n\n/**\n * Creates a wrapper of a Mysqlx.Datatypes.Object instance for a given value.\n * @returns {module:adapters.Mysqlx.Datatypes.Object}\n */\npObject.create = function (values) {\n    const proto = new Datatypes.Object();\n    proto.setFldList(Object.keys(values).map(key => {\n        const field = new Datatypes.Object.ObjectField();\n        field.setKey(key);\n        field.setValue(any.create(values[key]).valueOf());\n\n        return field;\n    }));\n\n    return pObject(proto);\n};\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Datatypes.Any\n * @param {proto.Mysqlx.Datatypes.Any} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Datatypes.Any}\n */\nfunction any (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Retrieve the type name.\n         * @function\n         * @name module:adapters.Mysqlx.Datatypes.Any#getType\n         * @returns {string} The type name.\n         */\n        getType () {\n            return Object.keys(Datatypes.Any.Type).filter(k => Datatypes.Any.Type[k] === proto.getType())[0];\n        },\n\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Datatypes.Any#toJSON\n         * @returns {Object}\n         */\n        toJSON () {\n            switch (proto.getType()) {\n            case Datatypes.Any.Type.SCALAR:\n                return { type: this.getType(), scalar: scalar(proto.getScalar()).toJSON() };\n            case Datatypes.Any.Type.OBJECT:\n                return { type: this.getType(), obj: pObject(proto.getObj()).toJSON() };\n            case Datatypes.Any.Type.ARRAY:\n                return { type: this.getType(), array: pArray(proto.getArray()).toJSON() };\n            }\n        },\n\n        /**\n         * Return the corresponding native JavaScript type literal for the underlying value.\n         * @function\n         * @name module:adapters.Mysqlx.Datatypes.Any#toLiteral\n         * @returns {*}\n         */\n        toLiteral () {\n            switch (proto.getType()) {\n            case Datatypes.Any.Type.SCALAR:\n                return scalar(proto.getScalar()).toLiteral();\n            case Datatypes.Any.Type.OBJECT:\n                return pObject(proto.getObj()).toObject();\n            case Datatypes.Any.Type.ARRAY:\n                return pArray(proto.getArray()).toArray();\n            }\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a Mysqlx.Datatypes.Any instance for a given value.\n * @returns {module:adapters.Mysqlx.Datatypes.Any}\n */\nany.create = function (value) {\n    const proto = new Datatypes.Any();\n\n    // if the value is an object, we first need to check if the value can be\n    // encoded as a Scalar (e.g. Buffer and Date)\n    if (scalar.canEncode(value)) {\n        proto.setType(Datatypes.Any.Type.SCALAR);\n        proto.setScalar(scalar.create(value).valueOf());\n    } else if (pArray.canEncode(value)) {\n        proto.setType(Datatypes.Any.Type.ARRAY);\n        proto.setArray(pArray.create(value).valueOf());\n    } else if (pObject.canEncode(value)) {\n        proto.setType(Datatypes.Any.Type.OBJECT);\n        proto.setObj(pObject.create(value).valueOf());\n    }\n\n    return any(proto);\n};\n\nmodule.exports = any;\n"]},"metadata":{},"sourceType":"script"}