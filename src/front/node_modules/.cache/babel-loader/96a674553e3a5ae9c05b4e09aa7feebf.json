{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst SessionVariableChangedStub = require('../../../Stubs/mysqlx_notice_pb').SessionVariableChanged;\n\nconst bytes = require('../../ScalarValues/bytes');\n\nconst scalar = require('../Datatypes/Scalar');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Notice.SessionVariableChanged\n * @param {proto.Mysqlx.Notice.SessionVariableChanged} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Notice.SessionVariableChanged}\n */\n\n\nfunction SessionVariableChanged(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Notice.SessionVariableChanged#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        param: proto.getParam(),\n        value: scalar(proto.getValue()).toJSON()\n      };\n    },\n\n    /**\n     * Return a plain JavaScript object version of the underlying protobuf instance.\n     * @function\n     * @name module:adapters.Mysqlx.Notice.SessionVariableChanged#toObject\n     * @returns {Object}\n     */\n    toObject() {\n      return {\n        [proto.getParam()]: scalar(proto.getValue()).toLiteral()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Notice.SessionVariableChanged}\n */\n\n\nSessionVariableChanged.deserialize = function (buffer) {\n  return SessionVariableChanged(SessionVariableChangedStub.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nmodule.exports = SessionVariableChanged;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Notice/SessionVariableChanged.js"],"names":["SessionVariableChangedStub","require","SessionVariableChanged","bytes","scalar","wraps","proto","Object","assign","toJSON","param","getParam","value","getValue","toObject","toLiteral","deserialize","buffer","deserializeBinary","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,0BAA0B,GAAGC,OAAO,CAAC,iCAAD,CAAP,CAA2CC,sBAA9E;;AACA,MAAMC,KAAK,GAAGF,OAAO,CAAC,0BAAD,CAArB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,qBAAD,CAAtB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAiCI,KAAjC,EAAwC;AACpC,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAK,CAACC,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAO;AAAEC,QAAAA,KAAK,EAAEJ,KAAK,CAACK,QAAN,EAAT;AAA2BC,QAAAA,KAAK,EAAER,MAAM,CAACE,KAAK,CAACO,QAAN,EAAD,CAAN,CAAyBJ,MAAzB;AAAlC,OAAP;AACH,KATkC;;AAWnC;AACR;AACA;AACA;AACA;AACA;AACQK,IAAAA,QAAQ,GAAI;AACR,aAAO;AAAE,SAACR,KAAK,CAACK,QAAN,EAAD,GAAoBP,MAAM,CAACE,KAAK,CAACO,QAAN,EAAD,CAAN,CAAyBE,SAAzB;AAAtB,OAAP;AACH;;AAnBkC,GAAhC,CAAP;AAqBH;AAED;AACA;AACA;AACA;;;AACAb,sBAAsB,CAACc,WAAvB,GAAqC,UAAUC,MAAV,EAAkB;AACnD,SAAOf,sBAAsB,CAACF,0BAA0B,CAACkB,iBAA3B,CAA6Cf,KAAK,CAACa,WAAN,CAAkBC,MAAlB,CAA7C,CAAD,CAA7B;AACH,CAFD;;AAIAE,MAAM,CAACC,OAAP,GAAiBlB,sBAAjB","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst SessionVariableChangedStub = require('../../../Stubs/mysqlx_notice_pb').SessionVariableChanged;\nconst bytes = require('../../ScalarValues/bytes');\nconst scalar = require('../Datatypes/Scalar');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Notice.SessionVariableChanged\n * @param {proto.Mysqlx.Notice.SessionVariableChanged} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Notice.SessionVariableChanged}\n */\nfunction SessionVariableChanged (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Notice.SessionVariableChanged#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return { param: proto.getParam(), value: scalar(proto.getValue()).toJSON() };\n        },\n\n        /**\n         * Return a plain JavaScript object version of the underlying protobuf instance.\n         * @function\n         * @name module:adapters.Mysqlx.Notice.SessionVariableChanged#toObject\n         * @returns {Object}\n         */\n        toObject () {\n            return { [proto.getParam()]: scalar(proto.getValue()).toLiteral() };\n        }\n    });\n}\n\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Notice.SessionVariableChanged}\n */\nSessionVariableChanged.deserialize = function (buffer) {\n    return SessionVariableChanged(SessionVariableChangedStub.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nmodule.exports = SessionVariableChanged;\n"]},"metadata":{},"sourceType":"script"}