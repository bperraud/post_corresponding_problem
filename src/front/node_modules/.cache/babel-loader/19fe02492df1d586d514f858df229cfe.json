{"ast":null,"code":"/*\n * Copyright (c) 2018, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst rowResult = require('./RowResult');\n/**\n * API for raw SQL queries.\n * @module SqlResult\n * @mixes module:RowResult\n */\n\n/**\n * @private\n * @alias module:SqlResult\n * @param {Object} state - result details\n * @returns {module:SqlResult}\n */\n\n\nfunction SqlResult(state) {\n  state = Object.assign({}, state);\n  return Object.assign({}, rowResult(state), {\n    /**\n     * Retrieve the first <code>AUTO INCREMENT</code> value generated by the operation.\n     * @function\n     * @name module:SqlResult#getAutoIncrementValue\n     * @returns {number} The first value.\n     */\n    getAutoIncrementValue() {\n      return state.generatedInsertId;\n    },\n\n    /**\n     * Checks if the result set contains additional data.\n     * @function\n     * @name module:SqlResult#hasData\n     * @returns {boolean}\n     */\n    hasData() {\n      return this.getResults().length > 0;\n    },\n\n    /**\n     * Returns the entire result set (without flushing) as a JavaScript Arrray.\n     * @function\n     * @name module:SqlResult#toArray\n     * @returns {Array}\n     */\n    toArray() {\n      return this.getResults().map(result => result.map(row => row.toArray()));\n    }\n\n  });\n}\n\nmodule.exports = SqlResult;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/SqlResult.js"],"names":["rowResult","require","SqlResult","state","Object","assign","getAutoIncrementValue","generatedInsertId","hasData","getResults","length","toArray","map","result","row","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAoBC,KAApB,EAA2B;AACvBA,EAAAA,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,KAAlB,CAAR;AAEA,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,SAAS,CAACG,KAAD,CAA3B,EAAoC;AACvC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,qBAAqB,GAAI;AACrB,aAAOH,KAAK,CAACI,iBAAb;AACH,KATsC;;AAWvC;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,OAAO,GAAI;AACP,aAAO,KAAKC,UAAL,GAAkBC,MAAlB,GAA2B,CAAlC;AACH,KAnBsC;;AAqBvC;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,OAAO,GAAI;AACP,aAAO,KAAKF,UAAL,GAAkBG,GAAlB,CAAsBC,MAAM,IAAIA,MAAM,CAACD,GAAP,CAAWE,GAAG,IAAIA,GAAG,CAACH,OAAJ,EAAlB,CAAhC,CAAP;AACH;;AA7BsC,GAApC,CAAP;AA+BH;;AAEDI,MAAM,CAACC,OAAP,GAAiBd,SAAjB","sourcesContent":["/*\n * Copyright (c) 2018, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst rowResult = require('./RowResult');\n\n/**\n * API for raw SQL queries.\n * @module SqlResult\n * @mixes module:RowResult\n */\n\n/**\n * @private\n * @alias module:SqlResult\n * @param {Object} state - result details\n * @returns {module:SqlResult}\n */\nfunction SqlResult (state) {\n    state = Object.assign({}, state);\n\n    return Object.assign({}, rowResult(state), {\n        /**\n         * Retrieve the first <code>AUTO INCREMENT</code> value generated by the operation.\n         * @function\n         * @name module:SqlResult#getAutoIncrementValue\n         * @returns {number} The first value.\n         */\n        getAutoIncrementValue () {\n            return state.generatedInsertId;\n        },\n\n        /**\n         * Checks if the result set contains additional data.\n         * @function\n         * @name module:SqlResult#hasData\n         * @returns {boolean}\n         */\n        hasData () {\n            return this.getResults().length > 0;\n        },\n\n        /**\n         * Returns the entire result set (without flushing) as a JavaScript Arrray.\n         * @function\n         * @name module:SqlResult#toArray\n         * @returns {Array}\n         */\n        toArray () {\n            return this.getResults().map(result => result.map(row => row.toArray()));\n        }\n    });\n}\n\nmodule.exports = SqlResult;\n"]},"metadata":{},"sourceType":"script"}