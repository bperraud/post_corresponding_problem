{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst MysqlxStub = require('../../Stubs/mysqlx_pb');\n\nconst bytes = require('../ScalarValues/bytes');\n\nconst serializable = require('../Traits/Serializable');\n\nconst wraps = require('../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Error\n * @param {proto.Mysqlx.Error} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Error}\n */\n\n\nfunction Error(proto) {\n  // The serializable trait is needed in order to re-use the work queue\n  // error handling handling logic.\n  return Object.assign({}, serializable(proto), wraps(proto), {\n    /**\n     * Get the error severity.\n     * @function\n     * @name module:adapters.Mysqlx.Error#getSeverity\n     * @returns {string}\n     */\n    getSeverity() {\n      return Object.keys(MysqlxStub.Error.Severity).filter(k => MysqlxStub.Error.Severity[k] === proto.getSeverity())[0];\n    },\n\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Error#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        severity: this.getSeverity(),\n        code: proto.getCode(),\n        sql_state: proto.getSqlState(),\n        msg: proto.getMsg()\n      };\n    },\n\n    /**\n     * Return a plain JavaScript object version of the underlying protobuf instance.\n     * @function\n     * @name module:adapters.Mysqlx.Error#toObject\n     * @returns {Object}\n     */\n    toObject() {\n      return proto.toObject();\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Error instance for a error message.\n * @returns {module:adapters.Mysqlx.Error}\n */\n\n\nError.create = function (message) {\n  const proto = new MysqlxStub.Error(); // TODO(Rui): create a convention for error codes (X DevAPI worklog)\n\n  proto.setMsg(message);\n  return Error(proto);\n};\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Error}\n */\n\n\nError.deserialize = function (buffer) {\n  return Error(MysqlxStub.Error.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nError.SEVERITY = MysqlxStub.Error.Severity;\nError.MESSAGE_ID = MysqlxStub.ServerMessages.Type.ERROR;\nError.SERVER_GONE = -1;\nmodule.exports = Error;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Error.js"],"names":["MysqlxStub","require","bytes","serializable","wraps","Error","proto","Object","assign","getSeverity","keys","Severity","filter","k","toJSON","severity","code","getCode","sql_state","getSqlState","msg","getMsg","toObject","create","message","setMsg","deserialize","buffer","deserializeBinary","SEVERITY","MESSAGE_ID","ServerMessages","Type","ERROR","SERVER_GONE","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,uBAAD,CAA1B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,uBAAD,CAArB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,wBAAD,CAA5B;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,iBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,KAAT,CAAgBC,KAAhB,EAAuB;AACnB;AACA;AACA,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,YAAY,CAACG,KAAD,CAA9B,EAAuCF,KAAK,CAACE,KAAD,CAA5C,EAAqD;AACxD;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,WAAW,GAAI;AACX,aAAOF,MAAM,CAACG,IAAP,CAAYV,UAAU,CAACK,KAAX,CAAiBM,QAA7B,EACFC,MADE,CACKC,CAAC,IAAIb,UAAU,CAACK,KAAX,CAAiBM,QAAjB,CAA0BE,CAA1B,MAAiCP,KAAK,CAACG,WAAN,EAD3C,EACgE,CADhE,CAAP;AAEH,KAVuD;;AAYxD;AACR;AACA;AACA;AACA;AACA;AACQK,IAAAA,MAAM,GAAI;AACN,aAAO;AACHC,QAAAA,QAAQ,EAAE,KAAKN,WAAL,EADP;AAEHO,QAAAA,IAAI,EAAEV,KAAK,CAACW,OAAN,EAFH;AAGHC,QAAAA,SAAS,EAAEZ,KAAK,CAACa,WAAN,EAHR;AAIHC,QAAAA,GAAG,EAAEd,KAAK,CAACe,MAAN;AAJF,OAAP;AAMH,KAzBuD;;AA2BxD;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,QAAQ,GAAI;AACR,aAAOhB,KAAK,CAACgB,QAAN,EAAP;AACH;;AAnCuD,GAArD,CAAP;AAqCH;AAED;AACA;AACA;AACA;;;AACAjB,KAAK,CAACkB,MAAN,GAAe,UAAUC,OAAV,EAAmB;AAC9B,QAAMlB,KAAK,GAAG,IAAIN,UAAU,CAACK,KAAf,EAAd,CAD8B,CAE9B;;AACAC,EAAAA,KAAK,CAACmB,MAAN,CAAaD,OAAb;AAEA,SAAOnB,KAAK,CAACC,KAAD,CAAZ;AACH,CAND;AAQA;AACA;AACA;AACA;;;AACAD,KAAK,CAACqB,WAAN,GAAoB,UAAUC,MAAV,EAAkB;AAClC,SAAOtB,KAAK,CAACL,UAAU,CAACK,KAAX,CAAiBuB,iBAAjB,CAAmC1B,KAAK,CAACwB,WAAN,CAAkBC,MAAlB,CAAnC,CAAD,CAAZ;AACH,CAFD;;AAIAtB,KAAK,CAACwB,QAAN,GAAiB7B,UAAU,CAACK,KAAX,CAAiBM,QAAlC;AACAN,KAAK,CAACyB,UAAN,GAAmB9B,UAAU,CAAC+B,cAAX,CAA0BC,IAA1B,CAA+BC,KAAlD;AACA5B,KAAK,CAAC6B,WAAN,GAAoB,CAAC,CAArB;AAEAC,MAAM,CAACC,OAAP,GAAiB/B,KAAjB","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst MysqlxStub = require('../../Stubs/mysqlx_pb');\nconst bytes = require('../ScalarValues/bytes');\nconst serializable = require('../Traits/Serializable');\nconst wraps = require('../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Error\n * @param {proto.Mysqlx.Error} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Error}\n */\nfunction Error (proto) {\n    // The serializable trait is needed in order to re-use the work queue\n    // error handling handling logic.\n    return Object.assign({}, serializable(proto), wraps(proto), {\n        /**\n         * Get the error severity.\n         * @function\n         * @name module:adapters.Mysqlx.Error#getSeverity\n         * @returns {string}\n         */\n        getSeverity () {\n            return Object.keys(MysqlxStub.Error.Severity)\n                .filter(k => MysqlxStub.Error.Severity[k] === proto.getSeverity())[0];\n        },\n\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Error#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                severity: this.getSeverity(),\n                code: proto.getCode(),\n                sql_state: proto.getSqlState(),\n                msg: proto.getMsg()\n            };\n        },\n\n        /**\n         * Return a plain JavaScript object version of the underlying protobuf instance.\n         * @function\n         * @name module:adapters.Mysqlx.Error#toObject\n         * @returns {Object}\n         */\n        toObject () {\n            return proto.toObject();\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Error instance for a error message.\n * @returns {module:adapters.Mysqlx.Error}\n */\nError.create = function (message) {\n    const proto = new MysqlxStub.Error();\n    // TODO(Rui): create a convention for error codes (X DevAPI worklog)\n    proto.setMsg(message);\n\n    return Error(proto);\n};\n\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Error}\n */\nError.deserialize = function (buffer) {\n    return Error(MysqlxStub.Error.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nError.SEVERITY = MysqlxStub.Error.Severity;\nError.MESSAGE_ID = MysqlxStub.ServerMessages.Type.ERROR;\nError.SERVER_GONE = -1;\n\nmodule.exports = Error;\n"]},"metadata":{},"sourceType":"script"}