{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst CapabilityStub = require('../../../Stubs/mysqlx_connection_pb').Capability;\n\nconst any = require('../Datatypes/Any');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Connection.Capability\n * @param {proto.Mysqlx.Connection.Capability} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Connection.Capability}\n */\n\n\nfunction Capability(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Connection.Capability#toJSON\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        name: proto.getName(),\n        value: any(proto.getValue()).toJSON()\n      };\n    },\n\n    /**\n     * Return a key-value mapping of the capability.\n     * @function\n     * @name module:adapters.Mysqlx.Connection.Capability#toObject\n     * @returns {Object}\n     */\n    toObject() {\n      return {\n        [proto.getName()]: any(proto.getValue()).toLiteral()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a Mysqlx.Connection.Capability instance for a key-value pair.\n * @param {string} name - property name\n * @param {*} value - property value\n * @returns {module:adapters.Mysqlx.Connection.Capability}\n */\n\n\nCapability.create = function (name, value) {\n  const proto = new CapabilityStub();\n  proto.setName(name);\n  proto.setValue(any.create(value).valueOf());\n  return Capability(proto);\n};\n\nmodule.exports = Capability;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Connection/Capability.js"],"names":["CapabilityStub","require","Capability","any","wraps","proto","Object","assign","toJSON","name","getName","value","getValue","toObject","toLiteral","create","setName","setValue","valueOf","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,qCAAD,CAAP,CAA+CC,UAAtE;;AACA,MAAMC,GAAG,GAAGF,OAAO,CAAC,kBAAD,CAAnB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAqBG,KAArB,EAA4B;AACxB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAK,CAACC,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAO;AAAEC,QAAAA,IAAI,EAAEJ,KAAK,CAACK,OAAN,EAAR;AAAyBC,QAAAA,KAAK,EAAER,GAAG,CAACE,KAAK,CAACO,QAAN,EAAD,CAAH,CAAsBJ,MAAtB;AAAhC,OAAP;AACH,KATkC;;AAWnC;AACR;AACA;AACA;AACA;AACA;AACQK,IAAAA,QAAQ,GAAI;AACR,aAAO;AAAE,SAACR,KAAK,CAACK,OAAN,EAAD,GAAmBP,GAAG,CAACE,KAAK,CAACO,QAAN,EAAD,CAAH,CAAsBE,SAAtB;AAArB,OAAP;AACH;;AAnBkC,GAAhC,CAAP;AAqBH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAZ,UAAU,CAACa,MAAX,GAAoB,UAAUN,IAAV,EAAgBE,KAAhB,EAAuB;AACvC,QAAMN,KAAK,GAAG,IAAIL,cAAJ,EAAd;AACAK,EAAAA,KAAK,CAACW,OAAN,CAAcP,IAAd;AACAJ,EAAAA,KAAK,CAACY,QAAN,CAAed,GAAG,CAACY,MAAJ,CAAWJ,KAAX,EAAkBO,OAAlB,EAAf;AAEA,SAAOhB,UAAU,CAACG,KAAD,CAAjB;AACH,CAND;;AAQAc,MAAM,CAACC,OAAP,GAAiBlB,UAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst CapabilityStub = require('../../../Stubs/mysqlx_connection_pb').Capability;\nconst any = require('../Datatypes/Any');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Connection.Capability\n * @param {proto.Mysqlx.Connection.Capability} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Connection.Capability}\n */\nfunction Capability (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Connection.Capability#toJSON\n         * @returns {Object}\n         */\n        toJSON () {\n            return { name: proto.getName(), value: any(proto.getValue()).toJSON() };\n        },\n\n        /**\n         * Return a key-value mapping of the capability.\n         * @function\n         * @name module:adapters.Mysqlx.Connection.Capability#toObject\n         * @returns {Object}\n         */\n        toObject () {\n            return { [proto.getName()]: any(proto.getValue()).toLiteral() };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a Mysqlx.Connection.Capability instance for a key-value pair.\n * @param {string} name - property name\n * @param {*} value - property value\n * @returns {module:adapters.Mysqlx.Connection.Capability}\n */\nCapability.create = function (name, value) {\n    const proto = new CapabilityStub();\n    proto.setName(name);\n    proto.setValue(any.create(value).valueOf());\n\n    return Capability(proto);\n};\n\nmodule.exports = Capability;\n"]},"metadata":{},"sourceType":"script"}