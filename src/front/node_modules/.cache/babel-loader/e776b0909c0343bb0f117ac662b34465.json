{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst errors = require('../../../constants/errors');\n\nmodule.exports = parse;\n/**\n * Parse a single address without an explicit priority.\n * @private\n * @param {string} input - formatted address string\n * @throws {Error} When the host is not valid.\n * @returns {Address} Object containing the address details.\n * @example\n * const ipv6Address = '[::1]:33060'\n * const ipv4Address = '127.0.0.1:33060'\n * const cnAddress = 'localhost:33060'\n */\n\nfunction parse(input) {\n  // hostMatch will always contain something\n  const hostMatch = decodeURIComponent(input).trim().match(/\\(?([./][^)]+)\\)?|\\[(.+)\\]|([^:]+)/);\n  const portMatch = decodeURIComponent(input).trim().match(/:([^[\\]]+)$/) || [];\n  const isValid = isLocalFile(hostMatch[1]) || isIPv6(hostMatch[2]) || isIPv4(hostMatch[3]) || isCommonName(hostMatch[3]);\n\n  if (!isValid) {\n    throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_CONNECTION_STRING_HOST);\n  }\n\n  const socket = hostMatch[1]; // hostMatch[1] should contain an IPv6 address match\n  // hostMatch[2] should contain a non-IPv6 address match\n\n  const host = hostMatch[2] || hostMatch[3];\n  const address = {\n    host,\n    socket\n  };\n  const portNum = parseInt(portMatch[1], 10);\n  address.port = !isNaN(portNum) ? portNum : portMatch[1];\n  return address;\n}\n/**\n * Check if a host is a valid IPv6 address.\n * @private\n * @param {string} input - host\n * @returns {Boolean}\n */\n\n\nfunction isIPv6(input) {\n  if (!input) {\n    return false;\n  }\n\n  const decOctet = '([0-9]|[1-9][0-9]|1[0-9]{0,2}|2[0-4][0-9]|25[0-5])';\n  const h16 = '([0-9A-Fa-f]{1,4})';\n  const ipv4Address = `(${decOctet}\\\\.){3}${decOctet}`;\n  const ls32 = `(${h16}:${h16}|${ipv4Address})`;\n  const ipv6Address = [`(${h16}:){6}${ls32}`, `(::${h16}:){5}${ls32}`, `${h16}?::(${h16}:){4}${ls32}`, `(${h16}:)?${h16}?::(${h16}:){3}${ls32}`, `(${h16}:){0,2}${h16}?::(${h16}:){2}${ls32}`, `(${h16}:){0,3}${h16}?::${h16}:${ls32}`, `(${h16}:){0,4}${h16}?::${ls32}`, `(${h16}:){0,5}${h16}?::${h16}`, `(${h16}:){0,6}${h16}?::`].join('|');\n  return new RegExp(ipv6Address).test(input);\n}\n/**\n * Check if a host is a valid IPv4 address.\n * @private\n * @param {string} input - host\n * @returns {Boolean}\n */\n\n\nfunction isIPv4(input) {\n  if (!input) {\n    return false;\n  }\n\n  const decOctet = '([0-9]|[1-9][0-9]|1[0-9]{0,2}|2[0-4][0-9]|25[0-5])';\n  const ipv4Address = `^(${decOctet}\\\\.){3}${decOctet}$`;\n  return new RegExp(ipv4Address).test(input);\n}\n/**\n * Check if a host is a valid common name (RFC 3896 `reg-name`).\n * @private\n * @param {string} input - host\n * @returns {Boolean}\n */\n\n\nfunction isCommonName(input) {\n  if (!input) {\n    return false;\n  } // eslint-disable-next-line prefer-regex-literals\n\n\n  return new RegExp('^[a-zA-Z0-9-._~!$&\\'()*+,;=]+$').test(input);\n}\n/**\n * Check if a host is a valid local file path.\n * @private\n * @param {string} input - local file path\n * @returns {Boolean}\n */\n\n\nfunction isLocalFile(input) {\n  if (!input) {\n    return false;\n  } // eslint-disable-next-line prefer-regex-literals\n\n\n  return new RegExp('^.{0,2}/[a-zA-Z0-9-._~!$&\\'()*+,;=]+').test(input);\n}","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/Util/URIParser/parsePlainAddress.js"],"names":["errors","require","module","exports","parse","input","hostMatch","decodeURIComponent","trim","match","portMatch","isValid","isLocalFile","isIPv6","isIPv4","isCommonName","Error","MESSAGES","ER_DEVAPI_BAD_CONNECTION_STRING_HOST","socket","host","address","portNum","parseInt","port","isNaN","decOctet","h16","ipv4Address","ls32","ipv6Address","join","RegExp","test"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst errors = require('../../../constants/errors');\n\nmodule.exports = parse;\n\n/**\n * Parse a single address without an explicit priority.\n * @private\n * @param {string} input - formatted address string\n * @throws {Error} When the host is not valid.\n * @returns {Address} Object containing the address details.\n * @example\n * const ipv6Address = '[::1]:33060'\n * const ipv4Address = '127.0.0.1:33060'\n * const cnAddress = 'localhost:33060'\n */\nfunction parse (input) {\n    // hostMatch will always contain something\n    const hostMatch = decodeURIComponent(input).trim().match(/\\(?([./][^)]+)\\)?|\\[(.+)\\]|([^:]+)/);\n    const portMatch = decodeURIComponent(input).trim().match(/:([^[\\]]+)$/) || [];\n\n    const isValid = isLocalFile(hostMatch[1]) ||\n        isIPv6(hostMatch[2]) ||\n        isIPv4(hostMatch[3]) ||\n        isCommonName(hostMatch[3]);\n\n    if (!isValid) {\n        throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_CONNECTION_STRING_HOST);\n    }\n\n    const socket = hostMatch[1];\n\n    // hostMatch[1] should contain an IPv6 address match\n    // hostMatch[2] should contain a non-IPv6 address match\n    const host = hostMatch[2] || hostMatch[3];\n\n    const address = { host, socket };\n    const portNum = parseInt(portMatch[1], 10);\n    address.port = !isNaN(portNum) ? portNum : portMatch[1];\n\n    return address;\n}\n\n/**\n * Check if a host is a valid IPv6 address.\n * @private\n * @param {string} input - host\n * @returns {Boolean}\n */\nfunction isIPv6 (input) {\n    if (!input) {\n        return false;\n    }\n\n    const decOctet = '([0-9]|[1-9][0-9]|1[0-9]{0,2}|2[0-4][0-9]|25[0-5])';\n    const h16 = '([0-9A-Fa-f]{1,4})';\n    const ipv4Address = `(${decOctet}\\\\.){3}${decOctet}`;\n    const ls32 = `(${h16}:${h16}|${ipv4Address})`;\n    const ipv6Address = [\n        `(${h16}:){6}${ls32}`,\n        `(::${h16}:){5}${ls32}`,\n        `${h16}?::(${h16}:){4}${ls32}`,\n        `(${h16}:)?${h16}?::(${h16}:){3}${ls32}`,\n        `(${h16}:){0,2}${h16}?::(${h16}:){2}${ls32}`,\n        `(${h16}:){0,3}${h16}?::${h16}:${ls32}`,\n        `(${h16}:){0,4}${h16}?::${ls32}`,\n        `(${h16}:){0,5}${h16}?::${h16}`,\n        `(${h16}:){0,6}${h16}?::`\n    ].join('|');\n\n    return (new RegExp(ipv6Address)).test(input);\n}\n\n/**\n * Check if a host is a valid IPv4 address.\n * @private\n * @param {string} input - host\n * @returns {Boolean}\n */\nfunction isIPv4 (input) {\n    if (!input) {\n        return false;\n    }\n\n    const decOctet = '([0-9]|[1-9][0-9]|1[0-9]{0,2}|2[0-4][0-9]|25[0-5])';\n    const ipv4Address = `^(${decOctet}\\\\.){3}${decOctet}$`;\n\n    return (new RegExp(ipv4Address)).test(input);\n}\n\n/**\n * Check if a host is a valid common name (RFC 3896 `reg-name`).\n * @private\n * @param {string} input - host\n * @returns {Boolean}\n */\nfunction isCommonName (input) {\n    if (!input) {\n        return false;\n    }\n\n    // eslint-disable-next-line prefer-regex-literals\n    return (new RegExp('^[a-zA-Z0-9-._~!$&\\'()*+,;=]+$')).test(input);\n}\n\n/**\n * Check if a host is a valid local file path.\n * @private\n * @param {string} input - local file path\n * @returns {Boolean}\n */\nfunction isLocalFile (input) {\n    if (!input) {\n        return false;\n    }\n\n    // eslint-disable-next-line prefer-regex-literals\n    return (new RegExp('^.{0,2}/[a-zA-Z0-9-._~!$&\\'()*+,;=]+')).test(input);\n}\n"]},"metadata":{},"sourceType":"script"}