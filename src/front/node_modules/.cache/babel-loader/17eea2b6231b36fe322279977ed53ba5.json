{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst CollectionStub = require('../../../Stubs/mysqlx_crud_pb').Collection;\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Collection\n * @param {proto.Mysqlx.Crud.Collection} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Collection}\n */\n\n\nfunction Collection(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Crud.Collection#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return proto.toObject();\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Collection instance given its name and schema.\n * @param {string} name - table name\n * @param {module:Schema} schema\n * @returns {module:adapters.Mysqlx.Crud.Collection}\n */\n\n\nCollection.create = function (name, schema) {\n  const proto = new CollectionStub();\n  proto.setName(name);\n  proto.setSchema(schema.getName());\n  return Collection(proto);\n};\n\nmodule.exports = Collection;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Crud/Collection.js"],"names":["CollectionStub","require","Collection","wraps","proto","Object","assign","toJSON","toObject","create","name","schema","setName","setSchema","getName","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,+BAAD,CAAP,CAAyCC,UAAhE;;AACA,MAAMC,KAAK,GAAGF,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAqBE,KAArB,EAA4B;AACxB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAK,CAACC,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAOH,KAAK,CAACI,QAAN,EAAP;AACH;;AATkC,GAAhC,CAAP;AAWH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAN,UAAU,CAACO,MAAX,GAAoB,UAAUC,IAAV,EAAgBC,MAAhB,EAAwB;AACxC,QAAMP,KAAK,GAAG,IAAIJ,cAAJ,EAAd;AACAI,EAAAA,KAAK,CAACQ,OAAN,CAAcF,IAAd;AACAN,EAAAA,KAAK,CAACS,SAAN,CAAgBF,MAAM,CAACG,OAAP,EAAhB;AAEA,SAAOZ,UAAU,CAACE,KAAD,CAAjB;AACH,CAND;;AAQAW,MAAM,CAACC,OAAP,GAAiBd,UAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst CollectionStub = require('../../../Stubs/mysqlx_crud_pb').Collection;\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Collection\n * @param {proto.Mysqlx.Crud.Collection} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Collection}\n */\nfunction Collection (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Crud.Collection#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return proto.toObject();\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Collection instance given its name and schema.\n * @param {string} name - table name\n * @param {module:Schema} schema\n * @returns {module:adapters.Mysqlx.Crud.Collection}\n */\nCollection.create = function (name, schema) {\n    const proto = new CollectionStub();\n    proto.setName(name);\n    proto.setSchema(schema.getName());\n\n    return Collection(proto);\n};\n\nmodule.exports = Collection;\n"]},"metadata":{},"sourceType":"script"}