{"ast":null,"code":"/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst binding = require('./Binding');\n\nconst errors = require('../constants/errors');\n\nconst limiting = require('./Limiting');\n\nconst preparing = require('./Preparing');\n\nconst query = require('./Query');\n\nconst result = require('./Result');\n\nconst tableOrdering = require('./TableOrdering');\n\nconst type = require('../Protocol/Stubs/mysqlx_prepare_pb').Prepare.OneOfMessage.Type.UPDATE;\n\nconst updating = require('./Updating');\n\nconst category = query.Type.TABLE;\n/**\n * TableUpdate factory.\n * @module TableUpdate\n * @mixes Binding\n * @mixes Limiting\n * @mixes Query\n * @mixes TableOrdering\n * @mixes Updating\n */\n\n/**\n * @private\n * @alias module:TableUpdate\n * @param {Connection} connection - database connection context\n * @param {module:Schema} schema - schema to bind\n * @param {string} tableName - table name\n * @param {string} criteria - criteria expression\n * @returns {module:TableUpdate}\n */\n\nfunction TableUpdate(connection, schema, tableName, criteria) {\n  const state = {\n    category,\n    criteria: criteria || '',\n    preparable: preparing({\n      connection\n    }),\n    schema,\n    tableName,\n    type\n  };\n  const base = Object.assign({}, binding(state), limiting(state), query(state), tableOrdering(state), updating());\n  state.preparable = Object.assign({}, base, state.preparable);\n  return Object.assign({}, base, {\n    /**\n     * Execute update query.\n     * @function\n     * @name module:TableUpdate#execute\n     * @return {Promise.<module:Result>}\n     */\n    execute() {\n      const criteria = this.getCriteria().trim(); // An explicit criteria needs to be provided. This is to avoid\n      // updating all documents in a collection by mistake.\n\n      if (!criteria.length) {\n        return Promise.reject(new Error(errors.MESSAGES.ER_DEVAPI_MISSING_TABLE_CRITERIA));\n      } // Before trying to send any message to the server, we need to\n      // check if the connection is open (has a client instance) or if\n      // it became idle in the meantime.\n\n\n      if (!connection.isOpen() || connection.isIdle()) {\n        // There is always a default error (ER_DEVAPI_CONNECTION_CLOSED).\n        return Promise.reject(connection.getError());\n      }\n\n      const fn = () => connection.getClient().crudModify(this);\n\n      return state.preparable.execute(fn).then(details => result(details));\n    },\n\n    /**\n     * Add a field to be updated with a new value.\n     * @function\n     * @name module:TableUpdate#set\n     * @param {string} field - field name\n     * @param {string} expr - value expression\n     * @returns {module:TableUpdate} The query instance.\n     */\n    set(field, expr) {\n      state.preparable.forceRestart();\n      const operations = this.getOperations().concat({\n        type: updating.Operation.SET,\n        source: field,\n        value: expr\n      });\n      return this.setOperations(operations);\n    }\n\n  });\n}\n\nmodule.exports = TableUpdate;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/TableUpdate.js"],"names":["binding","require","errors","limiting","preparing","query","result","tableOrdering","type","Prepare","OneOfMessage","Type","UPDATE","updating","category","TABLE","TableUpdate","connection","schema","tableName","criteria","state","preparable","base","Object","assign","execute","getCriteria","trim","length","Promise","reject","Error","MESSAGES","ER_DEVAPI_MISSING_TABLE_CRITERIA","isOpen","isIdle","getError","fn","getClient","crudModify","then","details","set","field","expr","forceRestart","operations","getOperations","concat","Operation","SET","source","value","setOperations","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst binding = require('./Binding');\nconst errors = require('../constants/errors');\nconst limiting = require('./Limiting');\nconst preparing = require('./Preparing');\nconst query = require('./Query');\nconst result = require('./Result');\nconst tableOrdering = require('./TableOrdering');\nconst type = require('../Protocol/Stubs/mysqlx_prepare_pb').Prepare.OneOfMessage.Type.UPDATE;\nconst updating = require('./Updating');\n\nconst category = query.Type.TABLE;\n\n/**\n * TableUpdate factory.\n * @module TableUpdate\n * @mixes Binding\n * @mixes Limiting\n * @mixes Query\n * @mixes TableOrdering\n * @mixes Updating\n */\n\n/**\n * @private\n * @alias module:TableUpdate\n * @param {Connection} connection - database connection context\n * @param {module:Schema} schema - schema to bind\n * @param {string} tableName - table name\n * @param {string} criteria - criteria expression\n * @returns {module:TableUpdate}\n */\nfunction TableUpdate (connection, schema, tableName, criteria) {\n    const state = { category, criteria: criteria || '', preparable: preparing({ connection }), schema, tableName, type };\n    const base = Object.assign({}, binding(state), limiting(state), query(state), tableOrdering(state), updating());\n\n    state.preparable = Object.assign({}, base, state.preparable);\n\n    return Object.assign({}, base, {\n        /**\n         * Execute update query.\n         * @function\n         * @name module:TableUpdate#execute\n         * @return {Promise.<module:Result>}\n         */\n        execute () {\n            const criteria = this.getCriteria().trim();\n            // An explicit criteria needs to be provided. This is to avoid\n            // updating all documents in a collection by mistake.\n            if (!criteria.length) {\n                return Promise.reject(new Error(errors.MESSAGES.ER_DEVAPI_MISSING_TABLE_CRITERIA));\n            }\n\n            // Before trying to send any message to the server, we need to\n            // check if the connection is open (has a client instance) or if\n            // it became idle in the meantime.\n            if (!connection.isOpen() || connection.isIdle()) {\n                // There is always a default error (ER_DEVAPI_CONNECTION_CLOSED).\n                return Promise.reject(connection.getError());\n            }\n\n            const fn = () => connection.getClient().crudModify(this);\n\n            return state.preparable.execute(fn)\n                .then(details => result(details));\n        },\n\n        /**\n         * Add a field to be updated with a new value.\n         * @function\n         * @name module:TableUpdate#set\n         * @param {string} field - field name\n         * @param {string} expr - value expression\n         * @returns {module:TableUpdate} The query instance.\n         */\n        set (field, expr) {\n            state.preparable.forceRestart();\n\n            const operations = this.getOperations().concat({\n                type: updating.Operation.SET,\n                source: field,\n                value: expr\n            });\n\n            return this.setOperations(operations);\n        }\n    });\n}\n\nmodule.exports = TableUpdate;\n"]},"metadata":{},"sourceType":"script"}