{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst ColumnIdentifier = require('../../../../Protocol/Stubs/mysqlx_expr_pb').ColumnIdentifier;\n\nconst DocumentPathItem = require('../../../../Protocol/Stubs/mysqlx_expr_pb').DocumentPathItem;\n\nconst Pa = require('parsimmon');\n\nconst scopedDocumentField = options => r => {\n  return Pa.seq(Pa.string('$').map(data => {\n    options.scoped = true;\n    return data;\n  }), r.documentPath.atMost(1).map(data => data[0])).map(data => data[1]);\n};\n\nconst parser = options => r => Pa.alt(Pa.seq(r.fieldId.map(data => {\n  const pathItem = new DocumentPathItem();\n  pathItem.setType(DocumentPathItem.Type.MEMBER);\n  pathItem.setValue(data);\n  return pathItem;\n}), r.documentPath.atMost(1).map(data => data[0])).map(data => [data[0]].concat(data[1])), scopedDocumentField(options)(r)).map(data => {\n  const columnId = new ColumnIdentifier();\n  data.forEach(pathItem => {\n    columnId.addDocumentPath(pathItem);\n  });\n  return columnId;\n});\n\nmodule.exports = {\n  name: 'DOCUMENT_FIELD',\n  parser\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/ExprParser/lib/grammar/collectionOrTableExpressions/documentField.js"],"names":["ColumnIdentifier","require","DocumentPathItem","Pa","scopedDocumentField","options","r","seq","string","map","data","scoped","documentPath","atMost","parser","alt","fieldId","pathItem","setType","Type","MEMBER","setValue","concat","columnId","forEach","addDocumentPath","module","exports","name"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,2CAAD,CAAP,CAAqDD,gBAA9E;;AACA,MAAME,gBAAgB,GAAGD,OAAO,CAAC,2CAAD,CAAP,CAAqDC,gBAA9E;;AACA,MAAMC,EAAE,GAAGF,OAAO,CAAC,WAAD,CAAlB;;AAEA,MAAMG,mBAAmB,GAAGC,OAAO,IAAIC,CAAC,IAAI;AACxC,SAAOH,EAAE,CACJI,GADE,CAECJ,EAAE,CACGK,MADL,CACY,GADZ,EAEKC,GAFL,CAESC,IAAI,IAAI;AACTL,IAAAA,OAAO,CAACM,MAAR,GAAiB,IAAjB;AACA,WAAOD,IAAP;AACH,GALL,CAFD,EAQCJ,CAAC,CAACM,YAAF,CACKC,MADL,CACY,CADZ,EAEKJ,GAFL,CAESC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAFrB,CARD,EAYFD,GAZE,CAYEC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAZd,CAAP;AAaH,CAdD;;AAgBA,MAAMI,MAAM,GAAGT,OAAO,IAAIC,CAAC,IAAIH,EAAE,CAC5BY,GAD0B,CAEvBZ,EAAE,CACGI,GADL,CAEQD,CAAC,CAACU,OAAF,CAAUP,GAAV,CAAcC,IAAI,IAAI;AAClB,QAAMO,QAAQ,GAAG,IAAIf,gBAAJ,EAAjB;AAEAe,EAAAA,QAAQ,CAACC,OAAT,CAAiBhB,gBAAgB,CAACiB,IAAjB,CAAsBC,MAAvC;AACAH,EAAAA,QAAQ,CAACI,QAAT,CAAkBX,IAAlB;AAEA,SAAOO,QAAP;AACH,CAPD,CAFR,EAUQX,CAAC,CAACM,YAAF,CAAeC,MAAf,CAAsB,CAAtB,EAAyBJ,GAAzB,CAA6BC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAzC,CAVR,EAYKD,GAZL,CAYSC,IAAI,IAAI,CAACA,IAAI,CAAC,CAAD,CAAL,EAAUY,MAAV,CAAiBZ,IAAI,CAAC,CAAD,CAArB,CAZjB,CAFuB,EAevBN,mBAAmB,CAACC,OAAD,CAAnB,CAA6BC,CAA7B,CAfuB,EAiB1BG,GAjB0B,CAiBtBC,IAAI,IAAI;AACT,QAAMa,QAAQ,GAAG,IAAIvB,gBAAJ,EAAjB;AAEAU,EAAAA,IAAI,CAACc,OAAL,CAAaP,QAAQ,IAAI;AACrBM,IAAAA,QAAQ,CAACE,eAAT,CAAyBR,QAAzB;AACH,GAFD;AAIA,SAAOM,QAAP;AACH,CAzB0B,CAA/B;;AA2BAG,MAAM,CAACC,OAAP,GAAiB;AAAEC,EAAAA,IAAI,EAAE,gBAAR;AAA0Bd,EAAAA;AAA1B,CAAjB","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst ColumnIdentifier = require('../../../../Protocol/Stubs/mysqlx_expr_pb').ColumnIdentifier;\nconst DocumentPathItem = require('../../../../Protocol/Stubs/mysqlx_expr_pb').DocumentPathItem;\nconst Pa = require('parsimmon');\n\nconst scopedDocumentField = options => r => {\n    return Pa\n        .seq(\n            Pa\n                .string('$')\n                .map(data => {\n                    options.scoped = true;\n                    return data;\n                }),\n            r.documentPath\n                .atMost(1)\n                .map(data => data[0])\n        )\n        .map(data => data[1]);\n};\n\nconst parser = options => r => Pa\n    .alt(\n        Pa\n            .seq(\n                r.fieldId.map(data => {\n                    const pathItem = new DocumentPathItem();\n\n                    pathItem.setType(DocumentPathItem.Type.MEMBER);\n                    pathItem.setValue(data);\n\n                    return pathItem;\n                }),\n                r.documentPath.atMost(1).map(data => data[0])\n            )\n            .map(data => [data[0]].concat(data[1])),\n        scopedDocumentField(options)(r)\n    )\n    .map(data => {\n        const columnId = new ColumnIdentifier();\n\n        data.forEach(pathItem => {\n            columnId.addDocumentPath(pathItem);\n        });\n\n        return columnId;\n    });\n\nmodule.exports = { name: 'DOCUMENT_FIELD', parser };\n"]},"metadata":{},"sourceType":"script"}