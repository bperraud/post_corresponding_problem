{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n/**\n * Enum to identify update operation types.\n * @readonly\n * @private\n * @name UpdateOperation\n * @enum {number}\n */\n\nconst UpdateType = require('../Protocol/Stubs/mysqlx_crud_pb').UpdateOperation.UpdateType;\n/**\n * Operation object.\n * @private\n * @typedef {Object} Operation\n * @prop {number} type - operation type\n * @prop {string} source - column name\n * @prop {string} [value] - new value\n */\n\n/**\n * Updating mixin.\n * @mixin\n * @private\n * @alias Updating\n * @param {Object} state - updating properties\n * @returns {Updating} The operation instance.\n */\n\n\nfunction Updating(state) {\n  state = Object.assign({\n    operations: []\n  }, state);\n  return {\n    /**\n     * Retrieve the query update operations.\n     * @function\n     * @private\n     * @name Updating#getOperations\n     * @returns {Object[]} The list of operation objects.\n     */\n    getOperations() {\n      return state.operations;\n    },\n\n    /**\n     * Set the query update operations.\n     * @function\n     * @private\n     * @name Updating#setOperations\n     * @param {Object[]} criteria - list of operations\n     * @returns {Updating} The query instance.\n     */\n    setOperations(operations) {\n      state.operations = operations;\n      return this;\n    }\n\n  };\n}\n/**\n * Update operation types.\n * @type {UpdateType}\n * @const\n * @private\n */\n\n\nUpdating.Operation = UpdateType;\nmodule.exports = Updating;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/Updating.js"],"names":["UpdateType","require","UpdateOperation","Updating","state","Object","assign","operations","getOperations","setOperations","Operation","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,UAAU,GAAGC,OAAO,CAAC,kCAAD,CAAP,CAA4CC,eAA5C,CAA4DF,UAA/E;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,QAAT,CAAmBC,KAAnB,EAA0B;AACtBA,EAAAA,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,UAAU,EAAE;AAAd,GAAd,EAAkCH,KAAlC,CAAR;AAEA,SAAO;AACH;AACR;AACA;AACA;AACA;AACA;AACA;AACQI,IAAAA,aAAa,GAAI;AACb,aAAOJ,KAAK,CAACG,UAAb;AACH,KAVE;;AAYH;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQE,IAAAA,aAAa,CAAEF,UAAF,EAAc;AACvBH,MAAAA,KAAK,CAACG,UAAN,GAAmBA,UAAnB;AAEA,aAAO,IAAP;AACH;;AAxBE,GAAP;AA0BH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAJ,QAAQ,CAACO,SAAT,GAAqBV,UAArB;AAEAW,MAAM,CAACC,OAAP,GAAiBT,QAAjB","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\n/**\n * Enum to identify update operation types.\n * @readonly\n * @private\n * @name UpdateOperation\n * @enum {number}\n */\nconst UpdateType = require('../Protocol/Stubs/mysqlx_crud_pb').UpdateOperation.UpdateType;\n\n/**\n * Operation object.\n * @private\n * @typedef {Object} Operation\n * @prop {number} type - operation type\n * @prop {string} source - column name\n * @prop {string} [value] - new value\n */\n\n/**\n * Updating mixin.\n * @mixin\n * @private\n * @alias Updating\n * @param {Object} state - updating properties\n * @returns {Updating} The operation instance.\n */\nfunction Updating (state) {\n    state = Object.assign({ operations: [] }, state);\n\n    return {\n        /**\n         * Retrieve the query update operations.\n         * @function\n         * @private\n         * @name Updating#getOperations\n         * @returns {Object[]} The list of operation objects.\n         */\n        getOperations () {\n            return state.operations;\n        },\n\n        /**\n         * Set the query update operations.\n         * @function\n         * @private\n         * @name Updating#setOperations\n         * @param {Object[]} criteria - list of operations\n         * @returns {Updating} The query instance.\n         */\n        setOperations (operations) {\n            state.operations = operations;\n\n            return this;\n        }\n    };\n}\n\n/**\n * Update operation types.\n * @type {UpdateType}\n * @const\n * @private\n */\nUpdating.Operation = UpdateType;\n\nmodule.exports = Updating;\n"]},"metadata":{},"sourceType":"script"}