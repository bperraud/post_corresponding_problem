{"ast":null,"code":"/*\n * Copyright (c) 2018, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst baseResult = require('./BaseResult');\n/**\n * API for Document Store retrieval operations.\n * @module DocResult\n * @mixes module:BaseResult\n */\n\n/**\n * @alias module:DocResult\n * @param {Object} state - result details\n * @returns {module:DocResult}\n */\n\n\nfunction DocResult(state) {\n  state = Object.assign({\n    results: []\n  }, state);\n  return Object.assign({}, baseResult(state), {\n    /**\n     * Consume the current result set from memory (and flush it).\n     * @function\n     * @name module:DocResult#fetchAll\n     * @example\n     * collection.find()\n     *   .execute()\n     *   .then(res => {\n     *     // get the list of documents in the result set\n     *     var docs = res.fetchAll()\n     *   })\n     * @returns {Array<Object>} A list of documents.\n     */\n    fetchAll() {\n      if (!state.results || !state.results.length) {\n        return [];\n      }\n\n      const rows = state.results.splice(0, 1)[0];\n\n      if (!rows || !rows.length) {\n        return [];\n      }\n\n      return rows.map(row => row.toArray()[0]);\n    },\n\n    /**\n     * Consume a single result set document from memory (and flush it).\n     * @function\n     * @name module:DocResult#fetchOne\n     * @example\n     * collection.find()\n     *   .execute()\n     *   .then(res => {\n     *     // iterate over the documents in the result set\n     *     while (var doc = res.fetchOne()) {\n     *       // do something with the current document\n     *     }\n     *   })\n     * @returns {Object} A document.\n     */\n    fetchOne() {\n      if (!state.results || !state.results.length) {\n        return;\n      }\n\n      const row = state.results[0].splice(0, 1)[0];\n\n      if (!row) {\n        return;\n      }\n\n      return row.toArray()[0];\n    },\n\n    /**\n     * Returns the result set (without flushing) as a JavaScript Arrray.\n     * @function\n     * @name module:DocResult#toArray\n     * @returns {Array}\n     */\n    toArray() {\n      if (!state.results || !state.results.length) {\n        return [];\n      }\n\n      return state.results[0].map(row => row.toArray()[0]);\n    }\n\n  });\n}\n\nmodule.exports = DocResult;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/DocResult.js"],"names":["baseResult","require","DocResult","state","Object","assign","results","fetchAll","length","rows","splice","map","row","toArray","fetchOne","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAoBC,KAApB,EAA2B;AACvBA,EAAAA,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAd,EAA+BH,KAA/B,CAAR;AAEA,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,UAAU,CAACG,KAAD,CAA5B,EAAqC;AACxC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQI,IAAAA,QAAQ,GAAI;AACR,UAAI,CAACJ,KAAK,CAACG,OAAP,IAAkB,CAACH,KAAK,CAACG,OAAN,CAAcE,MAArC,EAA6C;AACzC,eAAO,EAAP;AACH;;AAED,YAAMC,IAAI,GAAGN,KAAK,CAACG,OAAN,CAAcI,MAAd,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAAb;;AAEA,UAAI,CAACD,IAAD,IAAS,CAACA,IAAI,CAACD,MAAnB,EAA2B;AACvB,eAAO,EAAP;AACH;;AAED,aAAOC,IAAI,CAACE,GAAL,CAASC,GAAG,IAAIA,GAAG,CAACC,OAAJ,GAAc,CAAd,CAAhB,CAAP;AACH,KA1BuC;;AA4BxC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,QAAQ,GAAI;AACR,UAAI,CAACX,KAAK,CAACG,OAAP,IAAkB,CAACH,KAAK,CAACG,OAAN,CAAcE,MAArC,EAA6C;AACzC;AACH;;AAED,YAAMI,GAAG,GAAGT,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiBI,MAAjB,CAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAAZ;;AAEA,UAAI,CAACE,GAAL,EAAU;AACN;AACH;;AAED,aAAOA,GAAG,CAACC,OAAJ,GAAc,CAAd,CAAP;AACH,KAvDuC;;AAyDxC;AACR;AACA;AACA;AACA;AACA;AACQA,IAAAA,OAAO,GAAI;AACP,UAAI,CAACV,KAAK,CAACG,OAAP,IAAkB,CAACH,KAAK,CAACG,OAAN,CAAcE,MAArC,EAA6C;AACzC,eAAO,EAAP;AACH;;AAED,aAAOL,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiBK,GAAjB,CAAqBC,GAAG,IAAIA,GAAG,CAACC,OAAJ,GAAc,CAAd,CAA5B,CAAP;AACH;;AArEuC,GAArC,CAAP;AAuEH;;AAEDE,MAAM,CAACC,OAAP,GAAiBd,SAAjB","sourcesContent":["/*\n * Copyright (c) 2018, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst baseResult = require('./BaseResult');\n\n/**\n * API for Document Store retrieval operations.\n * @module DocResult\n * @mixes module:BaseResult\n */\n\n/**\n * @alias module:DocResult\n * @param {Object} state - result details\n * @returns {module:DocResult}\n */\nfunction DocResult (state) {\n    state = Object.assign({ results: [] }, state);\n\n    return Object.assign({}, baseResult(state), {\n        /**\n         * Consume the current result set from memory (and flush it).\n         * @function\n         * @name module:DocResult#fetchAll\n         * @example\n         * collection.find()\n         *   .execute()\n         *   .then(res => {\n         *     // get the list of documents in the result set\n         *     var docs = res.fetchAll()\n         *   })\n         * @returns {Array<Object>} A list of documents.\n         */\n        fetchAll () {\n            if (!state.results || !state.results.length) {\n                return [];\n            }\n\n            const rows = state.results.splice(0, 1)[0];\n\n            if (!rows || !rows.length) {\n                return [];\n            }\n\n            return rows.map(row => row.toArray()[0]);\n        },\n\n        /**\n         * Consume a single result set document from memory (and flush it).\n         * @function\n         * @name module:DocResult#fetchOne\n         * @example\n         * collection.find()\n         *   .execute()\n         *   .then(res => {\n         *     // iterate over the documents in the result set\n         *     while (var doc = res.fetchOne()) {\n         *       // do something with the current document\n         *     }\n         *   })\n         * @returns {Object} A document.\n         */\n        fetchOne () {\n            if (!state.results || !state.results.length) {\n                return;\n            }\n\n            const row = state.results[0].splice(0, 1)[0];\n\n            if (!row) {\n                return;\n            }\n\n            return row.toArray()[0];\n        },\n\n        /**\n         * Returns the result set (without flushing) as a JavaScript Arrray.\n         * @function\n         * @name module:DocResult#toArray\n         * @returns {Array}\n         */\n        toArray () {\n            if (!state.results || !state.results.length) {\n                return [];\n            }\n\n            return state.results[0].map(row => row.toArray()[0]);\n        }\n    });\n}\n\nmodule.exports = DocResult;\n"]},"metadata":{},"sourceType":"script"}