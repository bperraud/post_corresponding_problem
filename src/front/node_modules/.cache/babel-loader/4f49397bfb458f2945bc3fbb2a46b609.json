{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst Type = {\n  CLASSIC: 'sql',\n  X_PLUGIN: 'mysqlx'\n};\n/**\n * Statement mixin.\n * @mixin\n * @private\n * @alias Statement\n * @param {Object} state - Statement properties\n * @returns {Statement}\n */\n\nfunction Statement(state) {\n  state = Object.assign({\n    args: [],\n    namespace: Type.CLASSIC,\n    raw: '',\n    isFrozen: false\n  }, state);\n  return {\n    /**\n     * Assign one or more placeholder values.\n     * @function\n     * @name Statement#addArgs\n     * @param {Array.<*>} args - one or more arguments\n     * @returns {Statement} The query instance.\n     */\n    addArgs(args) {\n      // If the statement is frozen, it means it has already been\n      // executed, and any new placeholder values should replace\n      // the existing ones.\n      if (state.isFrozen) {\n        // Until the statement is executed, it needs to be defrosted.\n        state.isFrozen = false; // In this case, we want to replace the entire list of\n        // placeholder values.\n\n        state.args = [].concat(args);\n      } else {\n        // If the statement is not frozen, it means it has not been\n        // executed and we are still creating the list of placeholder\n        // values.\n        state.args = state.args.concat(args);\n      }\n\n      return this;\n    },\n\n    /**\n     * Prevent new placeholder values from being appended to the existing\n     * list and force the statement to re-create a new list instead.\n     * @function\n     * @name Statement#freeze\n     * @returns {Statement} The statement instance.\n     */\n    freeze() {\n      state.isFrozen = true;\n      return this;\n    },\n\n    /**\n     * Retrieve the list of placeholder assignment arguments.\n     * @function\n     * @private\n     * @name Statement#getArgs\n     * @returns {Array.<*>} The list of arguments.\n     */\n    getArgs() {\n      return state.args;\n    },\n\n    /**\n     * Retrieve the MySQL protocol namespace in which the statement will be executed.\n     * @function\n     * @private\n     * @name Statement#getNamespace\n     * @returns {Type} The MySQL protocol namespace enum value.\n     */\n    getNamespace() {\n      return state.namespace;\n    },\n\n    /**\n     * Retrieve the raw SQL statement string.\n     * @function\n     * @private\n     * @name Statement#getSQL\n     * @returns {string} The raw SQL statement.\n     */\n    getSQL() {\n      return state.raw;\n    },\n\n    /**\n     * Retrieve the session bound to the statement.\n     * @function\n     * @private\n     * @name Statement#getSession\n     * @returns {Session} The session instance.\n     */\n    getSession() {\n      return state.session;\n    }\n\n  };\n}\n/**\n * MySQL protocol namespace.\n * @type {Type}\n * @const\n * @private\n */\n\n\nStatement.Type = Type;\nmodule.exports = Statement;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/Statement.js"],"names":["Type","CLASSIC","X_PLUGIN","Statement","state","Object","assign","args","namespace","raw","isFrozen","addArgs","concat","freeze","getArgs","getNamespace","getSQL","getSession","session","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,IAAI,GAAG;AAAEC,EAAAA,OAAO,EAAE,KAAX;AAAkBC,EAAAA,QAAQ,EAAE;AAA5B,CAAb;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAoBC,KAApB,EAA2B;AACvBA,EAAAA,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,SAAS,EAAER,IAAI,CAACC,OAA5B;AAAqCQ,IAAAA,GAAG,EAAE,EAA1C;AAA8CC,IAAAA,QAAQ,EAAE;AAAxD,GAAd,EAA+EN,KAA/E,CAAR;AAEA,SAAO;AACH;AACR;AACA;AACA;AACA;AACA;AACA;AACQO,IAAAA,OAAO,CAAEJ,IAAF,EAAQ;AACX;AACA;AACA;AACA,UAAIH,KAAK,CAACM,QAAV,EAAoB;AAChB;AACAN,QAAAA,KAAK,CAACM,QAAN,GAAiB,KAAjB,CAFgB,CAGhB;AACA;;AACAN,QAAAA,KAAK,CAACG,IAAN,GAAa,GAAGK,MAAH,CAAUL,IAAV,CAAb;AACH,OAND,MAMO;AACH;AACA;AACA;AACAH,QAAAA,KAAK,CAACG,IAAN,GAAaH,KAAK,CAACG,IAAN,CAAWK,MAAX,CAAkBL,IAAlB,CAAb;AACH;;AAED,aAAO,IAAP;AACH,KA1BE;;AA4BH;AACR;AACA;AACA;AACA;AACA;AACA;AACQM,IAAAA,MAAM,GAAI;AACNT,MAAAA,KAAK,CAACM,QAAN,GAAiB,IAAjB;AAEA,aAAO,IAAP;AACH,KAvCE;;AAyCH;AACR;AACA;AACA;AACA;AACA;AACA;AACQI,IAAAA,OAAO,GAAI;AACP,aAAOV,KAAK,CAACG,IAAb;AACH,KAlDE;;AAoDH;AACR;AACA;AACA;AACA;AACA;AACA;AACQQ,IAAAA,YAAY,GAAI;AACZ,aAAOX,KAAK,CAACI,SAAb;AACH,KA7DE;;AA+DH;AACR;AACA;AACA;AACA;AACA;AACA;AACQQ,IAAAA,MAAM,GAAI;AACN,aAAOZ,KAAK,CAACK,GAAb;AACH,KAxEE;;AA0EH;AACR;AACA;AACA;AACA;AACA;AACA;AACQQ,IAAAA,UAAU,GAAI;AACV,aAAOb,KAAK,CAACc,OAAb;AACH;;AAnFE,GAAP;AAqFH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAf,SAAS,CAACH,IAAV,GAAiBA,IAAjB;AAEAmB,MAAM,CAACC,OAAP,GAAiBjB,SAAjB","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst Type = { CLASSIC: 'sql', X_PLUGIN: 'mysqlx' };\n\n/**\n * Statement mixin.\n * @mixin\n * @private\n * @alias Statement\n * @param {Object} state - Statement properties\n * @returns {Statement}\n */\nfunction Statement (state) {\n    state = Object.assign({ args: [], namespace: Type.CLASSIC, raw: '', isFrozen: false }, state);\n\n    return {\n        /**\n         * Assign one or more placeholder values.\n         * @function\n         * @name Statement#addArgs\n         * @param {Array.<*>} args - one or more arguments\n         * @returns {Statement} The query instance.\n         */\n        addArgs (args) {\n            // If the statement is frozen, it means it has already been\n            // executed, and any new placeholder values should replace\n            // the existing ones.\n            if (state.isFrozen) {\n                // Until the statement is executed, it needs to be defrosted.\n                state.isFrozen = false;\n                // In this case, we want to replace the entire list of\n                // placeholder values.\n                state.args = [].concat(args);\n            } else {\n                // If the statement is not frozen, it means it has not been\n                // executed and we are still creating the list of placeholder\n                // values.\n                state.args = state.args.concat(args);\n            }\n\n            return this;\n        },\n\n        /**\n         * Prevent new placeholder values from being appended to the existing\n         * list and force the statement to re-create a new list instead.\n         * @function\n         * @name Statement#freeze\n         * @returns {Statement} The statement instance.\n         */\n        freeze () {\n            state.isFrozen = true;\n\n            return this;\n        },\n\n        /**\n         * Retrieve the list of placeholder assignment arguments.\n         * @function\n         * @private\n         * @name Statement#getArgs\n         * @returns {Array.<*>} The list of arguments.\n         */\n        getArgs () {\n            return state.args;\n        },\n\n        /**\n         * Retrieve the MySQL protocol namespace in which the statement will be executed.\n         * @function\n         * @private\n         * @name Statement#getNamespace\n         * @returns {Type} The MySQL protocol namespace enum value.\n         */\n        getNamespace () {\n            return state.namespace;\n        },\n\n        /**\n         * Retrieve the raw SQL statement string.\n         * @function\n         * @private\n         * @name Statement#getSQL\n         * @returns {string} The raw SQL statement.\n         */\n        getSQL () {\n            return state.raw;\n        },\n\n        /**\n         * Retrieve the session bound to the statement.\n         * @function\n         * @private\n         * @name Statement#getSession\n         * @returns {Session} The session instance.\n         */\n        getSession () {\n            return state.session;\n        }\n    };\n}\n\n/**\n * MySQL protocol namespace.\n * @type {Type}\n * @const\n * @private\n */\nStatement.Type = Type;\n\nmodule.exports = Statement;\n"]},"metadata":{},"sourceType":"script"}