{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst ExecuteStub = require('../../../Stubs/mysqlx_prepare_pb').Execute;\n\nconst any = require('../Datatypes/Any');\n\nconst expr = require('../Expr/Expr');\n\nconst list = require('../../Traits/List');\n\nconst serializable = require('../../Traits/Serializable');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Prepare.Execute\n * @param {proto.Mysqlx.Prepare.Execute} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Prepare.Execute}\n */\n\n\nfunction Execute(proto) {\n  return Object.assign({}, serializable(proto), wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Prepare.Execute#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        stmt_id: proto.getStmtId(),\n        args: list(proto.getArgsList().map(arg => any(arg))).toJSON()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Prepare.Execute instance for a given statement.\n * @param {Preparing} statement\n * @param {Object} [options] - extended options\n * @returns {module:adapters.Mysqlx.Prepare.Execute}\n */\n\n\nExecute.create = function (statement, options) {\n  options = Object.assign({}, options, {\n    toParse: true\n  });\n  const proto = new ExecuteStub();\n  const args = expr.create(statement.getCriteria(), options).getPlaceholderArgs(statement.getBindings()).map(arg => any.create(arg).valueOf());\n\n  if (typeof statement.getCount === 'function' && typeof statement.getCount() !== 'undefined') {\n    args.push(any.create(statement.getCount()).valueOf()); // an offset is only supported with a corresponding count\n\n    if (typeof statement.getOffset === 'function' && typeof statement.getOffset() !== 'undefined') {\n      args.push(any.create(statement.getOffset()).valueOf());\n    }\n  }\n\n  proto.setStmtId(statement.getStatementId());\n  proto.setArgsList(args);\n  return Execute(proto);\n};\n\nmodule.exports = Execute;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Prepare/Execute.js"],"names":["ExecuteStub","require","Execute","any","expr","list","serializable","wraps","proto","Object","assign","toJSON","stmt_id","getStmtId","args","getArgsList","map","arg","create","statement","options","toParse","getCriteria","getPlaceholderArgs","getBindings","valueOf","getCount","push","getOffset","setStmtId","getStatementId","setArgsList","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,kCAAD,CAAP,CAA4CC,OAAhE;;AACA,MAAMC,GAAG,GAAGF,OAAO,CAAC,kBAAD,CAAnB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,cAAD,CAApB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,mBAAD,CAApB;;AACA,MAAMK,YAAY,GAAGL,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAMM,KAAK,GAAGN,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAkBM,KAAlB,EAAyB;AACrB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,YAAY,CAACE,KAAD,CAA9B,EAAuCD,KAAK,CAACC,KAAD,CAA5C,EAAqD;AACxD;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAO;AACHC,QAAAA,OAAO,EAAEJ,KAAK,CAACK,SAAN,EADN;AAEHC,QAAAA,IAAI,EAAET,IAAI,CAACG,KAAK,CAACO,WAAN,GAAoBC,GAApB,CAAwBC,GAAG,IAAId,GAAG,CAACc,GAAD,CAAlC,CAAD,CAAJ,CAA+CN,MAA/C;AAFH,OAAP;AAIH;;AAZuD,GAArD,CAAP;AAcH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAT,OAAO,CAACgB,MAAR,GAAiB,UAAUC,SAAV,EAAqBC,OAArB,EAA8B;AAC3CA,EAAAA,OAAO,GAAGX,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBU,OAAlB,EAA2B;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAA3B,CAAV;AAEA,QAAMb,KAAK,GAAG,IAAIR,WAAJ,EAAd;AACA,QAAMc,IAAI,GAAGV,IAAI,CAACc,MAAL,CAAYC,SAAS,CAACG,WAAV,EAAZ,EAAqCF,OAArC,EACRG,kBADQ,CACWJ,SAAS,CAACK,WAAV,EADX,EAERR,GAFQ,CAEJC,GAAG,IAAId,GAAG,CAACe,MAAJ,CAAWD,GAAX,EAAgBQ,OAAhB,EAFH,CAAb;;AAIA,MAAI,OAAON,SAAS,CAACO,QAAjB,KAA8B,UAA9B,IAA4C,OAAOP,SAAS,CAACO,QAAV,EAAP,KAAgC,WAAhF,EAA6F;AACzFZ,IAAAA,IAAI,CAACa,IAAL,CAAUxB,GAAG,CAACe,MAAJ,CAAWC,SAAS,CAACO,QAAV,EAAX,EAAiCD,OAAjC,EAAV,EADyF,CAGzF;;AACA,QAAI,OAAON,SAAS,CAACS,SAAjB,KAA+B,UAA/B,IAA6C,OAAOT,SAAS,CAACS,SAAV,EAAP,KAAiC,WAAlF,EAA+F;AAC3Fd,MAAAA,IAAI,CAACa,IAAL,CAAUxB,GAAG,CAACe,MAAJ,CAAWC,SAAS,CAACS,SAAV,EAAX,EAAkCH,OAAlC,EAAV;AACH;AACJ;;AAEDjB,EAAAA,KAAK,CAACqB,SAAN,CAAgBV,SAAS,CAACW,cAAV,EAAhB;AACAtB,EAAAA,KAAK,CAACuB,WAAN,CAAkBjB,IAAlB;AAEA,SAAOZ,OAAO,CAACM,KAAD,CAAd;AACH,CArBD;;AAuBAwB,MAAM,CAACC,OAAP,GAAiB/B,OAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst ExecuteStub = require('../../../Stubs/mysqlx_prepare_pb').Execute;\nconst any = require('../Datatypes/Any');\nconst expr = require('../Expr/Expr');\nconst list = require('../../Traits/List');\nconst serializable = require('../../Traits/Serializable');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Prepare.Execute\n * @param {proto.Mysqlx.Prepare.Execute} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Prepare.Execute}\n */\nfunction Execute (proto) {\n    return Object.assign({}, serializable(proto), wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Prepare.Execute#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                stmt_id: proto.getStmtId(),\n                args: list(proto.getArgsList().map(arg => any(arg))).toJSON()\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Prepare.Execute instance for a given statement.\n * @param {Preparing} statement\n * @param {Object} [options] - extended options\n * @returns {module:adapters.Mysqlx.Prepare.Execute}\n */\nExecute.create = function (statement, options) {\n    options = Object.assign({}, options, { toParse: true });\n\n    const proto = new ExecuteStub();\n    const args = expr.create(statement.getCriteria(), options)\n        .getPlaceholderArgs(statement.getBindings())\n        .map(arg => any.create(arg).valueOf());\n\n    if (typeof statement.getCount === 'function' && typeof statement.getCount() !== 'undefined') {\n        args.push(any.create(statement.getCount()).valueOf());\n\n        // an offset is only supported with a corresponding count\n        if (typeof statement.getOffset === 'function' && typeof statement.getOffset() !== 'undefined') {\n            args.push(any.create(statement.getOffset()).valueOf());\n        }\n    }\n\n    proto.setStmtId(statement.getStatementId());\n    proto.setArgsList(args);\n\n    return Execute(proto);\n};\n\nmodule.exports = Execute;\n"]},"metadata":{},"sourceType":"script"}