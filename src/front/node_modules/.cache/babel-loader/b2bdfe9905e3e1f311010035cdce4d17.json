{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst DocumentPathItemStub = require('../../../Stubs/mysqlx_expr_pb').DocumentPathItem;\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Expr.DocumentPathItem\n * @param {proto.Mysqlx.Expr.DocumentPathItem} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Expr.DocumentPathItem}\n */\n\n\nfunction DocumentPathItem(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Retrieve the item type name.\n     * @function\n     * @name module:adapters.Mysqlx.Expr.DocumentPathItem#getType\n     * @returns {string}\n     */\n    getType() {\n      return Object.keys(DocumentPathItemStub.Type).filter(k => DocumentPathItemStub.Type[k] === proto.getType())[0];\n    },\n\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Expr.DocumentPathItem#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return Object.assign({}, proto.toObject(), {\n        type: this.getType()\n      });\n    }\n\n  });\n}\n\nmodule.exports = DocumentPathItem;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Expr/DocumentPathItem.js"],"names":["DocumentPathItemStub","require","DocumentPathItem","wraps","proto","Object","assign","getType","keys","Type","filter","k","toJSON","toObject","type","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,+BAAD,CAAP,CAAyCC,gBAAtE;;AACA,MAAMC,KAAK,GAAGF,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,CAA2BE,KAA3B,EAAkC;AAC9B,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAK,CAACC,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,OAAO,GAAI;AACP,aAAOF,MAAM,CAACG,IAAP,CAAYR,oBAAoB,CAACS,IAAjC,EACFC,MADE,CACKC,CAAC,IAAIX,oBAAoB,CAACS,IAArB,CAA0BE,CAA1B,MAAiCP,KAAK,CAACG,OAAN,EAD3C,EAC4D,CAD5D,CAAP;AAEH,KAVkC;;AAYnC;AACR;AACA;AACA;AACA;AACA;AACQK,IAAAA,MAAM,GAAI;AACN,aAAOP,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,KAAK,CAACS,QAAN,EAAlB,EAAoC;AAAEC,QAAAA,IAAI,EAAE,KAAKP,OAAL;AAAR,OAApC,CAAP;AACH;;AApBkC,GAAhC,CAAP;AAsBH;;AAEDQ,MAAM,CAACC,OAAP,GAAiBd,gBAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst DocumentPathItemStub = require('../../../Stubs/mysqlx_expr_pb').DocumentPathItem;\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Expr.DocumentPathItem\n * @param {proto.Mysqlx.Expr.DocumentPathItem} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Expr.DocumentPathItem}\n */\nfunction DocumentPathItem (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Retrieve the item type name.\n         * @function\n         * @name module:adapters.Mysqlx.Expr.DocumentPathItem#getType\n         * @returns {string}\n         */\n        getType () {\n            return Object.keys(DocumentPathItemStub.Type)\n                .filter(k => DocumentPathItemStub.Type[k] === proto.getType())[0];\n        },\n\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Expr.DocumentPathItem#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return Object.assign({}, proto.toObject(), { type: this.getType() });\n        }\n    });\n}\n\nmodule.exports = DocumentPathItem;\n"]},"metadata":{},"sourceType":"script"}