{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst DocumentPathItem = require('../../../../Protocol/Stubs/mysqlx_expr_pb').DocumentPathItem;\n\nconst Pa = require('parsimmon');\n\nconst parser = options => r => Pa.alt(Pa.string('[*]').map(data => {\n  const dpi = new DocumentPathItem();\n  dpi.setType(DocumentPathItem.Type.ARRAY_INDEX_ASTERISK);\n  return dpi;\n}), Pa.seq(Pa.string('['), r.INT.map(v => parseInt(v, 10)), Pa.string(']')).map(data => {\n  const dpi = new DocumentPathItem();\n  dpi.setType(DocumentPathItem.Type.ARRAY_INDEX);\n  dpi.setIndex(data[1]);\n  return dpi;\n}), Pa.string('.*').map(data => {\n  const dpi = new DocumentPathItem();\n  dpi.setType(DocumentPathItem.MEMBER_ASTERISK);\n  return dpi;\n}), Pa.seq(Pa.string('.'), r.documentPathMember).map(data => {\n  const pathItem = new DocumentPathItem();\n  pathItem.setType(DocumentPathItem.Type.MEMBER);\n  pathItem.setValue(data[1]);\n  return pathItem;\n}));\n\nmodule.exports = {\n  name: 'DOCUMENT_PATH_LAST_ITEM',\n  parser\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/ExprParser/lib/grammar/collectionOrTableExpressions/documentPathLastItem.js"],"names":["DocumentPathItem","require","Pa","parser","options","r","alt","string","map","data","dpi","setType","Type","ARRAY_INDEX_ASTERISK","seq","INT","v","parseInt","ARRAY_INDEX","setIndex","MEMBER_ASTERISK","documentPathMember","pathItem","MEMBER","setValue","module","exports","name"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,2CAAD,CAAP,CAAqDD,gBAA9E;;AACA,MAAME,EAAE,GAAGD,OAAO,CAAC,WAAD,CAAlB;;AAEA,MAAME,MAAM,GAAGC,OAAO,IAAIC,CAAC,IAAIH,EAAE,CAC5BI,GAD0B,CAEvBJ,EAAE,CACGK,MADL,CACY,KADZ,EAEKC,GAFL,CAESC,IAAI,IAAI;AACT,QAAMC,GAAG,GAAG,IAAIV,gBAAJ,EAAZ;AAEAU,EAAAA,GAAG,CAACC,OAAJ,CAAYX,gBAAgB,CAACY,IAAjB,CAAsBC,oBAAlC;AAEA,SAAOH,GAAP;AACH,CARL,CAFuB,EAWvBR,EAAE,CACGY,GADL,CACSZ,EAAE,CAACK,MAAH,CAAU,GAAV,CADT,EACyBF,CAAC,CAACU,GAAF,CAAMP,GAAN,CAAUQ,CAAC,IAAIC,QAAQ,CAACD,CAAD,EAAI,EAAJ,CAAvB,CADzB,EAC0Dd,EAAE,CAACK,MAAH,CAAU,GAAV,CAD1D,EAEKC,GAFL,CAESC,IAAI,IAAI;AACT,QAAMC,GAAG,GAAG,IAAIV,gBAAJ,EAAZ;AAEAU,EAAAA,GAAG,CAACC,OAAJ,CAAYX,gBAAgB,CAACY,IAAjB,CAAsBM,WAAlC;AACAR,EAAAA,GAAG,CAACS,QAAJ,CAAaV,IAAI,CAAC,CAAD,CAAjB;AAEA,SAAOC,GAAP;AACH,CATL,CAXuB,EAqBvBR,EAAE,CACGK,MADL,CACY,IADZ,EAEKC,GAFL,CAESC,IAAI,IAAI;AACT,QAAMC,GAAG,GAAG,IAAIV,gBAAJ,EAAZ;AAEAU,EAAAA,GAAG,CAACC,OAAJ,CAAYX,gBAAgB,CAACoB,eAA7B;AAEA,SAAOV,GAAP;AACH,CARL,CArBuB,EA8BvBR,EAAE,CACGY,GADL,CACSZ,EAAE,CAACK,MAAH,CAAU,GAAV,CADT,EACyBF,CAAC,CAACgB,kBAD3B,EAEKb,GAFL,CAESC,IAAI,IAAI;AACT,QAAMa,QAAQ,GAAG,IAAItB,gBAAJ,EAAjB;AAEAsB,EAAAA,QAAQ,CAACX,OAAT,CAAiBX,gBAAgB,CAACY,IAAjB,CAAsBW,MAAvC;AACAD,EAAAA,QAAQ,CAACE,QAAT,CAAkBf,IAAI,CAAC,CAAD,CAAtB;AAEA,SAAOa,QAAP;AACH,CATL,CA9BuB,CAA/B;;AA0CAG,MAAM,CAACC,OAAP,GAAiB;AAAEC,EAAAA,IAAI,EAAE,yBAAR;AAAmCxB,EAAAA;AAAnC,CAAjB","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst DocumentPathItem = require('../../../../Protocol/Stubs/mysqlx_expr_pb').DocumentPathItem;\nconst Pa = require('parsimmon');\n\nconst parser = options => r => Pa\n    .alt(\n        Pa\n            .string('[*]')\n            .map(data => {\n                const dpi = new DocumentPathItem();\n\n                dpi.setType(DocumentPathItem.Type.ARRAY_INDEX_ASTERISK);\n\n                return dpi;\n            }),\n        Pa\n            .seq(Pa.string('['), r.INT.map(v => parseInt(v, 10)), Pa.string(']'))\n            .map(data => {\n                const dpi = new DocumentPathItem();\n\n                dpi.setType(DocumentPathItem.Type.ARRAY_INDEX);\n                dpi.setIndex(data[1]);\n\n                return dpi;\n            }),\n        Pa\n            .string('.*')\n            .map(data => {\n                const dpi = new DocumentPathItem();\n\n                dpi.setType(DocumentPathItem.MEMBER_ASTERISK);\n\n                return dpi;\n            }),\n        Pa\n            .seq(Pa.string('.'), r.documentPathMember)\n            .map(data => {\n                const pathItem = new DocumentPathItem();\n\n                pathItem.setType(DocumentPathItem.Type.MEMBER);\n                pathItem.setValue(data[1]);\n\n                return pathItem;\n            })\n    );\n\nmodule.exports = { name: 'DOCUMENT_PATH_LAST_ITEM', parser };\n"]},"metadata":{},"sourceType":"script"}