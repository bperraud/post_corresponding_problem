{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst OrderStub = require('../../../Stubs/mysqlx_crud_pb').Order;\n\nconst ParserType = require('../../../../ExprParser').Type;\n\nconst expr = require('../Expr/Expr');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Order\n * @param {proto.Mysqlx.Crud.Order} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Order}\n */\n\n\nfunction Order(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Retrieve the ordering direction identifier.\n     * @function\n     * @name module:adapters.Mysqlx.Crud.Order#getDirection\n     * @returns {string}\n     */\n    getDirection() {\n      return Object.keys(OrderStub.Direction).filter(k => OrderStub.Direction[k] === proto.getDirection())[0];\n    },\n\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Crud.Order#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        expr: expr(proto.getExpr()).toJSON(),\n        direction: this.getDirection()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Order instance given an expression string or object.\n * @param {string|Object} value - expression string or object\n * @param {Object} [options] - extended options\n * @returns {module:adapters.Mysqlx.Crud.Order}\n */\n\n\nOrder.create = function (value, options) {\n  options = Object.assign({}, {\n    type: ParserType.SORT_EXPR\n  }, options); // If the value is a raw string, it needs to be transformed into a proper\n  // expression abstraction (ultimately a Mysqlx.Crud.Order instance).\n\n  if (typeof value === 'string') {\n    return Order(expr.create(value, options).valueOf());\n  }\n\n  const proto = new OrderStub();\n  proto.setExpr(value);\n  return Order(proto);\n};\n\nmodule.exports = Order;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Crud/Order.js"],"names":["OrderStub","require","Order","ParserType","Type","expr","wraps","proto","Object","assign","getDirection","keys","Direction","filter","k","toJSON","getExpr","direction","create","value","options","type","SORT_EXPR","valueOf","setExpr","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,+BAAD,CAAP,CAAyCC,KAA3D;;AACA,MAAMC,UAAU,GAAGF,OAAO,CAAC,wBAAD,CAAP,CAAkCG,IAArD;;AACA,MAAMC,IAAI,GAAGJ,OAAO,CAAC,cAAD,CAApB;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAgBK,KAAhB,EAAuB;AACnB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAK,CAACC,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,YAAY,GAAI;AACZ,aAAOF,MAAM,CAACG,IAAP,CAAYX,SAAS,CAACY,SAAtB,EACFC,MADE,CACKC,CAAC,IAAId,SAAS,CAACY,SAAV,CAAoBE,CAApB,MAA2BP,KAAK,CAACG,YAAN,EADrC,EAC2D,CAD3D,CAAP;AAEH,KAVkC;;AAYnC;AACR;AACA;AACA;AACA;AACA;AACQK,IAAAA,MAAM,GAAI;AACN,aAAO;AACHV,QAAAA,IAAI,EAAEA,IAAI,CAACE,KAAK,CAACS,OAAN,EAAD,CAAJ,CAAsBD,MAAtB,EADH;AAEHE,QAAAA,SAAS,EAAE,KAAKP,YAAL;AAFR,OAAP;AAIH;;AAvBkC,GAAhC,CAAP;AAyBH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAR,KAAK,CAACgB,MAAN,GAAe,UAAUC,KAAV,EAAiBC,OAAjB,EAA0B;AACrCA,EAAAA,OAAO,GAAGZ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAAEY,IAAAA,IAAI,EAAElB,UAAU,CAACmB;AAAnB,GAAlB,EAAkDF,OAAlD,CAAV,CADqC,CAGrC;AACA;;AACA,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC3B,WAAOjB,KAAK,CAACG,IAAI,CAACa,MAAL,CAAYC,KAAZ,EAAmBC,OAAnB,EAA4BG,OAA5B,EAAD,CAAZ;AACH;;AAED,QAAMhB,KAAK,GAAG,IAAIP,SAAJ,EAAd;AACAO,EAAAA,KAAK,CAACiB,OAAN,CAAcL,KAAd;AAEA,SAAOjB,KAAK,CAACK,KAAD,CAAZ;AACH,CAbD;;AAeAkB,MAAM,CAACC,OAAP,GAAiBxB,KAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst OrderStub = require('../../../Stubs/mysqlx_crud_pb').Order;\nconst ParserType = require('../../../../ExprParser').Type;\nconst expr = require('../Expr/Expr');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Order\n * @param {proto.Mysqlx.Crud.Order} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Order}\n */\nfunction Order (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Retrieve the ordering direction identifier.\n         * @function\n         * @name module:adapters.Mysqlx.Crud.Order#getDirection\n         * @returns {string}\n         */\n        getDirection () {\n            return Object.keys(OrderStub.Direction)\n                .filter(k => OrderStub.Direction[k] === proto.getDirection())[0];\n        },\n\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Crud.Order#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                expr: expr(proto.getExpr()).toJSON(),\n                direction: this.getDirection()\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Order instance given an expression string or object.\n * @param {string|Object} value - expression string or object\n * @param {Object} [options] - extended options\n * @returns {module:adapters.Mysqlx.Crud.Order}\n */\nOrder.create = function (value, options) {\n    options = Object.assign({}, { type: ParserType.SORT_EXPR }, options);\n\n    // If the value is a raw string, it needs to be transformed into a proper\n    // expression abstraction (ultimately a Mysqlx.Crud.Order instance).\n    if (typeof value === 'string') {\n        return Order(expr.create(value, options).valueOf());\n    }\n\n    const proto = new OrderStub();\n    proto.setExpr(value);\n\n    return Order(proto);\n};\n\nmodule.exports = Order;\n"]},"metadata":{},"sourceType":"script"}