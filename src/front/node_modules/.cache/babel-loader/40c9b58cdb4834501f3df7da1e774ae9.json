{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\nvar jspb = require('google-protobuf');\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar mysqlx_pb = require('./mysqlx_pb.js');\n\nvar mysqlx_sql_pb = require('./mysqlx_sql_pb.js');\n\nvar mysqlx_crud_pb = require('./mysqlx_crud_pb.js');\n\nvar mysqlx_datatypes_pb = require('./mysqlx_datatypes_pb.js');\n\ngoog.exportSymbol('proto.Mysqlx.Prepare.Deallocate', null, global);\ngoog.exportSymbol('proto.Mysqlx.Prepare.Execute', null, global);\ngoog.exportSymbol('proto.Mysqlx.Prepare.Prepare', null, global);\ngoog.exportSymbol('proto.Mysqlx.Prepare.Prepare.OneOfMessage', null, global);\ngoog.exportSymbol('proto.Mysqlx.Prepare.Prepare.OneOfMessage.Type', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.Mysqlx.Prepare.Prepare = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Prepare.Prepare, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Prepare.Prepare.displayName = 'proto.Mysqlx.Prepare.Prepare';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Prepare.Prepare.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Prepare.Prepare.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Prepare.Prepare} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Prepare.Prepare.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      stmtId: jspb.Message.getField(msg, 1),\n      stmt: (f = msg.getStmt()) && proto.Mysqlx.Prepare.Prepare.OneOfMessage.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Prepare.Prepare}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Prepare.Prepare();\n  return proto.Mysqlx.Prepare.Prepare.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Prepare.Prepare} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Prepare.Prepare}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setStmtId(value);\n        break;\n\n      case 2:\n        var value = new proto.Mysqlx.Prepare.Prepare.OneOfMessage();\n        reader.readMessage(value, proto.Mysqlx.Prepare.Prepare.OneOfMessage.deserializeBinaryFromReader);\n        msg.setStmt(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Prepare.Prepare.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Prepare.Prepare} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Prepare.Prepare.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {number} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeUint32(1, f);\n  }\n\n  f = message.getStmt();\n\n  if (f != null) {\n    writer.writeMessage(2, f, proto.Mysqlx.Prepare.Prepare.OneOfMessage.serializeBinaryToWriter);\n  }\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Prepare.Prepare.OneOfMessage, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Prepare.Prepare.OneOfMessage.displayName = 'proto.Mysqlx.Prepare.Prepare.OneOfMessage';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Prepare.Prepare.OneOfMessage.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Prepare.Prepare.OneOfMessage} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Prepare.Prepare.OneOfMessage.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      type: jspb.Message.getField(msg, 1),\n      find: (f = msg.getFind()) && mysqlx_crud_pb.Find.toObject(includeInstance, f),\n      insert: (f = msg.getInsert()) && mysqlx_crud_pb.Insert.toObject(includeInstance, f),\n      update: (f = msg.getUpdate()) && mysqlx_crud_pb.Update.toObject(includeInstance, f),\n      pb_delete: (f = msg.getDelete()) && mysqlx_crud_pb.Delete.toObject(includeInstance, f),\n      stmtExecute: (f = msg.getStmtExecute()) && mysqlx_sql_pb.StmtExecute.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Prepare.Prepare.OneOfMessage}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Prepare.Prepare.OneOfMessage();\n  return proto.Mysqlx.Prepare.Prepare.OneOfMessage.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Prepare.Prepare.OneOfMessage} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Prepare.Prepare.OneOfMessage}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!proto.Mysqlx.Prepare.Prepare.OneOfMessage.Type} */\n        reader.readEnum();\n        msg.setType(value);\n        break;\n\n      case 2:\n        var value = new mysqlx_crud_pb.Find();\n        reader.readMessage(value, mysqlx_crud_pb.Find.deserializeBinaryFromReader);\n        msg.setFind(value);\n        break;\n\n      case 3:\n        var value = new mysqlx_crud_pb.Insert();\n        reader.readMessage(value, mysqlx_crud_pb.Insert.deserializeBinaryFromReader);\n        msg.setInsert(value);\n        break;\n\n      case 4:\n        var value = new mysqlx_crud_pb.Update();\n        reader.readMessage(value, mysqlx_crud_pb.Update.deserializeBinaryFromReader);\n        msg.setUpdate(value);\n        break;\n\n      case 5:\n        var value = new mysqlx_crud_pb.Delete();\n        reader.readMessage(value, mysqlx_crud_pb.Delete.deserializeBinaryFromReader);\n        msg.setDelete(value);\n        break;\n\n      case 6:\n        var value = new mysqlx_sql_pb.StmtExecute();\n        reader.readMessage(value, mysqlx_sql_pb.StmtExecute.deserializeBinaryFromReader);\n        msg.setStmtExecute(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Prepare.Prepare.OneOfMessage.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Prepare.Prepare.OneOfMessage} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {!proto.Mysqlx.Prepare.Prepare.OneOfMessage.Type} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeEnum(1, f);\n  }\n\n  f = message.getFind();\n\n  if (f != null) {\n    writer.writeMessage(2, f, mysqlx_crud_pb.Find.serializeBinaryToWriter);\n  }\n\n  f = message.getInsert();\n\n  if (f != null) {\n    writer.writeMessage(3, f, mysqlx_crud_pb.Insert.serializeBinaryToWriter);\n  }\n\n  f = message.getUpdate();\n\n  if (f != null) {\n    writer.writeMessage(4, f, mysqlx_crud_pb.Update.serializeBinaryToWriter);\n  }\n\n  f = message.getDelete();\n\n  if (f != null) {\n    writer.writeMessage(5, f, mysqlx_crud_pb.Delete.serializeBinaryToWriter);\n  }\n\n  f = message.getStmtExecute();\n\n  if (f != null) {\n    writer.writeMessage(6, f, mysqlx_sql_pb.StmtExecute.serializeBinaryToWriter);\n  }\n};\n/**\n * @enum {number}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.Type = {\n  FIND: 0,\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 4,\n  STMT: 5\n};\n/**\n * required Type type = 1;\n * @return {!proto.Mysqlx.Prepare.Prepare.OneOfMessage.Type}\n */\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.getType = function () {\n  return (\n    /** @type {!proto.Mysqlx.Prepare.Prepare.OneOfMessage.Type} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/** @param {!proto.Mysqlx.Prepare.Prepare.OneOfMessage.Type} value */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.setType = function (value) {\n  jspb.Message.setField(this, 1, value);\n};\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.clearType = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.hasType = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional Mysqlx.Crud.Find find = 2;\n * @return {?proto.Mysqlx.Crud.Find}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.getFind = function () {\n  return (\n    /** @type{?proto.Mysqlx.Crud.Find} */\n    jspb.Message.getWrapperField(this, mysqlx_crud_pb.Find, 2)\n  );\n};\n/** @param {?proto.Mysqlx.Crud.Find|undefined} value */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.setFind = function (value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.clearFind = function () {\n  this.setFind(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.hasFind = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional Mysqlx.Crud.Insert insert = 3;\n * @return {?proto.Mysqlx.Crud.Insert}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.getInsert = function () {\n  return (\n    /** @type{?proto.Mysqlx.Crud.Insert} */\n    jspb.Message.getWrapperField(this, mysqlx_crud_pb.Insert, 3)\n  );\n};\n/** @param {?proto.Mysqlx.Crud.Insert|undefined} value */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.setInsert = function (value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.clearInsert = function () {\n  this.setInsert(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.hasInsert = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * optional Mysqlx.Crud.Update update = 4;\n * @return {?proto.Mysqlx.Crud.Update}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.getUpdate = function () {\n  return (\n    /** @type{?proto.Mysqlx.Crud.Update} */\n    jspb.Message.getWrapperField(this, mysqlx_crud_pb.Update, 4)\n  );\n};\n/** @param {?proto.Mysqlx.Crud.Update|undefined} value */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.setUpdate = function (value) {\n  jspb.Message.setWrapperField(this, 4, value);\n};\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.clearUpdate = function () {\n  this.setUpdate(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.hasUpdate = function () {\n  return jspb.Message.getField(this, 4) != null;\n};\n/**\n * optional Mysqlx.Crud.Delete delete = 5;\n * @return {?proto.Mysqlx.Crud.Delete}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.getDelete = function () {\n  return (\n    /** @type{?proto.Mysqlx.Crud.Delete} */\n    jspb.Message.getWrapperField(this, mysqlx_crud_pb.Delete, 5)\n  );\n};\n/** @param {?proto.Mysqlx.Crud.Delete|undefined} value */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.setDelete = function (value) {\n  jspb.Message.setWrapperField(this, 5, value);\n};\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.clearDelete = function () {\n  this.setDelete(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.hasDelete = function () {\n  return jspb.Message.getField(this, 5) != null;\n};\n/**\n * optional Mysqlx.Sql.StmtExecute stmt_execute = 6;\n * @return {?proto.Mysqlx.Sql.StmtExecute}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.getStmtExecute = function () {\n  return (\n    /** @type{?proto.Mysqlx.Sql.StmtExecute} */\n    jspb.Message.getWrapperField(this, mysqlx_sql_pb.StmtExecute, 6)\n  );\n};\n/** @param {?proto.Mysqlx.Sql.StmtExecute|undefined} value */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.setStmtExecute = function (value) {\n  jspb.Message.setWrapperField(this, 6, value);\n};\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.clearStmtExecute = function () {\n  this.setStmtExecute(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.hasStmtExecute = function () {\n  return jspb.Message.getField(this, 6) != null;\n};\n/**\n * required uint32 stmt_id = 1;\n * @return {number}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.prototype.getStmtId = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.Mysqlx.Prepare.Prepare.prototype.setStmtId = function (value) {\n  jspb.Message.setField(this, 1, value);\n};\n\nproto.Mysqlx.Prepare.Prepare.prototype.clearStmtId = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.prototype.hasStmtId = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * required OneOfMessage stmt = 2;\n * @return {!proto.Mysqlx.Prepare.Prepare.OneOfMessage}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.prototype.getStmt = function () {\n  return (\n    /** @type{!proto.Mysqlx.Prepare.Prepare.OneOfMessage} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Prepare.Prepare.OneOfMessage, 2, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Prepare.Prepare.OneOfMessage} value */\n\n\nproto.Mysqlx.Prepare.Prepare.prototype.setStmt = function (value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\nproto.Mysqlx.Prepare.Prepare.prototype.clearStmt = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Prepare.Prepare.prototype.hasStmt = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Prepare.Execute = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Prepare.Execute.repeatedFields_, null);\n};\n\ngoog.inherits(proto.Mysqlx.Prepare.Execute, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Prepare.Execute.displayName = 'proto.Mysqlx.Prepare.Execute';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.Mysqlx.Prepare.Execute.repeatedFields_ = [2];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Prepare.Execute.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Prepare.Execute.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Prepare.Execute} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Prepare.Execute.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      stmtId: jspb.Message.getField(msg, 1),\n      argsList: jspb.Message.toObjectList(msg.getArgsList(), mysqlx_datatypes_pb.Any.toObject, includeInstance),\n      compactMetadata: jspb.Message.getFieldWithDefault(msg, 3, false)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Prepare.Execute}\n */\n\n\nproto.Mysqlx.Prepare.Execute.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Prepare.Execute();\n  return proto.Mysqlx.Prepare.Execute.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Prepare.Execute} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Prepare.Execute}\n */\n\n\nproto.Mysqlx.Prepare.Execute.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setStmtId(value);\n        break;\n\n      case 2:\n        var value = new mysqlx_datatypes_pb.Any();\n        reader.readMessage(value, mysqlx_datatypes_pb.Any.deserializeBinaryFromReader);\n        msg.addArgs(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setCompactMetadata(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Prepare.Execute.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Prepare.Execute.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Prepare.Execute} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Prepare.Execute.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {number} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeUint32(1, f);\n  }\n\n  f = message.getArgsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(2, f, mysqlx_datatypes_pb.Any.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {boolean} */\n  jspb.Message.getField(message, 3);\n\n  if (f != null) {\n    writer.writeBool(3, f);\n  }\n};\n/**\n * required uint32 stmt_id = 1;\n * @return {number}\n */\n\n\nproto.Mysqlx.Prepare.Execute.prototype.getStmtId = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.Mysqlx.Prepare.Execute.prototype.setStmtId = function (value) {\n  jspb.Message.setField(this, 1, value);\n};\n\nproto.Mysqlx.Prepare.Execute.prototype.clearStmtId = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Prepare.Execute.prototype.hasStmtId = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * repeated Mysqlx.Datatypes.Any args = 2;\n * @return {!Array.<!proto.Mysqlx.Datatypes.Any>}\n */\n\n\nproto.Mysqlx.Prepare.Execute.prototype.getArgsList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Datatypes.Any>} */\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_datatypes_pb.Any, 2)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Datatypes.Any>} value */\n\n\nproto.Mysqlx.Prepare.Execute.prototype.setArgsList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n/**\n * @param {!proto.Mysqlx.Datatypes.Any=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Datatypes.Any}\n */\n\n\nproto.Mysqlx.Prepare.Execute.prototype.addArgs = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Mysqlx.Datatypes.Any, opt_index);\n};\n\nproto.Mysqlx.Prepare.Execute.prototype.clearArgsList = function () {\n  this.setArgsList([]);\n};\n/**\n * optional bool compact_metadata = 3;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val === true/false} in those cases.\n * @return {boolean}\n */\n\n\nproto.Mysqlx.Prepare.Execute.prototype.getCompactMetadata = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getFieldWithDefault(this, 3, false)\n  );\n};\n/** @param {boolean} value */\n\n\nproto.Mysqlx.Prepare.Execute.prototype.setCompactMetadata = function (value) {\n  jspb.Message.setField(this, 3, value);\n};\n\nproto.Mysqlx.Prepare.Execute.prototype.clearCompactMetadata = function () {\n  jspb.Message.setField(this, 3, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Prepare.Execute.prototype.hasCompactMetadata = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Prepare.Deallocate = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Prepare.Deallocate, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Prepare.Deallocate.displayName = 'proto.Mysqlx.Prepare.Deallocate';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Prepare.Deallocate.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Prepare.Deallocate.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Prepare.Deallocate} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Prepare.Deallocate.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      stmtId: jspb.Message.getField(msg, 1)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Prepare.Deallocate}\n */\n\n\nproto.Mysqlx.Prepare.Deallocate.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Prepare.Deallocate();\n  return proto.Mysqlx.Prepare.Deallocate.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Prepare.Deallocate} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Prepare.Deallocate}\n */\n\n\nproto.Mysqlx.Prepare.Deallocate.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setStmtId(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Prepare.Deallocate.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Prepare.Deallocate.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Prepare.Deallocate} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Prepare.Deallocate.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {number} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeUint32(1, f);\n  }\n};\n/**\n * required uint32 stmt_id = 1;\n * @return {number}\n */\n\n\nproto.Mysqlx.Prepare.Deallocate.prototype.getStmtId = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/** @param {number} value */\n\n\nproto.Mysqlx.Prepare.Deallocate.prototype.setStmtId = function (value) {\n  jspb.Message.setField(this, 1, value);\n};\n\nproto.Mysqlx.Prepare.Deallocate.prototype.clearStmtId = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Prepare.Deallocate.prototype.hasStmtId = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n\ngoog.object.extend(exports, proto.Mysqlx.Prepare);","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Stubs/mysqlx_prepare_pb.js"],"names":["jspb","require","goog","global","Function","mysqlx_pb","mysqlx_sql_pb","mysqlx_crud_pb","mysqlx_datatypes_pb","exportSymbol","proto","Mysqlx","Prepare","opt_data","Message","initialize","inherits","DEBUG","COMPILED","displayName","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","stmtId","getField","stmt","getStmt","OneOfMessage","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","value","readUint32","setStmtId","readMessage","setStmt","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","undefined","writeUint32","writeMessage","type","find","getFind","Find","insert","getInsert","Insert","update","getUpdate","Update","pb_delete","getDelete","Delete","stmtExecute","getStmtExecute","StmtExecute","readEnum","setType","setFind","setInsert","setUpdate","setDelete","setStmtExecute","writeEnum","Type","FIND","INSERT","UPDATE","DELETE","STMT","getType","getFieldWithDefault","setField","clearType","hasType","getWrapperField","setWrapperField","clearFind","hasFind","clearInsert","hasInsert","clearUpdate","hasUpdate","clearDelete","hasDelete","clearStmtExecute","hasStmtExecute","getStmtId","clearStmtId","hasStmtId","clearStmt","hasStmt","Execute","repeatedFields_","argsList","toObjectList","getArgsList","Any","compactMetadata","addArgs","readBool","setCompactMetadata","length","writeRepeatedMessage","writeBool","getRepeatedWrapperField","setArgsList","setRepeatedWrapperField","opt_value","opt_index","addToRepeatedWrapperField","Datatypes","clearArgsList","getCompactMetadata","clearCompactMetadata","hasCompactMetadata","Deallocate","object","extend","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar mysqlx_pb = require('./mysqlx_pb.js');\nvar mysqlx_sql_pb = require('./mysqlx_sql_pb.js');\nvar mysqlx_crud_pb = require('./mysqlx_crud_pb.js');\nvar mysqlx_datatypes_pb = require('./mysqlx_datatypes_pb.js');\ngoog.exportSymbol('proto.Mysqlx.Prepare.Deallocate', null, global);\ngoog.exportSymbol('proto.Mysqlx.Prepare.Execute', null, global);\ngoog.exportSymbol('proto.Mysqlx.Prepare.Prepare', null, global);\ngoog.exportSymbol('proto.Mysqlx.Prepare.Prepare.OneOfMessage', null, global);\ngoog.exportSymbol('proto.Mysqlx.Prepare.Prepare.OneOfMessage.Type', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Prepare.Prepare = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Prepare.Prepare, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Prepare.Prepare.displayName = 'proto.Mysqlx.Prepare.Prepare';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Prepare.Prepare.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Prepare.Prepare.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Prepare.Prepare} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Prepare.Prepare.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    stmtId: jspb.Message.getField(msg, 1),\n    stmt: (f = msg.getStmt()) && proto.Mysqlx.Prepare.Prepare.OneOfMessage.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Prepare.Prepare}\n */\nproto.Mysqlx.Prepare.Prepare.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Prepare.Prepare;\n  return proto.Mysqlx.Prepare.Prepare.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Prepare.Prepare} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Prepare.Prepare}\n */\nproto.Mysqlx.Prepare.Prepare.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setStmtId(value);\n      break;\n    case 2:\n      var value = new proto.Mysqlx.Prepare.Prepare.OneOfMessage;\n      reader.readMessage(value,proto.Mysqlx.Prepare.Prepare.OneOfMessage.deserializeBinaryFromReader);\n      msg.setStmt(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Prepare.Prepare.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Prepare.Prepare.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Prepare.Prepare} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Prepare.Prepare.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getStmt();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.Mysqlx.Prepare.Prepare.OneOfMessage.serializeBinaryToWriter\n    );\n  }\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Prepare.Prepare.OneOfMessage, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Prepare.Prepare.OneOfMessage.displayName = 'proto.Mysqlx.Prepare.Prepare.OneOfMessage';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Prepare.Prepare.OneOfMessage.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Prepare.Prepare.OneOfMessage} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    type: jspb.Message.getField(msg, 1),\n    find: (f = msg.getFind()) && mysqlx_crud_pb.Find.toObject(includeInstance, f),\n    insert: (f = msg.getInsert()) && mysqlx_crud_pb.Insert.toObject(includeInstance, f),\n    update: (f = msg.getUpdate()) && mysqlx_crud_pb.Update.toObject(includeInstance, f),\n    pb_delete: (f = msg.getDelete()) && mysqlx_crud_pb.Delete.toObject(includeInstance, f),\n    stmtExecute: (f = msg.getStmtExecute()) && mysqlx_sql_pb.StmtExecute.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Prepare.Prepare.OneOfMessage}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Prepare.Prepare.OneOfMessage;\n  return proto.Mysqlx.Prepare.Prepare.OneOfMessage.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Prepare.Prepare.OneOfMessage} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Prepare.Prepare.OneOfMessage}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.Mysqlx.Prepare.Prepare.OneOfMessage.Type} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 2:\n      var value = new mysqlx_crud_pb.Find;\n      reader.readMessage(value,mysqlx_crud_pb.Find.deserializeBinaryFromReader);\n      msg.setFind(value);\n      break;\n    case 3:\n      var value = new mysqlx_crud_pb.Insert;\n      reader.readMessage(value,mysqlx_crud_pb.Insert.deserializeBinaryFromReader);\n      msg.setInsert(value);\n      break;\n    case 4:\n      var value = new mysqlx_crud_pb.Update;\n      reader.readMessage(value,mysqlx_crud_pb.Update.deserializeBinaryFromReader);\n      msg.setUpdate(value);\n      break;\n    case 5:\n      var value = new mysqlx_crud_pb.Delete;\n      reader.readMessage(value,mysqlx_crud_pb.Delete.deserializeBinaryFromReader);\n      msg.setDelete(value);\n      break;\n    case 6:\n      var value = new mysqlx_sql_pb.StmtExecute;\n      reader.readMessage(value,mysqlx_sql_pb.StmtExecute.deserializeBinaryFromReader);\n      msg.setStmtExecute(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Prepare.Prepare.OneOfMessage.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Prepare.Prepare.OneOfMessage} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {!proto.Mysqlx.Prepare.Prepare.OneOfMessage.Type} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getFind();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      mysqlx_crud_pb.Find.serializeBinaryToWriter\n    );\n  }\n  f = message.getInsert();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      mysqlx_crud_pb.Insert.serializeBinaryToWriter\n    );\n  }\n  f = message.getUpdate();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      mysqlx_crud_pb.Update.serializeBinaryToWriter\n    );\n  }\n  f = message.getDelete();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      mysqlx_crud_pb.Delete.serializeBinaryToWriter\n    );\n  }\n  f = message.getStmtExecute();\n  if (f != null) {\n    writer.writeMessage(\n      6,\n      f,\n      mysqlx_sql_pb.StmtExecute.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.Type = {\n  FIND: 0,\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 4,\n  STMT: 5\n};\n\n/**\n * required Type type = 1;\n * @return {!proto.Mysqlx.Prepare.Prepare.OneOfMessage.Type}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.getType = function() {\n  return /** @type {!proto.Mysqlx.Prepare.Prepare.OneOfMessage.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {!proto.Mysqlx.Prepare.Prepare.OneOfMessage.Type} value */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.setType = function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.clearType = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.hasType = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional Mysqlx.Crud.Find find = 2;\n * @return {?proto.Mysqlx.Crud.Find}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.getFind = function() {\n  return /** @type{?proto.Mysqlx.Crud.Find} */ (\n    jspb.Message.getWrapperField(this, mysqlx_crud_pb.Find, 2));\n};\n\n\n/** @param {?proto.Mysqlx.Crud.Find|undefined} value */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.setFind = function(value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.clearFind = function() {\n  this.setFind(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.hasFind = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional Mysqlx.Crud.Insert insert = 3;\n * @return {?proto.Mysqlx.Crud.Insert}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.getInsert = function() {\n  return /** @type{?proto.Mysqlx.Crud.Insert} */ (\n    jspb.Message.getWrapperField(this, mysqlx_crud_pb.Insert, 3));\n};\n\n\n/** @param {?proto.Mysqlx.Crud.Insert|undefined} value */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.setInsert = function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.clearInsert = function() {\n  this.setInsert(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.hasInsert = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional Mysqlx.Crud.Update update = 4;\n * @return {?proto.Mysqlx.Crud.Update}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.getUpdate = function() {\n  return /** @type{?proto.Mysqlx.Crud.Update} */ (\n    jspb.Message.getWrapperField(this, mysqlx_crud_pb.Update, 4));\n};\n\n\n/** @param {?proto.Mysqlx.Crud.Update|undefined} value */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.setUpdate = function(value) {\n  jspb.Message.setWrapperField(this, 4, value);\n};\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.clearUpdate = function() {\n  this.setUpdate(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.hasUpdate = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional Mysqlx.Crud.Delete delete = 5;\n * @return {?proto.Mysqlx.Crud.Delete}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.getDelete = function() {\n  return /** @type{?proto.Mysqlx.Crud.Delete} */ (\n    jspb.Message.getWrapperField(this, mysqlx_crud_pb.Delete, 5));\n};\n\n\n/** @param {?proto.Mysqlx.Crud.Delete|undefined} value */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.setDelete = function(value) {\n  jspb.Message.setWrapperField(this, 5, value);\n};\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.clearDelete = function() {\n  this.setDelete(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.hasDelete = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * optional Mysqlx.Sql.StmtExecute stmt_execute = 6;\n * @return {?proto.Mysqlx.Sql.StmtExecute}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.getStmtExecute = function() {\n  return /** @type{?proto.Mysqlx.Sql.StmtExecute} */ (\n    jspb.Message.getWrapperField(this, mysqlx_sql_pb.StmtExecute, 6));\n};\n\n\n/** @param {?proto.Mysqlx.Sql.StmtExecute|undefined} value */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.setStmtExecute = function(value) {\n  jspb.Message.setWrapperField(this, 6, value);\n};\n\n\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.clearStmtExecute = function() {\n  this.setStmtExecute(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Prepare.Prepare.OneOfMessage.prototype.hasStmtExecute = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n/**\n * required uint32 stmt_id = 1;\n * @return {number}\n */\nproto.Mysqlx.Prepare.Prepare.prototype.getStmtId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {number} value */\nproto.Mysqlx.Prepare.Prepare.prototype.setStmtId = function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.Mysqlx.Prepare.Prepare.prototype.clearStmtId = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Prepare.Prepare.prototype.hasStmtId = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * required OneOfMessage stmt = 2;\n * @return {!proto.Mysqlx.Prepare.Prepare.OneOfMessage}\n */\nproto.Mysqlx.Prepare.Prepare.prototype.getStmt = function() {\n  return /** @type{!proto.Mysqlx.Prepare.Prepare.OneOfMessage} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Prepare.Prepare.OneOfMessage, 2, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Prepare.Prepare.OneOfMessage} value */\nproto.Mysqlx.Prepare.Prepare.prototype.setStmt = function(value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\n\nproto.Mysqlx.Prepare.Prepare.prototype.clearStmt = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Prepare.Prepare.prototype.hasStmt = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Prepare.Execute = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Prepare.Execute.repeatedFields_, null);\n};\ngoog.inherits(proto.Mysqlx.Prepare.Execute, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Prepare.Execute.displayName = 'proto.Mysqlx.Prepare.Execute';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Mysqlx.Prepare.Execute.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Prepare.Execute.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Prepare.Execute.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Prepare.Execute} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Prepare.Execute.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    stmtId: jspb.Message.getField(msg, 1),\n    argsList: jspb.Message.toObjectList(msg.getArgsList(),\n    mysqlx_datatypes_pb.Any.toObject, includeInstance),\n    compactMetadata: jspb.Message.getFieldWithDefault(msg, 3, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Prepare.Execute}\n */\nproto.Mysqlx.Prepare.Execute.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Prepare.Execute;\n  return proto.Mysqlx.Prepare.Execute.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Prepare.Execute} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Prepare.Execute}\n */\nproto.Mysqlx.Prepare.Execute.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setStmtId(value);\n      break;\n    case 2:\n      var value = new mysqlx_datatypes_pb.Any;\n      reader.readMessage(value,mysqlx_datatypes_pb.Any.deserializeBinaryFromReader);\n      msg.addArgs(value);\n      break;\n    case 3:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setCompactMetadata(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Prepare.Execute.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Prepare.Execute.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Prepare.Execute} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Prepare.Execute.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getArgsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      mysqlx_datatypes_pb.Any.serializeBinaryToWriter\n    );\n  }\n  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));\n  if (f != null) {\n    writer.writeBool(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * required uint32 stmt_id = 1;\n * @return {number}\n */\nproto.Mysqlx.Prepare.Execute.prototype.getStmtId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {number} value */\nproto.Mysqlx.Prepare.Execute.prototype.setStmtId = function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.Mysqlx.Prepare.Execute.prototype.clearStmtId = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Prepare.Execute.prototype.hasStmtId = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * repeated Mysqlx.Datatypes.Any args = 2;\n * @return {!Array.<!proto.Mysqlx.Datatypes.Any>}\n */\nproto.Mysqlx.Prepare.Execute.prototype.getArgsList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Datatypes.Any>} */ (\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_datatypes_pb.Any, 2));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Datatypes.Any>} value */\nproto.Mysqlx.Prepare.Execute.prototype.setArgsList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Datatypes.Any=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Datatypes.Any}\n */\nproto.Mysqlx.Prepare.Execute.prototype.addArgs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Mysqlx.Datatypes.Any, opt_index);\n};\n\n\nproto.Mysqlx.Prepare.Execute.prototype.clearArgsList = function() {\n  this.setArgsList([]);\n};\n\n\n/**\n * optional bool compact_metadata = 3;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val === true/false} in those cases.\n * @return {boolean}\n */\nproto.Mysqlx.Prepare.Execute.prototype.getCompactMetadata = function() {\n  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));\n};\n\n\n/** @param {boolean} value */\nproto.Mysqlx.Prepare.Execute.prototype.setCompactMetadata = function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.Mysqlx.Prepare.Execute.prototype.clearCompactMetadata = function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Prepare.Execute.prototype.hasCompactMetadata = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Prepare.Deallocate = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Prepare.Deallocate, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Prepare.Deallocate.displayName = 'proto.Mysqlx.Prepare.Deallocate';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Prepare.Deallocate.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Prepare.Deallocate.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Prepare.Deallocate} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Prepare.Deallocate.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    stmtId: jspb.Message.getField(msg, 1)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Prepare.Deallocate}\n */\nproto.Mysqlx.Prepare.Deallocate.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Prepare.Deallocate;\n  return proto.Mysqlx.Prepare.Deallocate.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Prepare.Deallocate} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Prepare.Deallocate}\n */\nproto.Mysqlx.Prepare.Deallocate.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setStmtId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Prepare.Deallocate.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Prepare.Deallocate.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Prepare.Deallocate} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Prepare.Deallocate.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * required uint32 stmt_id = 1;\n * @return {number}\n */\nproto.Mysqlx.Prepare.Deallocate.prototype.getStmtId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {number} value */\nproto.Mysqlx.Prepare.Deallocate.prototype.setStmtId = function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.Mysqlx.Prepare.Deallocate.prototype.clearStmtId = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Prepare.Deallocate.prototype.hasStmtId = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\ngoog.object.extend(exports, proto.Mysqlx.Prepare);\n"]},"metadata":{},"sourceType":"script"}