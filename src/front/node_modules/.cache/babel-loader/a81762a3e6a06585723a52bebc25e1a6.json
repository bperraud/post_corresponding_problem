{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst ResetStub = require('../../../Stubs/mysqlx_session_pb').Reset;\n\nconst serializable = require('../../Traits/Serializable');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Session.Reset\n * @param {proto.Mysqlx.Session.Reset} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Session.Reset}\n */\n\n\nfunction Reset(proto) {\n  return Object.assign({}, serializable(proto), wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Session.Reset#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        keep_open: proto.getKeepOpen()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Sesssion.Reset instance with a given condition.\n * @returns {module:adapters.Mysqlx.Sesssion.Reset}\n */\n\n\nReset.create = function (keepOpen) {\n  const proto = new ResetStub();\n\n  if (keepOpen) {\n    proto.setKeepOpen(keepOpen);\n  }\n\n  return Reset(proto);\n};\n\nmodule.exports = Reset;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Session/Reset.js"],"names":["ResetStub","require","Reset","serializable","wraps","proto","Object","assign","toJSON","keep_open","getKeepOpen","create","keepOpen","setKeepOpen","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kCAAD,CAAP,CAA4CC,KAA9D;;AACA,MAAMC,YAAY,GAAGF,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAgBG,KAAhB,EAAuB;AACnB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,YAAY,CAACE,KAAD,CAA9B,EAAuCD,KAAK,CAACC,KAAD,CAA5C,EAAqD;AACxD;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAO;AACHC,QAAAA,SAAS,EAAEJ,KAAK,CAACK,WAAN;AADR,OAAP;AAGH;;AAXuD,GAArD,CAAP;AAaH;AAED;AACA;AACA;AACA;;;AACAR,KAAK,CAACS,MAAN,GAAe,UAAUC,QAAV,EAAoB;AAC/B,QAAMP,KAAK,GAAG,IAAIL,SAAJ,EAAd;;AAEA,MAAIY,QAAJ,EAAc;AACVP,IAAAA,KAAK,CAACQ,WAAN,CAAkBD,QAAlB;AACH;;AAED,SAAOV,KAAK,CAACG,KAAD,CAAZ;AACH,CARD;;AAUAS,MAAM,CAACC,OAAP,GAAiBb,KAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst ResetStub = require('../../../Stubs/mysqlx_session_pb').Reset;\nconst serializable = require('../../Traits/Serializable');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Session.Reset\n * @param {proto.Mysqlx.Session.Reset} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Session.Reset}\n */\nfunction Reset (proto) {\n    return Object.assign({}, serializable(proto), wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Session.Reset#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                keep_open: proto.getKeepOpen()\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Sesssion.Reset instance with a given condition.\n * @returns {module:adapters.Mysqlx.Sesssion.Reset}\n */\nReset.create = function (keepOpen) {\n    const proto = new ResetStub();\n\n    if (keepOpen) {\n        proto.setKeepOpen(keepOpen);\n    }\n\n    return Reset(proto);\n};\n\nmodule.exports = Reset;\n"]},"metadata":{},"sourceType":"script"}