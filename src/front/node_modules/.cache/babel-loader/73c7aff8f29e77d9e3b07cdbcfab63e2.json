{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst SessionStateChangedStub = require('../../../Stubs/mysqlx_notice_pb').SessionStateChanged;\n\nconst bytes = require('../../ScalarValues/bytes');\n\nconst scalar = require('../Datatypes/Scalar');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Notice.SessionStateChanged\n * @param {proto.Mysqlx.Notice.SessionStateChanged} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Notice.SessionStateChanged}\n */\n\n\nfunction SessionStateChanged(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Get the name of state parameter that has changed.\n     * @function\n     * @name module:adapters.Mysqlx.Notice.SessionStateChanged#getParameter\n     * @returns {string}\n     */\n    getParameter() {\n      return Object.keys(SessionStateChangedStub.Parameter).filter(k => SessionStateChangedStub.Parameter[k] === proto.getParam())[0];\n    },\n\n    /**\n     * Get parameter protocol identifier.\n     * @function\n     * @name module:adapters.Mysqlx.Notice.SessionStateChanged#getParameterId\n     * @returns {number}\n     */\n    getParameterId() {\n      return proto.getParam();\n    },\n\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Notice.SessionStateChanged#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        param: this.getParameter(),\n        value: proto.getValueList().map(v => scalar(v).toJSON())\n      };\n    },\n\n    /**\n     * Return a plain JavaScript object version of the underlying protobuf instance.\n     * @function\n     * @name module:adapters.Mysqlx.Notice.SessionStateChanged#toObject\n     * @returns {Object}\n     */\n    toObject() {\n      return {\n        type: proto.getParam(),\n        values: proto.getValueList().map(v => scalar(v).toLiteral())\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Notice.SessionStateChanged}\n */\n\n\nSessionStateChanged.deserialize = function (buffer) {\n  return SessionStateChanged(SessionStateChangedStub.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nSessionStateChanged.Parameter = SessionStateChangedStub.Parameter;\nmodule.exports = SessionStateChanged;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Notice/SessionStateChanged.js"],"names":["SessionStateChangedStub","require","SessionStateChanged","bytes","scalar","wraps","proto","Object","assign","getParameter","keys","Parameter","filter","k","getParam","getParameterId","toJSON","param","value","getValueList","map","v","toObject","type","values","toLiteral","deserialize","buffer","deserializeBinary","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,uBAAuB,GAAGC,OAAO,CAAC,iCAAD,CAAP,CAA2CC,mBAA3E;;AACA,MAAMC,KAAK,GAAGF,OAAO,CAAC,0BAAD,CAArB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,qBAAD,CAAtB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,mBAAT,CAA8BI,KAA9B,EAAqC;AACjC,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAK,CAACC,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,YAAY,GAAI;AACZ,aAAOF,MAAM,CAACG,IAAP,CAAYV,uBAAuB,CAACW,SAApC,EACFC,MADE,CACKC,CAAC,IAAIb,uBAAuB,CAACW,SAAxB,CAAkCE,CAAlC,MAAyCP,KAAK,CAACQ,QAAN,EADnD,EACqE,CADrE,CAAP;AAEH,KAVkC;;AAYnC;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,cAAc,GAAI;AACd,aAAOT,KAAK,CAACQ,QAAN,EAAP;AACH,KApBkC;;AAsBnC;AACR;AACA;AACA;AACA;AACA;AACQE,IAAAA,MAAM,GAAI;AACN,aAAO;AAAEC,QAAAA,KAAK,EAAE,KAAKR,YAAL,EAAT;AAA8BS,QAAAA,KAAK,EAAEZ,KAAK,CAACa,YAAN,GAAqBC,GAArB,CAAyBC,CAAC,IAAIjB,MAAM,CAACiB,CAAD,CAAN,CAAUL,MAAV,EAA9B;AAArC,OAAP;AACH,KA9BkC;;AAgCnC;AACR;AACA;AACA;AACA;AACA;AACQM,IAAAA,QAAQ,GAAI;AACR,aAAO;AAAEC,QAAAA,IAAI,EAAEjB,KAAK,CAACQ,QAAN,EAAR;AAA0BU,QAAAA,MAAM,EAAElB,KAAK,CAACa,YAAN,GAAqBC,GAArB,CAAyBC,CAAC,IAAIjB,MAAM,CAACiB,CAAD,CAAN,CAAUI,SAAV,EAA9B;AAAlC,OAAP;AACH;;AAxCkC,GAAhC,CAAP;AA0CH;AAED;AACA;AACA;AACA;;;AACAvB,mBAAmB,CAACwB,WAApB,GAAkC,UAAUC,MAAV,EAAkB;AAChD,SAAOzB,mBAAmB,CAACF,uBAAuB,CAAC4B,iBAAxB,CAA0CzB,KAAK,CAACuB,WAAN,CAAkBC,MAAlB,CAA1C,CAAD,CAA1B;AACH,CAFD;;AAIAzB,mBAAmB,CAACS,SAApB,GAAgCX,uBAAuB,CAACW,SAAxD;AAEAkB,MAAM,CAACC,OAAP,GAAiB5B,mBAAjB","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst SessionStateChangedStub = require('../../../Stubs/mysqlx_notice_pb').SessionStateChanged;\nconst bytes = require('../../ScalarValues/bytes');\nconst scalar = require('../Datatypes/Scalar');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Notice.SessionStateChanged\n * @param {proto.Mysqlx.Notice.SessionStateChanged} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Notice.SessionStateChanged}\n */\nfunction SessionStateChanged (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Get the name of state parameter that has changed.\n         * @function\n         * @name module:adapters.Mysqlx.Notice.SessionStateChanged#getParameter\n         * @returns {string}\n         */\n        getParameter () {\n            return Object.keys(SessionStateChangedStub.Parameter)\n                .filter(k => SessionStateChangedStub.Parameter[k] === proto.getParam())[0];\n        },\n\n        /**\n         * Get parameter protocol identifier.\n         * @function\n         * @name module:adapters.Mysqlx.Notice.SessionStateChanged#getParameterId\n         * @returns {number}\n         */\n        getParameterId () {\n            return proto.getParam();\n        },\n\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Notice.SessionStateChanged#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return { param: this.getParameter(), value: proto.getValueList().map(v => scalar(v).toJSON()) };\n        },\n\n        /**\n         * Return a plain JavaScript object version of the underlying protobuf instance.\n         * @function\n         * @name module:adapters.Mysqlx.Notice.SessionStateChanged#toObject\n         * @returns {Object}\n         */\n        toObject () {\n            return { type: proto.getParam(), values: proto.getValueList().map(v => scalar(v).toLiteral()) };\n        }\n    });\n}\n\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Notice.SessionStateChanged}\n */\nSessionStateChanged.deserialize = function (buffer) {\n    return SessionStateChanged(SessionStateChangedStub.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nSessionStateChanged.Parameter = SessionStateChangedStub.Parameter;\n\nmodule.exports = SessionStateChanged;\n"]},"metadata":{},"sourceType":"script"}