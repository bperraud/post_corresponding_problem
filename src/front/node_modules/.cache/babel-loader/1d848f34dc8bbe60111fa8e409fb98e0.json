{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst bytes = require('../../Wrappers/ScalarValues/bytes');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Tokenizable\n * @param {proto.Mysqlx.Session.AuthenticateContinue|proto.Mysqlx.Session.AuthenticateOk} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Tokenizable}\n */\n\n\nfunction Tokenizable(proto) {\n  return {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Tokenizable#toJSON\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        auth_data: bytes(proto.getAuthData()).toJSON()\n      };\n    },\n\n    /**\n     * Return a plain JavaScript object version of the underlying protocol message.\n     * @function\n     * @name module:adapters.Mysqlx.Tokenizable#toObject\n     * @returns {Object}\n     */\n    toObject() {\n      return proto.toObject();\n    }\n\n  };\n}\n\nmodule.exports = Tokenizable;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Traits/Tokenizable.js"],"names":["bytes","require","Tokenizable","proto","toJSON","auth_data","getAuthData","toObject","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,mCAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAsBC,KAAtB,EAA6B;AACzB,SAAO;AACH;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,MAAM,GAAI;AACN,aAAO;AACHC,QAAAA,SAAS,EAAEL,KAAK,CAACG,KAAK,CAACG,WAAN,EAAD,CAAL,CAA2BF,MAA3B;AADR,OAAP;AAGH,KAXE;;AAaH;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,QAAQ,GAAI;AACR,aAAOJ,KAAK,CAACI,QAAN,EAAP;AACH;;AArBE,GAAP;AAuBH;;AAEDC,MAAM,CAACC,OAAP,GAAiBP,WAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst bytes = require('../../Wrappers/ScalarValues/bytes');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Tokenizable\n * @param {proto.Mysqlx.Session.AuthenticateContinue|proto.Mysqlx.Session.AuthenticateOk} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Tokenizable}\n */\nfunction Tokenizable (proto) {\n    return {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Tokenizable#toJSON\n         * @returns {Object}\n         */\n        toJSON () {\n            return {\n                auth_data: bytes(proto.getAuthData()).toJSON()\n            };\n        },\n\n        /**\n         * Return a plain JavaScript object version of the underlying protocol message.\n         * @function\n         * @name module:adapters.Mysqlx.Tokenizable#toObject\n         * @returns {Object}\n         */\n        toObject () {\n            return proto.toObject();\n        }\n    };\n}\n\nmodule.exports = Tokenizable;\n"]},"metadata":{},"sourceType":"script"}