{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst collations = require('../../../Collations');\n\nconst bytes = require('../../ScalarValues/bytes');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * Wrapper for the Mysqlx.Datatypes.Scalar.String protobuf stub.\n * @private\n * @alias module:adapters.Mysqlx.Datatypes.String\n * @param {proto.Mysqlx.Datatypes.String} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Datatypes.String}\n */\n\n\nfunction String(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Retrieve the charset used to encode the string.\n     * @function\n     * @name module:adapters.Mysqlx.Datatypes.String#getCharset\n     * @returns {string} The charset name.\n     */\n    getCharset() {\n      return (collations.find(proto.getCollation()) || {}).charset;\n    },\n\n    /**\n     * Retrieve the id of the collation used to encode the string.\n     * @function\n     * @name module:adapters.Mysqlx.Datatypes.String#getCollationId\n     * @returns {number} The collation id.\n     */\n    getCollationId() {\n      // The stub is created with a default value of 0, which does not\n      // match any valid collation, so it should be undefined\n      return proto.getCollation() > 0 ? proto.getCollation() : undefined;\n    },\n\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Datatypes.String#toJSON\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        collation: this.getCollationId(),\n        value: this.toString()\n      };\n    },\n\n    /**\n     * Decode the underlying binary content.\n     * @function\n     * @name module:adapters.Mysqlx.Datatypes.String#toString\n     * @returns {string}\n     */\n    toString() {\n      const binary = bytes(proto.getValue());\n\n      if (this.getCharset() !== 'binary') {\n        return binary.toString(); // utf8\n      }\n\n      return binary.toString('base64');\n    }\n\n  });\n}\n\nmodule.exports = String;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Datatypes/String.js"],"names":["collations","require","bytes","wraps","String","proto","Object","assign","getCharset","find","getCollation","charset","getCollationId","undefined","toJSON","collation","value","toString","binary","getValue","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,qBAAD,CAA1B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,0BAAD,CAArB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,MAAT,CAAiBC,KAAjB,EAAwB;AACpB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAK,CAACE,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,UAAU,GAAI;AACV,aAAO,CAACR,UAAU,CAACS,IAAX,CAAgBJ,KAAK,CAACK,YAAN,EAAhB,KAAyC,EAA1C,EAA8CC,OAArD;AACH,KATkC;;AAWnC;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,cAAc,GAAI;AACd;AACA;AACA,aAAOP,KAAK,CAACK,YAAN,KAAuB,CAAvB,GAA2BL,KAAK,CAACK,YAAN,EAA3B,GAAkDG,SAAzD;AACH,KArBkC;;AAuBnC;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,MAAM,GAAI;AACN,aAAO;AACHC,QAAAA,SAAS,EAAE,KAAKH,cAAL,EADR;AAEHI,QAAAA,KAAK,EAAE,KAAKC,QAAL;AAFJ,OAAP;AAIH,KAlCkC;;AAoCnC;AACR;AACA;AACA;AACA;AACA;AACQA,IAAAA,QAAQ,GAAI;AACR,YAAMC,MAAM,GAAGhB,KAAK,CAACG,KAAK,CAACc,QAAN,EAAD,CAApB;;AAEA,UAAI,KAAKX,UAAL,OAAsB,QAA1B,EAAoC;AAChC,eAAOU,MAAM,CAACD,QAAP,EAAP,CADgC,CACN;AAC7B;;AAED,aAAOC,MAAM,CAACD,QAAP,CAAgB,QAAhB,CAAP;AACH;;AAlDkC,GAAhC,CAAP;AAoDH;;AAEDG,MAAM,CAACC,OAAP,GAAiBjB,MAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst collations = require('../../../Collations');\nconst bytes = require('../../ScalarValues/bytes');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * Wrapper for the Mysqlx.Datatypes.Scalar.String protobuf stub.\n * @private\n * @alias module:adapters.Mysqlx.Datatypes.String\n * @param {proto.Mysqlx.Datatypes.String} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Datatypes.String}\n */\nfunction String (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Retrieve the charset used to encode the string.\n         * @function\n         * @name module:adapters.Mysqlx.Datatypes.String#getCharset\n         * @returns {string} The charset name.\n         */\n        getCharset () {\n            return (collations.find(proto.getCollation()) || {}).charset;\n        },\n\n        /**\n         * Retrieve the id of the collation used to encode the string.\n         * @function\n         * @name module:adapters.Mysqlx.Datatypes.String#getCollationId\n         * @returns {number} The collation id.\n         */\n        getCollationId () {\n            // The stub is created with a default value of 0, which does not\n            // match any valid collation, so it should be undefined\n            return proto.getCollation() > 0 ? proto.getCollation() : undefined;\n        },\n\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Datatypes.String#toJSON\n         * @returns {Object}\n         */\n        toJSON () {\n            return {\n                collation: this.getCollationId(),\n                value: this.toString()\n            };\n        },\n\n        /**\n         * Decode the underlying binary content.\n         * @function\n         * @name module:adapters.Mysqlx.Datatypes.String#toString\n         * @returns {string}\n         */\n        toString () {\n            const binary = bytes(proto.getValue());\n\n            if (this.getCharset() !== 'binary') {\n                return binary.toString(); // utf8\n            }\n\n            return binary.toString('base64');\n        }\n    });\n}\n\nmodule.exports = String;\n"]},"metadata":{},"sourceType":"script"}