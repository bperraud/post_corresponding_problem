{"ast":null,"code":"/*\n * Copyright (c) 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst tls = require('tls');\n/**\n * Lists all the allowed TLS versions\n * @private\n * @returns {string[]} Returns ['TLSv1.2', 'TLSv1.3']\n */\n\n\nexports.allowed = function () {\n  return ['TLSv1.2', 'TLSv1.3'];\n};\n/**\n * Retrieves the latest TLS version available for the Node.js engine (and\n * OpenSSL) version being used.\n * @private\n * @returns {string} Returns tls.DEFAULT_MAX_VERSION or 'TLSv1.2' if it is not\n * available.\n */\n\n\nexports.latest = function () {\n  return tls.DEFAULT_MAX_VERSION || 'TLSv1.2';\n};\n/**\n * Retrieves the list of TLS versions supported by the current Node.js\n * engine (and OpenSSL) version.\n * @private\n * @returns {string[]} Returns ['TLSv1.2'] on Node.js\n * versions below or equal to 10.x, and ['TLSv1.2', 'TLSv1.3'] on versions\n * above.\n */\n\n\nexports.supported = function () {\n  const allowed = this.allowed();\n  const latest = this.latest(); // If TLSv1.3 is supported, we should include it.\n\n  return allowed.slice(0, allowed.indexOf(latest) > -1 ? allowed.indexOf(latest) + 1 : 0);\n};\n/**\n * Lists all the valid TLS versions that are not supported.\n * @private\n * @returns {string[]} Returns ['TLSv1', 'TLSv1.1']\n */\n\n\nexports.unsupported = function () {\n  return ['TLSv1', 'TLSv1.1'];\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/tls/versions.js"],"names":["tls","require","exports","allowed","latest","DEFAULT_MAX_VERSION","supported","slice","indexOf","unsupported"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;;;AACAC,OAAO,CAACC,OAAR,GAAkB,YAAY;AAC1B,SAAO,CAAC,SAAD,EAAY,SAAZ,CAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAD,OAAO,CAACE,MAAR,GAAiB,YAAY;AACzB,SAAOJ,GAAG,CAACK,mBAAJ,IAA2B,SAAlC;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAH,OAAO,CAACI,SAAR,GAAoB,YAAY;AAC5B,QAAMH,OAAO,GAAG,KAAKA,OAAL,EAAhB;AACA,QAAMC,MAAM,GAAG,KAAKA,MAAL,EAAf,CAF4B,CAI5B;;AACA,SAAOD,OAAO,CAACI,KAAR,CAAc,CAAd,EAAiBJ,OAAO,CAACK,OAAR,CAAgBJ,MAAhB,IAA0B,CAAC,CAA3B,GAA+BD,OAAO,CAACK,OAAR,CAAgBJ,MAAhB,IAA0B,CAAzD,GAA6D,CAA9E,CAAP;AACH,CAND;AAQA;AACA;AACA;AACA;AACA;;;AACAF,OAAO,CAACO,WAAR,GAAsB,YAAY;AAC9B,SAAO,CAAC,OAAD,EAAU,SAAV,CAAP;AACH,CAFD","sourcesContent":["/*\n * Copyright (c) 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst tls = require('tls');\n\n/**\n * Lists all the allowed TLS versions\n * @private\n * @returns {string[]} Returns ['TLSv1.2', 'TLSv1.3']\n */\nexports.allowed = function () {\n    return ['TLSv1.2', 'TLSv1.3'];\n};\n\n/**\n * Retrieves the latest TLS version available for the Node.js engine (and\n * OpenSSL) version being used.\n * @private\n * @returns {string} Returns tls.DEFAULT_MAX_VERSION or 'TLSv1.2' if it is not\n * available.\n */\nexports.latest = function () {\n    return tls.DEFAULT_MAX_VERSION || 'TLSv1.2';\n};\n\n/**\n * Retrieves the list of TLS versions supported by the current Node.js\n * engine (and OpenSSL) version.\n * @private\n * @returns {string[]} Returns ['TLSv1.2'] on Node.js\n * versions below or equal to 10.x, and ['TLSv1.2', 'TLSv1.3'] on versions\n * above.\n */\nexports.supported = function () {\n    const allowed = this.allowed();\n    const latest = this.latest();\n\n    // If TLSv1.3 is supported, we should include it.\n    return allowed.slice(0, allowed.indexOf(latest) > -1 ? allowed.indexOf(latest) + 1 : 0);\n};\n\n/**\n * Lists all the valid TLS versions that are not supported.\n * @private\n * @returns {string[]} Returns ['TLSv1', 'TLSv1.1']\n */\nexports.unsupported = function () {\n    return ['TLSv1', 'TLSv1.1'];\n};\n"]},"metadata":{},"sourceType":"script"}