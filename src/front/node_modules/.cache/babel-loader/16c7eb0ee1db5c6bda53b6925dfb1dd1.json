{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst error = require('../Wrappers/Messages/Error');\n\nconst errors = require('../../constants/errors');\n\nconst notice = require('../Wrappers/Messages/Notice/Frame');\n\nconst logger = require('../../logger');\n\nconst util = require('util');\n\nconst log = logger('protocol:inbound:Mysqlx');\n/**\n * Abstract prototype for a InboundHandler\n *\n * Each inherited object should add methods for the messages they want to handle. Common utility functions\n * are provided from here.\n *\n * @private\n * @constructor\n */\n\nfunction BaseHandler() {\n  this._resolve = null;\n  this._fail = null;\n  this._notices = [];\n}\n/**\n * Directly send a message to the server, without adding to the queue or returning a promise.\n *\n * @param stream {Stream}\n * @param buffer {Buffer} Ready packet, will be sent as is\n */\n\n\nBaseHandler.prototype.sendDirect = function (stream, buffer) {\n  stream.write(buffer);\n};\n/**\n * Quese the handler, creates our promise and sends the message\n * @param queue {WorkQueue}\n * @param stream {Stream}\n * @param buffer {Buffer} Ready packet, will be sent as is\n * @returns {Promise}\n */\n\n\nBaseHandler.prototype.sendMessage = function (queue, stream, buffer) {\n  const self = this;\n  return new Promise((resolve, reject) => {\n    self._resolve = resolve;\n    self._fail = reject;\n\n    const entry = function (message, queueDone) {\n      if (message.id === error.SERVER_GONE) {\n        // TODO: This needs a way better handling approach for this, probably the Queue has to learn about this\n        queueDone();\n        return reject(new Error(errors.MESSAGES.ER_DEVAPI_SERVER_GONE_AWAY));\n      }\n\n      if (!self[message.id]) {\n        queueDone();\n        return reject(new Error(util.format(errors.ER_X_CLIENT_UNEXPECTED_PROTOCOL_MESSAGE, message.id)));\n      }\n\n      self[message.id](message.payload, queueDone);\n    };\n\n    queue.push(entry);\n    self.sendDirect(stream, buffer);\n  });\n};\n\nBaseHandler.prototype[notice.MESSAGE_ID] = function (payload) {\n  const inboundNotice = notice.deserialize(payload);\n  log.info('Notice.Frame', inboundNotice);\n\n  this._notices.push(inboundNotice);\n};\n/**\n * Common handler for errors.\n *\n * If a handler wants to handle these differently they can do by overriding\n *\n * @param message\n */\n\n\nBaseHandler.prototype[error.MESSAGE_ID] = function (payload, queueDone) {\n  queueDone();\n  const inboundError = error.deserialize(payload);\n  log.info('Error', inboundError);\n  const data = inboundError.toObject();\n  const err = new Error(data.msg);\n  err.info = data;\n\n  this._fail(err);\n};\n\nmodule.exports = BaseHandler;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/InboundHandlers/BaseHandler.js"],"names":["error","require","errors","notice","logger","util","log","BaseHandler","_resolve","_fail","_notices","prototype","sendDirect","stream","buffer","write","sendMessage","queue","self","Promise","resolve","reject","entry","message","queueDone","id","SERVER_GONE","Error","MESSAGES","ER_DEVAPI_SERVER_GONE_AWAY","format","ER_X_CLIENT_UNEXPECTED_PROTOCOL_MESSAGE","payload","push","MESSAGE_ID","inboundNotice","deserialize","info","inboundError","data","toObject","err","msg","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst error = require('../Wrappers/Messages/Error');\nconst errors = require('../../constants/errors');\nconst notice = require('../Wrappers/Messages/Notice/Frame');\nconst logger = require('../../logger');\nconst util = require('util');\n\nconst log = logger('protocol:inbound:Mysqlx');\n\n/**\n * Abstract prototype for a InboundHandler\n *\n * Each inherited object should add methods for the messages they want to handle. Common utility functions\n * are provided from here.\n *\n * @private\n * @constructor\n */\nfunction BaseHandler () {\n    this._resolve = null;\n    this._fail = null;\n    this._notices = [];\n}\n\n/**\n * Directly send a message to the server, without adding to the queue or returning a promise.\n *\n * @param stream {Stream}\n * @param buffer {Buffer} Ready packet, will be sent as is\n */\nBaseHandler.prototype.sendDirect = function (stream, buffer) {\n    stream.write(buffer);\n};\n\n/**\n * Quese the handler, creates our promise and sends the message\n * @param queue {WorkQueue}\n * @param stream {Stream}\n * @param buffer {Buffer} Ready packet, will be sent as is\n * @returns {Promise}\n */\nBaseHandler.prototype.sendMessage = function (queue, stream, buffer) {\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n        self._resolve = resolve;\n        self._fail = reject;\n\n        const entry = function (message, queueDone) {\n            if (message.id === error.SERVER_GONE) {\n                // TODO: This needs a way better handling approach for this, probably the Queue has to learn about this\n                queueDone();\n                return reject(new Error(errors.MESSAGES.ER_DEVAPI_SERVER_GONE_AWAY));\n            }\n\n            if (!self[message.id]) {\n                queueDone();\n                return reject(new Error(util.format(errors.ER_X_CLIENT_UNEXPECTED_PROTOCOL_MESSAGE, message.id)));\n            }\n\n            self[message.id](message.payload, queueDone);\n        };\n\n        queue.push(entry);\n        self.sendDirect(stream, buffer);\n    });\n};\n\nBaseHandler.prototype[notice.MESSAGE_ID] = function (payload) {\n    const inboundNotice = notice.deserialize(payload);\n    log.info('Notice.Frame', inboundNotice);\n\n    this._notices.push(inboundNotice);\n};\n\n/**\n * Common handler for errors.\n *\n * If a handler wants to handle these differently they can do by overriding\n *\n * @param message\n */\nBaseHandler.prototype[error.MESSAGE_ID] = function (payload, queueDone) {\n    queueDone();\n\n    const inboundError = error.deserialize(payload);\n    log.info('Error', inboundError);\n\n    const data = inboundError.toObject();\n    const err = new Error(data.msg);\n    err.info = data;\n\n    this._fail(err);\n};\n\nmodule.exports = BaseHandler;\n"]},"metadata":{},"sourceType":"script"}