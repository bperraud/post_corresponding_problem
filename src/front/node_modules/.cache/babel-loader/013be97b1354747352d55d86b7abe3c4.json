{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst parsers = {\n  addSubExpr: require('./addSubExpr'),\n  andExpr: require('./andExpr'),\n  argsList: require('./argsList'),\n  atomicExpr: require('./atomicExpr'),\n  bitExpr: require('./bitExpr'),\n  castOp: require('./castOp'),\n  castType: require('./castType'),\n  compExpr: require('./compExpr'),\n  expr: require('./expr'),\n  functionCall: require('./functionCall'),\n  groupedExpr: require('./groupedExpr'),\n  ident: require('./ident'),\n  ilriExpr: require('./ilriExpr'),\n  interval: require('./interval'),\n  intervalExpr: require('./intervalExpr'),\n  jsonArray: require('./jsonArray'),\n  jsonDoc: require('./jsonDoc'),\n  jsonKeyValue: require('./jsonKeyValue'),\n  lengthSpec: require('./lengthSpec'),\n  literal: require('./literal'),\n  orExpr: require('./orExpr'),\n  placeholder: require('./placeholder'),\n  mulDivExpr: require('./mulDivExpr'),\n  schemaQualifiedIdent: require('./schemaQualifiedIdent'),\n  shiftExpr: require('./shiftExpr'),\n  unaryOp: require('./unaryOp')\n};\n\nconst booleanExpressions = options => Object.keys(parsers).reduce((result, current) => {\n  return Object.assign({}, result, {\n    [current]: parsers[current].parser(options)\n  });\n}, {});\n\nbooleanExpressions.Type = Object.keys(parsers).reduce((result, current) => {\n  return Object.assign({}, result, {\n    [parsers[current].name]: current\n  });\n}, {});\nmodule.exports = booleanExpressions;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/ExprParser/lib/grammar/booleanExpressions/index.js"],"names":["parsers","addSubExpr","require","andExpr","argsList","atomicExpr","bitExpr","castOp","castType","compExpr","expr","functionCall","groupedExpr","ident","ilriExpr","interval","intervalExpr","jsonArray","jsonDoc","jsonKeyValue","lengthSpec","literal","orExpr","placeholder","mulDivExpr","schemaQualifiedIdent","shiftExpr","unaryOp","booleanExpressions","options","Object","keys","reduce","result","current","assign","parser","Type","name","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,OAAO,GAAG;AACZC,EAAAA,UAAU,EAAEC,OAAO,CAAC,cAAD,CADP;AAEZC,EAAAA,OAAO,EAAED,OAAO,CAAC,WAAD,CAFJ;AAGZE,EAAAA,QAAQ,EAAEF,OAAO,CAAC,YAAD,CAHL;AAIZG,EAAAA,UAAU,EAAEH,OAAO,CAAC,cAAD,CAJP;AAKZI,EAAAA,OAAO,EAAEJ,OAAO,CAAC,WAAD,CALJ;AAMZK,EAAAA,MAAM,EAAEL,OAAO,CAAC,UAAD,CANH;AAOZM,EAAAA,QAAQ,EAAEN,OAAO,CAAC,YAAD,CAPL;AAQZO,EAAAA,QAAQ,EAAEP,OAAO,CAAC,YAAD,CARL;AASZQ,EAAAA,IAAI,EAAER,OAAO,CAAC,QAAD,CATD;AAUZS,EAAAA,YAAY,EAAET,OAAO,CAAC,gBAAD,CAVT;AAWZU,EAAAA,WAAW,EAAEV,OAAO,CAAC,eAAD,CAXR;AAYZW,EAAAA,KAAK,EAAEX,OAAO,CAAC,SAAD,CAZF;AAaZY,EAAAA,QAAQ,EAAEZ,OAAO,CAAC,YAAD,CAbL;AAcZa,EAAAA,QAAQ,EAAEb,OAAO,CAAC,YAAD,CAdL;AAeZc,EAAAA,YAAY,EAAEd,OAAO,CAAC,gBAAD,CAfT;AAgBZe,EAAAA,SAAS,EAAEf,OAAO,CAAC,aAAD,CAhBN;AAiBZgB,EAAAA,OAAO,EAAEhB,OAAO,CAAC,WAAD,CAjBJ;AAkBZiB,EAAAA,YAAY,EAAEjB,OAAO,CAAC,gBAAD,CAlBT;AAmBZkB,EAAAA,UAAU,EAAElB,OAAO,CAAC,cAAD,CAnBP;AAoBZmB,EAAAA,OAAO,EAAEnB,OAAO,CAAC,WAAD,CApBJ;AAqBZoB,EAAAA,MAAM,EAAEpB,OAAO,CAAC,UAAD,CArBH;AAsBZqB,EAAAA,WAAW,EAAErB,OAAO,CAAC,eAAD,CAtBR;AAuBZsB,EAAAA,UAAU,EAAEtB,OAAO,CAAC,cAAD,CAvBP;AAwBZuB,EAAAA,oBAAoB,EAAEvB,OAAO,CAAC,wBAAD,CAxBjB;AAyBZwB,EAAAA,SAAS,EAAExB,OAAO,CAAC,aAAD,CAzBN;AA0BZyB,EAAAA,OAAO,EAAEzB,OAAO,CAAC,WAAD;AA1BJ,CAAhB;;AA6BA,MAAM0B,kBAAkB,GAAGC,OAAO,IAAIC,MAAM,CAACC,IAAP,CAAY/B,OAAZ,EAAqBgC,MAArB,CAA4B,CAACC,MAAD,EAASC,OAAT,KAAqB;AACnF,SAAOJ,MAAM,CAACK,MAAP,CAAc,EAAd,EAAkBF,MAAlB,EAA0B;AAAE,KAACC,OAAD,GAAWlC,OAAO,CAACkC,OAAD,CAAP,CAAiBE,MAAjB,CAAwBP,OAAxB;AAAb,GAA1B,CAAP;AACH,CAFqC,EAEnC,EAFmC,CAAtC;;AAIAD,kBAAkB,CAACS,IAAnB,GAA0BP,MAAM,CAACC,IAAP,CAAY/B,OAAZ,EAAqBgC,MAArB,CAA4B,CAACC,MAAD,EAASC,OAAT,KAAqB;AACvE,SAAOJ,MAAM,CAACK,MAAP,CAAc,EAAd,EAAkBF,MAAlB,EAA0B;AAAE,KAACjC,OAAO,CAACkC,OAAD,CAAP,CAAiBI,IAAlB,GAAyBJ;AAA3B,GAA1B,CAAP;AACH,CAFyB,EAEvB,EAFuB,CAA1B;AAIAK,MAAM,CAACC,OAAP,GAAiBZ,kBAAjB","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst parsers = {\n    addSubExpr: require('./addSubExpr'),\n    andExpr: require('./andExpr'),\n    argsList: require('./argsList'),\n    atomicExpr: require('./atomicExpr'),\n    bitExpr: require('./bitExpr'),\n    castOp: require('./castOp'),\n    castType: require('./castType'),\n    compExpr: require('./compExpr'),\n    expr: require('./expr'),\n    functionCall: require('./functionCall'),\n    groupedExpr: require('./groupedExpr'),\n    ident: require('./ident'),\n    ilriExpr: require('./ilriExpr'),\n    interval: require('./interval'),\n    intervalExpr: require('./intervalExpr'),\n    jsonArray: require('./jsonArray'),\n    jsonDoc: require('./jsonDoc'),\n    jsonKeyValue: require('./jsonKeyValue'),\n    lengthSpec: require('./lengthSpec'),\n    literal: require('./literal'),\n    orExpr: require('./orExpr'),\n    placeholder: require('./placeholder'),\n    mulDivExpr: require('./mulDivExpr'),\n    schemaQualifiedIdent: require('./schemaQualifiedIdent'),\n    shiftExpr: require('./shiftExpr'),\n    unaryOp: require('./unaryOp')\n};\n\nconst booleanExpressions = options => Object.keys(parsers).reduce((result, current) => {\n    return Object.assign({}, result, { [current]: parsers[current].parser(options) });\n}, {});\n\nbooleanExpressions.Type = Object.keys(parsers).reduce((result, current) => {\n    return Object.assign({}, result, { [parsers[current].name]: current });\n}, {});\n\nmodule.exports = booleanExpressions;\n"]},"metadata":{},"sourceType":"script"}