{"ast":null,"code":"/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst columnWrapper = require('./Util/columnWrapper');\n\nconst binding = require('./Binding');\n\nconst grouping = require('./Grouping');\n\nconst locking = require('./Locking');\n\nconst preparing = require('./Preparing');\n\nconst projecting = require('./Projecting');\n\nconst query = require('./Query');\n\nconst result = require('./RowResult');\n\nconst skipping = require('./Skipping');\n\nconst tableOrdering = require('./TableOrdering');\n\nconst category = query.Type.TABLE;\n/**\n * TableSelect factory.\n * @module TableSelect\n * @mixes Binding\n * @mixes Grouping\n * @mixes Locking\n * @mixes Skipping\n * @mixes Projecting\n * @mixes Query\n * @mixes TableOrdering\n */\n\n/**\n * @private\n * @alias module:TableSelect\n * @param {Connection} connection - database connection context\n * @param {module:Schema} schema - schema to bind\n * @param {string} tableTable - table name\n * @param {string[]} projections - projection expressions\n * @returns {module:TableSelect}\n */\n\nfunction TableSelect(connection, schema, tableName, projections) {\n  const state = {\n    category,\n    preparable: preparing({\n      connection\n    }),\n    schema,\n    tableName\n  };\n  const base = Object.assign({}, binding(state), grouping(state), locking(state), projecting({\n    projections\n  }), query(state), skipping(state), tableOrdering(state));\n  state.preparable = Object.assign({}, base, state.preparable);\n  return Object.assign({}, base, {\n    /**\n     * Row cursor.\n     * @callback module:TableSelect~rowCursor\n     * @param {Array.<*>} items - the list of column values for the row in the current cursor position\n     */\n\n    /**\n     * Metadata cursor.\n     * @callback module:TableSelect~metadataCursor\n     * @param {Array.<Object>} metadata - the list of objects containing metadata details for each column\n     */\n\n    /**\n     * Execute the find query.\n     * @function\n     * @name module:TableSelect#execute\n     * @param {module:TableSelect~rowCursor} [dataCursor]\n     * @param {module:TableSelect~metadataCursor} [metadataCursor]\n     * @return {Promise.<module:RowResult>}\n     */\n    execute(dataCursor, metadataCursor) {\n      // Before trying to send any message to the server, we need to\n      // check if the connection is open (has a client instance) or if\n      // it became idle in the meantime.\n      if (!connection.isOpen() || connection.isIdle()) {\n        // There is always a default error (ER_DEVAPI_CONNECTION_CLOSED).\n        return Promise.reject(connection.getError());\n      }\n\n      const fn = () => connection.getClient().crudFind(this, dataCursor, columnWrapper(metadataCursor));\n\n      return state.preparable.execute(fn, dataCursor, columnWrapper(metadataCursor)).then(details => result(details));\n    }\n\n  });\n}\n\nmodule.exports = TableSelect;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/TableSelect.js"],"names":["columnWrapper","require","binding","grouping","locking","preparing","projecting","query","result","skipping","tableOrdering","category","Type","TABLE","TableSelect","connection","schema","tableName","projections","state","preparable","base","Object","assign","execute","dataCursor","metadataCursor","isOpen","isIdle","Promise","reject","getError","fn","getClient","crudFind","then","details","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst columnWrapper = require('./Util/columnWrapper');\nconst binding = require('./Binding');\nconst grouping = require('./Grouping');\nconst locking = require('./Locking');\nconst preparing = require('./Preparing');\nconst projecting = require('./Projecting');\nconst query = require('./Query');\nconst result = require('./RowResult');\nconst skipping = require('./Skipping');\nconst tableOrdering = require('./TableOrdering');\n\nconst category = query.Type.TABLE;\n\n/**\n * TableSelect factory.\n * @module TableSelect\n * @mixes Binding\n * @mixes Grouping\n * @mixes Locking\n * @mixes Skipping\n * @mixes Projecting\n * @mixes Query\n * @mixes TableOrdering\n */\n\n/**\n * @private\n * @alias module:TableSelect\n * @param {Connection} connection - database connection context\n * @param {module:Schema} schema - schema to bind\n * @param {string} tableTable - table name\n * @param {string[]} projections - projection expressions\n * @returns {module:TableSelect}\n */\nfunction TableSelect (connection, schema, tableName, projections) {\n    const state = { category, preparable: preparing({ connection }), schema, tableName };\n    const base = Object.assign({}, binding(state), grouping(state), locking(state), projecting({ projections }), query(state), skipping(state), tableOrdering(state));\n\n    state.preparable = Object.assign({}, base, state.preparable);\n\n    return Object.assign({}, base, {\n        /**\n         * Row cursor.\n         * @callback module:TableSelect~rowCursor\n         * @param {Array.<*>} items - the list of column values for the row in the current cursor position\n         */\n\n        /**\n         * Metadata cursor.\n         * @callback module:TableSelect~metadataCursor\n         * @param {Array.<Object>} metadata - the list of objects containing metadata details for each column\n         */\n\n        /**\n         * Execute the find query.\n         * @function\n         * @name module:TableSelect#execute\n         * @param {module:TableSelect~rowCursor} [dataCursor]\n         * @param {module:TableSelect~metadataCursor} [metadataCursor]\n         * @return {Promise.<module:RowResult>}\n         */\n        execute (dataCursor, metadataCursor) {\n            // Before trying to send any message to the server, we need to\n            // check if the connection is open (has a client instance) or if\n            // it became idle in the meantime.\n            if (!connection.isOpen() || connection.isIdle()) {\n                // There is always a default error (ER_DEVAPI_CONNECTION_CLOSED).\n                return Promise.reject(connection.getError());\n            }\n\n            const fn = () => connection.getClient().crudFind(this, dataCursor, columnWrapper(metadataCursor));\n\n            return state.preparable.execute(fn, dataCursor, columnWrapper(metadataCursor))\n                .then(details => result(details));\n        }\n    });\n}\n\nmodule.exports = TableSelect;\n"]},"metadata":{},"sourceType":"script"}