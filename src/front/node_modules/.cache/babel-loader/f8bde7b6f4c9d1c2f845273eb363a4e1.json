{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst errors = require('../../../constants/errors');\n\nconst parseAddressList = require('./parseAddressList');\n\nconst parseAuthenticationMechanism = require('./parseAuthenticationMechanism');\n\nconst parseConnectTimeout = require('./parseConnectTimeout');\n\nconst parseSchema = require('./parseSchema');\n\nconst parseSecurityOptions = require('./parseSecurityOptions');\n\nconst parseUserInfo = require('./parseUserInfo');\n\nconst parseConnectionAttributes = require('./parseConnectionAttributes');\n\nconst util = require('util');\n/**\n * URI parser.\n * @private\n * @module lib/DevAPI/URIParser\n */\n\n\nmodule.exports = parse;\n/**\n * Parse a mysqlx-specific connection URI.\n * @private\n * @param {string} input - connection URI\n * @throws {Error} When the URI is not valid.\n * @returns {URI} Object containing the connection properties.\n */\n\nfunction parse(input) {\n  const base = input.trim().match(/^(([^+:]+)\\+?([^:]+)?:\\/\\/)?([^?]+)(\\?.*)?$/) || []; // Bare-minimum requirements: host\n\n  if (!base[4]) {\n    throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_CONNECTION_STRING_FORMAT);\n  }\n\n  const scheme = base[2];\n  const extension = base[3];\n\n  if (typeof extension !== 'undefined' && extension !== 'srv') {\n    throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_BAD_CONNECTION_STRING_SCHEME, `${scheme}+${extension}`));\n  }\n\n  const authoritySegmentPattern = /^([^@]+@)?(.+)/;\n  const authoritySegment = base[4].trim().match(authoritySegmentPattern);\n  const userinfo = parseUserInfo(authoritySegment[1]);\n  const tls = parseSecurityOptions(base[5]);\n  const targetSegmentPattern = /^\\(([^)]+)\\)(\\/.+)?|([^/]+)(\\/(.+))?/;\n  const targetSegment = authoritySegment[2].trim().match(targetSegmentPattern); // `addressSegment` is guaranteed by previous regular expressions.\n\n  const addressSegment = targetSegment[1] || targetSegment[3];\n  const schemaSegment = targetSegment[2] || targetSegment[4];\n  return {\n    auth: parseAuthenticationMechanism(base[5]),\n    connectTimeout: parseConnectTimeout(base[5]),\n    connectionAttributes: parseConnectionAttributes(base[5]),\n    endpoints: parseAddressList(addressSegment),\n    password: userinfo.password,\n    resolveSrv: extension === 'srv',\n    schema: parseSchema(schemaSegment),\n    tls,\n    user: userinfo.username\n  };\n}","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/Util/URIParser/index.js"],"names":["errors","require","parseAddressList","parseAuthenticationMechanism","parseConnectTimeout","parseSchema","parseSecurityOptions","parseUserInfo","parseConnectionAttributes","util","module","exports","parse","input","base","trim","match","Error","MESSAGES","ER_DEVAPI_BAD_CONNECTION_STRING_FORMAT","scheme","extension","format","ER_DEVAPI_BAD_CONNECTION_STRING_SCHEME","authoritySegmentPattern","authoritySegment","userinfo","tls","targetSegmentPattern","targetSegment","addressSegment","schemaSegment","auth","connectTimeout","connectionAttributes","endpoints","password","resolveSrv","schema","user","username"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst errors = require('../../../constants/errors');\nconst parseAddressList = require('./parseAddressList');\nconst parseAuthenticationMechanism = require('./parseAuthenticationMechanism');\nconst parseConnectTimeout = require('./parseConnectTimeout');\nconst parseSchema = require('./parseSchema');\nconst parseSecurityOptions = require('./parseSecurityOptions');\nconst parseUserInfo = require('./parseUserInfo');\nconst parseConnectionAttributes = require('./parseConnectionAttributes');\nconst util = require('util');\n\n/**\n * URI parser.\n * @private\n * @module lib/DevAPI/URIParser\n */\n\nmodule.exports = parse;\n\n/**\n * Parse a mysqlx-specific connection URI.\n * @private\n * @param {string} input - connection URI\n * @throws {Error} When the URI is not valid.\n * @returns {URI} Object containing the connection properties.\n */\nfunction parse (input) {\n    const base = input.trim().match(/^(([^+:]+)\\+?([^:]+)?:\\/\\/)?([^?]+)(\\?.*)?$/) || [];\n\n    // Bare-minimum requirements: host\n    if (!base[4]) {\n        throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_CONNECTION_STRING_FORMAT);\n    }\n\n    const scheme = base[2];\n    const extension = base[3];\n\n    if (typeof extension !== 'undefined' && extension !== 'srv') {\n        throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_BAD_CONNECTION_STRING_SCHEME, `${scheme}+${extension}`));\n    }\n\n    const authoritySegmentPattern = /^([^@]+@)?(.+)/;\n    const authoritySegment = base[4].trim().match(authoritySegmentPattern);\n\n    const userinfo = parseUserInfo(authoritySegment[1]);\n    const tls = parseSecurityOptions(base[5]);\n\n    const targetSegmentPattern = /^\\(([^)]+)\\)(\\/.+)?|([^/]+)(\\/(.+))?/;\n    const targetSegment = authoritySegment[2].trim().match(targetSegmentPattern);\n\n    // `addressSegment` is guaranteed by previous regular expressions.\n    const addressSegment = targetSegment[1] || targetSegment[3];\n    const schemaSegment = targetSegment[2] || targetSegment[4];\n\n    return {\n        auth: parseAuthenticationMechanism(base[5]),\n        connectTimeout: parseConnectTimeout(base[5]),\n        connectionAttributes: parseConnectionAttributes(base[5]),\n        endpoints: parseAddressList(addressSegment),\n        password: userinfo.password,\n        resolveSrv: extension === 'srv',\n        schema: parseSchema(schemaSegment),\n        tls,\n        user: userinfo.username\n    };\n}\n"]},"metadata":{},"sourceType":"script"}