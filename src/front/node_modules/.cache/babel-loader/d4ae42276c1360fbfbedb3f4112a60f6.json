{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst errors = require('../../../constants/errors'); // TODO(Rui): Add additional query validation constraints.\n\n\nmodule.exports = parse;\n/**\n * Parse all querystring parameters.\n * @private\n * @param {string} input - URI querystring\n * @param {options} [options]\n * @returns {Object} Dictionary containing each querystring property and respective value.\n */\n\nfunction parse(input, options) {\n  options = Object.assign({\n    allowDuplicates: true,\n    ignoreCase: []\n  }, options); // TODO(Rui): use default agument values on node >= 6.0.0\n\n  const match = (input || '').trim().match(/[^&]+/g) || [];\n  return match.reduce((result, input) => {\n    // const pair = parseKeyValuePair(input, { ignoreCase: options.ignoreCase });\n    const pair = parseKeyValuePair(input, options);\n    const isDuplicate = Object.keys(result).indexOf(Object.keys(pair)[0]) > -1;\n\n    if (isDuplicate && !options.allowDuplicates) {\n      throw new Error(errors.MESSAGES.ER_DEVAPI_DUPLICATE_CONNECTION_OPTION);\n    }\n\n    return Object.assign(result, pair);\n  }, {});\n}\n/**\n * Parse individual parameters.\n * @private\n * @param {string} input - querystring assignment\n * @param {Object} [options]\n */\n\n\nfunction parseKeyValuePair(input, options) {\n  options = Object.assign({\n    ignoreCase: []\n  }, options);\n  const match = input.trim().match(/^([^=]+)(=(.*))?$/);\n  const key = (match[1] || '').toLowerCase();\n  const value = match[3] || '';\n  const toIgnore = options.ignoreCase.map(key => key.toLowerCase());\n\n  if (toIgnore.indexOf(key) === -1) {\n    return {\n      [key]: decode(value, options)\n    };\n  }\n\n  return {\n    [key]: decode(value.toLowerCase(), options)\n  };\n}\n/**\n * Decode url-encoded values.\n * @private\n */\n\n\nfunction decode(input, options) {\n  options = Object.assign({\n    pctEncoded: false\n  }, options);\n\n  if (options.pctEncoded) {\n    return decodeURIComponent(input);\n  }\n\n  const match = (input || '').trim().match(/\\(?([^)]*)/);\n  return decodeURIComponent(match[1]);\n}","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/Util/URIParser/parseQueryParameters.js"],"names":["errors","require","module","exports","parse","input","options","Object","assign","allowDuplicates","ignoreCase","match","trim","reduce","result","pair","parseKeyValuePair","isDuplicate","keys","indexOf","Error","MESSAGES","ER_DEVAPI_DUPLICATE_CONNECTION_OPTION","key","toLowerCase","value","toIgnore","map","decode","pctEncoded","decodeURIComponent"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst errors = require('../../../constants/errors');\n\n// TODO(Rui): Add additional query validation constraints.\nmodule.exports = parse;\n\n/**\n * Parse all querystring parameters.\n * @private\n * @param {string} input - URI querystring\n * @param {options} [options]\n * @returns {Object} Dictionary containing each querystring property and respective value.\n */\nfunction parse (input, options) {\n    options = Object.assign({ allowDuplicates: true, ignoreCase: [] }, options);\n\n    // TODO(Rui): use default agument values on node >= 6.0.0\n    const match = (input || '').trim().match(/[^&]+/g) || [];\n\n    return match.reduce((result, input) => {\n        // const pair = parseKeyValuePair(input, { ignoreCase: options.ignoreCase });\n        const pair = parseKeyValuePair(input, options);\n        const isDuplicate = Object.keys(result).indexOf(Object.keys(pair)[0]) > -1;\n\n        if (isDuplicate && !options.allowDuplicates) {\n            throw new Error(errors.MESSAGES.ER_DEVAPI_DUPLICATE_CONNECTION_OPTION);\n        }\n\n        return Object.assign(result, pair);\n    }, {});\n}\n\n/**\n * Parse individual parameters.\n * @private\n * @param {string} input - querystring assignment\n * @param {Object} [options]\n */\nfunction parseKeyValuePair (input, options) {\n    options = Object.assign({ ignoreCase: [] }, options);\n\n    const match = input.trim().match(/^([^=]+)(=(.*))?$/);\n    const key = (match[1] || '').toLowerCase();\n    const value = match[3] || '';\n\n    const toIgnore = options.ignoreCase.map(key => key.toLowerCase());\n\n    if (toIgnore.indexOf(key) === -1) {\n        return { [key]: decode(value, options) };\n    }\n\n    return { [key]: decode(value.toLowerCase(), options) };\n}\n\n/**\n * Decode url-encoded values.\n * @private\n */\nfunction decode (input, options) {\n    options = Object.assign({ pctEncoded: false }, options);\n\n    if (options.pctEncoded) {\n        return decodeURIComponent(input);\n    }\n\n    const match = (input || '').trim().match(/\\(?([^)]*)/);\n\n    return decodeURIComponent(match[1]);\n}\n"]},"metadata":{},"sourceType":"script"}