{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst Expr = require('../../../../Protocol/Stubs/mysqlx_expr_pb');\n\nconst Pa = require('parsimmon');\n\nconst parser = options => r => Pa.seq(Pa.string('['), Pa.optWhitespace, Pa.seq(r.expr.map(data => data.output), Pa.seq(Pa.optWhitespace, Pa.string(','), Pa.optWhitespace, r.expr.map(data => data.output)).map(data => data[3]).many()).map(data => [data[0]].concat(data[1])).atMost(1).map(data => data[0]), Pa.optWhitespace, Pa.string(']')).map(data => {\n  const array = new Expr.Array();\n  const items = data[2] || [];\n  items.forEach(any => {\n    array.addValue(any);\n  });\n  const expr = new Expr.Expr();\n  expr.setType(Expr.Expr.Type.ARRAY);\n  expr.setArray(array);\n  return expr;\n});\n\nmodule.exports = {\n  name: 'JSON_ARRAY',\n  parser\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/ExprParser/lib/grammar/booleanExpressions/jsonArray.js"],"names":["Expr","require","Pa","parser","options","r","seq","string","optWhitespace","expr","map","data","output","many","concat","atMost","array","Array","items","forEach","any","addValue","setType","Type","ARRAY","setArray","module","exports","name"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,2CAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,WAAD,CAAlB;;AAEA,MAAME,MAAM,GAAGC,OAAO,IAAIC,CAAC,IAAIH,EAAE,CAC5BI,GAD0B,CAEvBJ,EAAE,CAACK,MAAH,CAAU,GAAV,CAFuB,EAGvBL,EAAE,CAACM,aAHoB,EAIvBN,EAAE,CACGI,GADL,CAEQD,CAAC,CAACI,IAAF,CAAOC,GAAP,CAAWC,IAAI,IAAIA,IAAI,CAACC,MAAxB,CAFR,EAGQV,EAAE,CACGI,GADL,CACSJ,EAAE,CAACM,aADZ,EAC2BN,EAAE,CAACK,MAAH,CAAU,GAAV,CAD3B,EAC2CL,EAAE,CAACM,aAD9C,EAC6DH,CAAC,CAACI,IAAF,CAAOC,GAAP,CAAWC,IAAI,IAAIA,IAAI,CAACC,MAAxB,CAD7D,EAEKF,GAFL,CAESC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAFrB,EAGKE,IAHL,EAHR,EAQKH,GARL,CAQSC,IAAI,IAAI,CAACA,IAAI,CAAC,CAAD,CAAL,EAAUG,MAAV,CAAiBH,IAAI,CAAC,CAAD,CAArB,CARjB,EASKI,MATL,CASY,CATZ,EAUKL,GAVL,CAUSC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAVrB,CAJuB,EAevBT,EAAE,CAACM,aAfoB,EAgBvBN,EAAE,CAACK,MAAH,CAAU,GAAV,CAhBuB,EAkB1BG,GAlB0B,CAkBtBC,IAAI,IAAI;AACT,QAAMK,KAAK,GAAG,IAAIhB,IAAI,CAACiB,KAAT,EAAd;AACA,QAAMC,KAAK,GAAGP,IAAI,CAAC,CAAD,CAAJ,IAAW,EAAzB;AAEAO,EAAAA,KAAK,CAACC,OAAN,CAAcC,GAAG,IAAI;AACjBJ,IAAAA,KAAK,CAACK,QAAN,CAAeD,GAAf;AACH,GAFD;AAIA,QAAMX,IAAI,GAAG,IAAIT,IAAI,CAACA,IAAT,EAAb;AACAS,EAAAA,IAAI,CAACa,OAAL,CAAatB,IAAI,CAACA,IAAL,CAAUuB,IAAV,CAAeC,KAA5B;AACAf,EAAAA,IAAI,CAACgB,QAAL,CAAcT,KAAd;AAEA,SAAOP,IAAP;AACH,CA/B0B,CAA/B;;AAiCAiB,MAAM,CAACC,OAAP,GAAiB;AAAEC,EAAAA,IAAI,EAAE,YAAR;AAAsBzB,EAAAA;AAAtB,CAAjB","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst Expr = require('../../../../Protocol/Stubs/mysqlx_expr_pb');\nconst Pa = require('parsimmon');\n\nconst parser = options => r => Pa\n    .seq(\n        Pa.string('['),\n        Pa.optWhitespace,\n        Pa\n            .seq(\n                r.expr.map(data => data.output),\n                Pa\n                    .seq(Pa.optWhitespace, Pa.string(','), Pa.optWhitespace, r.expr.map(data => data.output))\n                    .map(data => data[3])\n                    .many()\n            )\n            .map(data => [data[0]].concat(data[1]))\n            .atMost(1)\n            .map(data => data[0]),\n        Pa.optWhitespace,\n        Pa.string(']')\n    )\n    .map(data => {\n        const array = new Expr.Array();\n        const items = data[2] || [];\n\n        items.forEach(any => {\n            array.addValue(any);\n        });\n\n        const expr = new Expr.Expr();\n        expr.setType(Expr.Expr.Type.ARRAY);\n        expr.setArray(array);\n\n        return expr;\n    });\n\nmodule.exports = { name: 'JSON_ARRAY', parser };\n"]},"metadata":{},"sourceType":"script"}