{"ast":null,"code":"/*\n * Copyright (c) 2016, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst baseResult = require('./BaseResult');\n\nconst logger = require('../logger');\n\nconst warnings = require('../constants/warnings');\n\nconst log = logger('api:result');\n/**\n * Result set object returned by each database operation.\n * @module Result\n * @mixes module:BaseResult\n */\n\n/**\n * @private\n * @alias module:Result\n * @param {Object} state - result details\n * @returns {module:Result}\n */\n\nfunction Result(state) {\n  state = Object.assign({\n    generatedDocumentIds: [],\n    rowsAffected: 0\n  }, state);\n  return Object.assign({}, baseResult(state), {\n    /**\n     * Retrieve the number of documents affected by the operation.\n     * @function\n     * @name module:Result#getAffectedItemsCount\n     * @returns {number} The number of documents.\n     */\n    getAffectedItemsCount() {\n      return state.rowsAffected;\n    },\n\n    /**\n     * Retrieve the number of rows affected by the operation.\n     * @function\n     * @name module:Result#getAffectedRowsCount\n     * @returns {number} The number of rows.\n     * @deprecated since version 8.0.19. Will be removed in future versions. Use {@link module:Result#getAffectedItemsCount|Result.getAffectedItemsCount()} instead.\n     */\n    getAffectedRowsCount() {\n      log.warning('getAffectedRowsCount', warnings.MESSAGES.WARN_DEPRECATED_RESULT_GET_AFFECTED_ROWS_COUNT, {\n        type: warnings.TYPES.DEPRECATION,\n        code: warnings.CODES.DEPRECATION\n      });\n      return state.rowsAffected;\n    },\n\n    /**\n     * Retrieve the first <code>AUTO INCREMENT</code> value generated by the operation.\n     * @function\n     * @name module:Result#getAutoIncrementValue\n     * @returns {number} The first value.\n     */\n    getAutoIncrementValue() {\n      return state.generatedInsertId;\n    },\n\n    /**\n     * Retrieve the list of server-side generated document ids.\n     * @function\n     * @name module:Result#getGeneratedIds\n     * @returns {string[]} The list of ids.\n     */\n    getGeneratedIds() {\n      // ids are encoded as V_OCTETS and should be decoded as utf8 strings\n      return state.generatedDocumentIds.map(v => v.toString());\n    }\n\n  });\n}\n\nmodule.exports = Result;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/Result.js"],"names":["baseResult","require","logger","warnings","log","Result","state","Object","assign","generatedDocumentIds","rowsAffected","getAffectedItemsCount","getAffectedRowsCount","warning","MESSAGES","WARN_DEPRECATED_RESULT_GET_AFFECTED_ROWS_COUNT","type","TYPES","DEPRECATION","code","CODES","getAutoIncrementValue","generatedInsertId","getGeneratedIds","map","v","toString","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,uBAAD,CAAxB;;AAEA,MAAMG,GAAG,GAAGF,MAAM,CAAC,YAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASG,MAAT,CAAiBC,KAAjB,EAAwB;AACpBA,EAAAA,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,oBAAoB,EAAE,EAAxB;AAA4BC,IAAAA,YAAY,EAAE;AAA1C,GAAd,EAA6DJ,KAA7D,CAAR;AAEA,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,UAAU,CAACM,KAAD,CAA5B,EAAqC;AACxC;AACR;AACA;AACA;AACA;AACA;AACQK,IAAAA,qBAAqB,GAAI;AACrB,aAAOL,KAAK,CAACI,YAAb;AACH,KATuC;;AAWxC;AACR;AACA;AACA;AACA;AACA;AACA;AACQE,IAAAA,oBAAoB,GAAI;AACpBR,MAAAA,GAAG,CAACS,OAAJ,CAAY,sBAAZ,EAAoCV,QAAQ,CAACW,QAAT,CAAkBC,8CAAtD,EAAsG;AAClGC,QAAAA,IAAI,EAAEb,QAAQ,CAACc,KAAT,CAAeC,WAD6E;AAElGC,QAAAA,IAAI,EAAEhB,QAAQ,CAACiB,KAAT,CAAeF;AAF6E,OAAtG;AAKA,aAAOZ,KAAK,CAACI,YAAb;AACH,KAzBuC;;AA2BxC;AACR;AACA;AACA;AACA;AACA;AACQW,IAAAA,qBAAqB,GAAI;AACrB,aAAOf,KAAK,CAACgB,iBAAb;AACH,KAnCuC;;AAqCxC;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,eAAe,GAAI;AACf;AACA,aAAOjB,KAAK,CAACG,oBAAN,CAA2Be,GAA3B,CAA+BC,CAAC,IAAIA,CAAC,CAACC,QAAF,EAApC,CAAP;AACH;;AA9CuC,GAArC,CAAP;AAgDH;;AAEDC,MAAM,CAACC,OAAP,GAAiBvB,MAAjB","sourcesContent":["/*\n * Copyright (c) 2016, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst baseResult = require('./BaseResult');\nconst logger = require('../logger');\nconst warnings = require('../constants/warnings');\n\nconst log = logger('api:result');\n\n/**\n * Result set object returned by each database operation.\n * @module Result\n * @mixes module:BaseResult\n */\n\n/**\n * @private\n * @alias module:Result\n * @param {Object} state - result details\n * @returns {module:Result}\n */\nfunction Result (state) {\n    state = Object.assign({ generatedDocumentIds: [], rowsAffected: 0 }, state);\n\n    return Object.assign({}, baseResult(state), {\n        /**\n         * Retrieve the number of documents affected by the operation.\n         * @function\n         * @name module:Result#getAffectedItemsCount\n         * @returns {number} The number of documents.\n         */\n        getAffectedItemsCount () {\n            return state.rowsAffected;\n        },\n\n        /**\n         * Retrieve the number of rows affected by the operation.\n         * @function\n         * @name module:Result#getAffectedRowsCount\n         * @returns {number} The number of rows.\n         * @deprecated since version 8.0.19. Will be removed in future versions. Use {@link module:Result#getAffectedItemsCount|Result.getAffectedItemsCount()} instead.\n         */\n        getAffectedRowsCount () {\n            log.warning('getAffectedRowsCount', warnings.MESSAGES.WARN_DEPRECATED_RESULT_GET_AFFECTED_ROWS_COUNT, {\n                type: warnings.TYPES.DEPRECATION,\n                code: warnings.CODES.DEPRECATION\n            });\n\n            return state.rowsAffected;\n        },\n\n        /**\n         * Retrieve the first <code>AUTO INCREMENT</code> value generated by the operation.\n         * @function\n         * @name module:Result#getAutoIncrementValue\n         * @returns {number} The first value.\n         */\n        getAutoIncrementValue () {\n            return state.generatedInsertId;\n        },\n\n        /**\n         * Retrieve the list of server-side generated document ids.\n         * @function\n         * @name module:Result#getGeneratedIds\n         * @returns {string[]} The list of ids.\n         */\n        getGeneratedIds () {\n            // ids are encoded as V_OCTETS and should be decoded as utf8 strings\n            return state.generatedDocumentIds.map(v => v.toString());\n        }\n    });\n}\n\nmodule.exports = Result;\n"]},"metadata":{},"sourceType":"script"}