{"ast":null,"code":"/*\n * Copyright (c) 2018, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst columnWrapper = require('./Util/columnWrapper');\n\nconst logger = require('../logger');\n\nconst parseFlexibleParamList = require('./Util/parseFlexibleParamList');\n\nconst statement = require('./Statement');\n\nconst result = require('./SqlResult');\n\nconst warnings = require('../constants/warnings');\n\nconst log = logger('api:session:sql');\n/**\n * SqlExecute factory.\n * @module SqlExecute\n * @mixes Statement\n */\n\n/**\n * @private\n * @alias module:SqlExecute\n * @param {Connection} connection - database connection context\n * @param {string} raw - SQL statement\n * @param {Array.<*>} args - placeholder assignments\n * @param {Type} namespace - MySQL protocol namespace\n * @returns {SqlExecute}\n */\n\nfunction SqlExecute(connection, raw, args, namespace) {\n  return Object.assign({}, statement({\n    args: args || [],\n    raw,\n    namespace: namespace || statement.Type.CLASSIC\n  }), {\n    /**\n     * Bind values to ordinal query placeholders.\n     * @function\n     * @name module:SqlExecute#bind\n     * @param {string|string[]} values - one or more values to bind\n     * @example\n     * // values as arguments\n     * const query = session.sql('SELECT FROM person WHERE name = ? AND age = ?').bind('foo', 23)\n     *\n     * // values as a single array argument\n     * const query = session.sql('SELECT FROM person WHERE name = ? AND age = ?').bind(['foo', 23])\n     * @returns {module:SqlExecute} The query instance.\n     */\n    bind() {\n      return this.addArgs(parseFlexibleParamList(Array.prototype.slice.call(arguments)));\n    },\n\n    /**\n     * Row cursor.\n     * @callback module:SqlExecute~rowCursor\n     * @param {Array.<*>} items - the list of column values for the row in the current cursor position\n     */\n\n    /**\n     * Metadata cursor.\n     * @callback module:SqlExecute~metadataCursor\n     * @param {Array.<Object>} metadata - the list of objects containing metadata details for each column\n     */\n\n    /**\n     * Execute a raw SQL query.\n     * @function\n     * @name module:SqlExecute#execute\n     * @param {module:SqlExecute~rowCursor} rowcb - Callback function to handle results, or an object with both callback functions.\n     * @param {module:SqlExecute~metadataCursor} [metacb] - Callback function to handle metadata.\n     * @example\n     * // provide only a callback to handle results\n     * query.execute(result => {})\n     * query.execute({ result () {} })\n     *\n     * // provide only a callback to handle metadata\n     * query.execute({ meta () {} })\n     *\n     * // provide callbacks to handle results and metadata\n     * query.execute(result => {}, meta => {})\n     * query.execute({ result () {}, meta () {} })\n     * @returns {Promise<module:SqlResult>}\n     */\n    execute() {\n      // The object syntax is not supported neither by the TableSelect\n      // API nor any other connector, so we are deprecating it.\n      if (typeof arguments[0] === 'object') {\n        log.warning('execute', warnings.MESSAGES.WARN_DEPRECATED_EXECUTE_CURSOR_OBJECT, {\n          type: warnings.TYPES.DEPRECATION,\n          code: warnings.CODES.DEPRECATION\n        });\n      } // TODO(Rui): use default values after upgrading the node.js engine to a later major version.\n\n\n      const rowcb = arguments[0] && typeof arguments[0] === 'object' ? arguments[0].row : arguments[0];\n      const metacb = arguments[0] && typeof arguments[0] === 'object' ? columnWrapper(arguments[0].meta) : columnWrapper(arguments[1]); // Before trying to send any message to the server, we need to\n      // check if the connection is open (has a client instance) or if\n      // it became idle in the meantime.\n\n      if (!connection.isOpen() || connection.isIdle()) {\n        // There is always a default error (ER_DEVAPI_CONNECTION_CLOSED).\n        return Promise.reject(connection.getError());\n      }\n\n      return connection.getClient().sqlStmtExecute(this, rowcb, metacb).then(details => {\n        // We want to be able to reuse the statements and execute\n        // them either with the same or with different placeholder\n        // values. For that, we need to freeze the statement, in\n        // order to ensure that new placeholder values will\n        // replace old ones when it is executed again. Otherwise,\n        // if we keep adding new values to the same statement\n        // instance, the server (X Plugin) will report a 5015\n        // (\"Too many arguments\") error.\n        this.freeze();\n        return result(details);\n      });\n    }\n\n  });\n}\n/**\n * MySQL protocol namespace.\n * @type {Type}\n * @const\n */\n\n\nSqlExecute.Namespace = statement.Type;\nmodule.exports = SqlExecute;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/SqlExecute.js"],"names":["columnWrapper","require","logger","parseFlexibleParamList","statement","result","warnings","log","SqlExecute","connection","raw","args","namespace","Object","assign","Type","CLASSIC","bind","addArgs","Array","prototype","slice","call","arguments","execute","warning","MESSAGES","WARN_DEPRECATED_EXECUTE_CURSOR_OBJECT","type","TYPES","DEPRECATION","code","CODES","rowcb","row","metacb","meta","isOpen","isIdle","Promise","reject","getError","getClient","sqlStmtExecute","then","details","freeze","Namespace","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,sBAAD,CAA7B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAME,sBAAsB,GAAGF,OAAO,CAAC,+BAAD,CAAtC;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,aAAD,CAAtB;;AACA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,uBAAD,CAAxB;;AAEA,MAAMM,GAAG,GAAGL,MAAM,CAAC,iBAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASM,UAAT,CAAqBC,UAArB,EAAiCC,GAAjC,EAAsCC,IAAtC,EAA4CC,SAA5C,EAAuD;AACnD,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,SAAS,CAAC;AAAEO,IAAAA,IAAI,EAAEA,IAAI,IAAI,EAAhB;AAAoBD,IAAAA,GAApB;AAAyBE,IAAAA,SAAS,EAAEA,SAAS,IAAIR,SAAS,CAACW,IAAV,CAAeC;AAAhE,GAAD,CAA3B,EAAwG;AAC3G;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,IAAI,GAAI;AACJ,aAAO,KAAKC,OAAL,CAAaf,sBAAsB,CAACgB,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAD,CAAnC,CAAP;AACH,KAhB0G;;AAkB3G;AACR;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,OAAO,GAAI;AACP;AACA;AACA,UAAI,OAAOD,SAAS,CAAC,CAAD,CAAhB,KAAwB,QAA5B,EAAsC;AAClChB,QAAAA,GAAG,CAACkB,OAAJ,CAAY,SAAZ,EAAuBnB,QAAQ,CAACoB,QAAT,CAAkBC,qCAAzC,EAAgF;AAC5EC,UAAAA,IAAI,EAAEtB,QAAQ,CAACuB,KAAT,CAAeC,WADuD;AAE5EC,UAAAA,IAAI,EAAEzB,QAAQ,CAAC0B,KAAT,CAAeF;AAFuD,SAAhF;AAIH,OARM,CAUP;;;AACA,YAAMG,KAAK,GAAGV,SAAS,CAAC,CAAD,CAAT,IAAgB,OAAOA,SAAS,CAAC,CAAD,CAAhB,KAAwB,QAAxC,GACRA,SAAS,CAAC,CAAD,CAAT,CAAaW,GADL,GAERX,SAAS,CAAC,CAAD,CAFf;AAGA,YAAMY,MAAM,GAAGZ,SAAS,CAAC,CAAD,CAAT,IAAgB,OAAOA,SAAS,CAAC,CAAD,CAAhB,KAAwB,QAAxC,GACTvB,aAAa,CAACuB,SAAS,CAAC,CAAD,CAAT,CAAaa,IAAd,CADJ,GAETpC,aAAa,CAACuB,SAAS,CAAC,CAAD,CAAV,CAFnB,CAdO,CAkBP;AACA;AACA;;AACA,UAAI,CAACd,UAAU,CAAC4B,MAAX,EAAD,IAAwB5B,UAAU,CAAC6B,MAAX,EAA5B,EAAiD;AAC7C;AACA,eAAOC,OAAO,CAACC,MAAR,CAAe/B,UAAU,CAACgC,QAAX,EAAf,CAAP;AACH;;AAED,aAAOhC,UAAU,CAACiC,SAAX,GAAuBC,cAAvB,CAAsC,IAAtC,EAA4CV,KAA5C,EAAmDE,MAAnD,EACFS,IADE,CACGC,OAAO,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAKC,MAAL;AAEA,eAAOzC,MAAM,CAACwC,OAAD,CAAb;AACH,OAbE,CAAP;AAcH;;AAzF0G,GAAxG,CAAP;AA2FH;AAED;AACA;AACA;AACA;AACA;;;AACArC,UAAU,CAACuC,SAAX,GAAuB3C,SAAS,CAACW,IAAjC;AAEAiC,MAAM,CAACC,OAAP,GAAiBzC,UAAjB","sourcesContent":["/*\n * Copyright (c) 2018, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst columnWrapper = require('./Util/columnWrapper');\nconst logger = require('../logger');\nconst parseFlexibleParamList = require('./Util/parseFlexibleParamList');\nconst statement = require('./Statement');\nconst result = require('./SqlResult');\nconst warnings = require('../constants/warnings');\n\nconst log = logger('api:session:sql');\n\n/**\n * SqlExecute factory.\n * @module SqlExecute\n * @mixes Statement\n */\n\n/**\n * @private\n * @alias module:SqlExecute\n * @param {Connection} connection - database connection context\n * @param {string} raw - SQL statement\n * @param {Array.<*>} args - placeholder assignments\n * @param {Type} namespace - MySQL protocol namespace\n * @returns {SqlExecute}\n */\nfunction SqlExecute (connection, raw, args, namespace) {\n    return Object.assign({}, statement({ args: args || [], raw, namespace: namespace || statement.Type.CLASSIC }), {\n        /**\n         * Bind values to ordinal query placeholders.\n         * @function\n         * @name module:SqlExecute#bind\n         * @param {string|string[]} values - one or more values to bind\n         * @example\n         * // values as arguments\n         * const query = session.sql('SELECT FROM person WHERE name = ? AND age = ?').bind('foo', 23)\n         *\n         * // values as a single array argument\n         * const query = session.sql('SELECT FROM person WHERE name = ? AND age = ?').bind(['foo', 23])\n         * @returns {module:SqlExecute} The query instance.\n         */\n        bind () {\n            return this.addArgs(parseFlexibleParamList(Array.prototype.slice.call(arguments)));\n        },\n\n        /**\n         * Row cursor.\n         * @callback module:SqlExecute~rowCursor\n         * @param {Array.<*>} items - the list of column values for the row in the current cursor position\n         */\n\n        /**\n         * Metadata cursor.\n         * @callback module:SqlExecute~metadataCursor\n         * @param {Array.<Object>} metadata - the list of objects containing metadata details for each column\n         */\n\n        /**\n         * Execute a raw SQL query.\n         * @function\n         * @name module:SqlExecute#execute\n         * @param {module:SqlExecute~rowCursor} rowcb - Callback function to handle results, or an object with both callback functions.\n         * @param {module:SqlExecute~metadataCursor} [metacb] - Callback function to handle metadata.\n         * @example\n         * // provide only a callback to handle results\n         * query.execute(result => {})\n         * query.execute({ result () {} })\n         *\n         * // provide only a callback to handle metadata\n         * query.execute({ meta () {} })\n         *\n         * // provide callbacks to handle results and metadata\n         * query.execute(result => {}, meta => {})\n         * query.execute({ result () {}, meta () {} })\n         * @returns {Promise<module:SqlResult>}\n         */\n        execute () {\n            // The object syntax is not supported neither by the TableSelect\n            // API nor any other connector, so we are deprecating it.\n            if (typeof arguments[0] === 'object') {\n                log.warning('execute', warnings.MESSAGES.WARN_DEPRECATED_EXECUTE_CURSOR_OBJECT, {\n                    type: warnings.TYPES.DEPRECATION,\n                    code: warnings.CODES.DEPRECATION\n                });\n            }\n\n            // TODO(Rui): use default values after upgrading the node.js engine to a later major version.\n            const rowcb = arguments[0] && typeof arguments[0] === 'object'\n                ? arguments[0].row\n                : arguments[0];\n            const metacb = arguments[0] && typeof arguments[0] === 'object'\n                ? columnWrapper(arguments[0].meta)\n                : columnWrapper(arguments[1]);\n\n            // Before trying to send any message to the server, we need to\n            // check if the connection is open (has a client instance) or if\n            // it became idle in the meantime.\n            if (!connection.isOpen() || connection.isIdle()) {\n                // There is always a default error (ER_DEVAPI_CONNECTION_CLOSED).\n                return Promise.reject(connection.getError());\n            }\n\n            return connection.getClient().sqlStmtExecute(this, rowcb, metacb)\n                .then(details => {\n                    // We want to be able to reuse the statements and execute\n                    // them either with the same or with different placeholder\n                    // values. For that, we need to freeze the statement, in\n                    // order to ensure that new placeholder values will\n                    // replace old ones when it is executed again. Otherwise,\n                    // if we keep adding new values to the same statement\n                    // instance, the server (X Plugin) will report a 5015\n                    // (\"Too many arguments\") error.\n                    this.freeze();\n\n                    return result(details);\n                });\n        }\n    });\n}\n\n/**\n * MySQL protocol namespace.\n * @type {Type}\n * @const\n */\nSqlExecute.Namespace = statement.Type;\n\nmodule.exports = SqlExecute;\n"]},"metadata":{},"sourceType":"script"}