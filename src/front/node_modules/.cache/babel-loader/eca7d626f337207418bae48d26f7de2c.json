{"ast":null,"code":"/*\n * Copyright (c) 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst errors = require('../constants/errors');\n\nconst fs = require('fs');\n\nconst tls = require('tls');\n\nconst tlsCiphers = require('./ciphers');\n\nconst tlsVersions = require('./versions');\n\nconst util = require('util');\n\nconst {\n  isValidArray,\n  isValidPEM,\n  isValidString\n} = require('../validator');\n/**\n * Create a valid security context compatible with the Node.js TLS socket API\n * https://nodejs.org/docs/v12.0.0/api/tls.html#tls_tls_createsecurecontext_options\n * @private\n * @param {Object} options - TLS options provided by the application\n * @returns {Object} An object containing the appriate TLS socket configuration\n * options.\n */\n\n\nexports.create = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // If the application does not provide a list of allowed TLS versions,\n  // we use our own. We cannot have a default list of ciphersuites because\n  // those are dependent on the TLS version that ends up being used.\n  options = Object.assign({}, {\n    versions: tlsVersions.allowed(),\n    ciphersuites: []\n  }, options); // We need to create the proper securiy context containing any\n  // certificates, TLS versions or ciphersuites that have been provided.\n  // Applications can also provide any additional option supported by the\n  // Node.js security context.\n  // https://nodejs.org/docs/v12.0.0/api/tls.html#tls_tls_createsecurecontext_options\n\n  const context = Object.assign({}, {\n    // Unless a certificate authority is provided, all connections should\n    // be authorized.\n    rejectUnauthorized: false\n  }, options); // The list of allowed TLS versions can be less strict than the list of\n  // TLS versions that are actually supported by the Node.js engine and\n  // OpenSSL versions. Thus, we need to filter them, and sort them from the\n  // oldest to the latest.\n\n  const versions = tlsVersions.supported().filter(v => options.versions.indexOf(v) > -1).sort(); // If a list of ciphersuites is not provided, we want to use the\n  // default set of ciphershuites, otherwise we want only those\n  // that are effectively supported.\n\n  const ciphersuites = !options.ciphersuites.length ? tlsCiphers.defaults() : tlsCiphers.overlaps(options.ciphersuites); // The ciphersuites variable contains a list of ciphersuites that need to\n  // be converted to the OpenSSL format (colon-separated).\n\n  context.ciphers = ciphersuites.join(':'); // We also already have a valid list of TLS versions. If the Node.js core\n  // API supports a TLS version range, we should use it and set the minimum\n  // and maximum version supported. If TLSv1.3 is not supported, maxVersion\n  // will be TLSv1.2.\n\n  if (tls.DEFAULT_MIN_VERSION && tls.DEFAULT_MAX_VERSION) {\n    context.minVersion = versions[0];\n    context.maxVersion = versions[versions.length - 1];\n  } else {\n    // Otherwise, for older Node.js engine versions (with an older OpenSSL\n    // version) we need to specify the best option which, in the best case\n    // scenario, will be TLSv1.2, since TLSv1.3 is never supported for\n    // these Node.js versions.\n    context.secureProtocol = versions[versions.length - 1].replace('.', '_').concat('_client_method');\n  } // We should include any reference that is provided to a certificate\n  // authority .\n\n\n  if (options.ca) {\n    // When we provide a CA file, we want the server certificate to be\n    // verified against the chain of certificate authorities defined by\n    // the file, and throw an error if the verification fails.\n    context.rejectUnauthorized = true; // For convenience, if the certificate authority is not a\n    // PEM-formatted string we read the file first. Otherwise, we assume\n    // it follows the same convention used by the core Node.js API to\n    // create a secure context.\n    // https://nodejs.org/docs/v12.0.0/api/tls.html#tls_tls_createsecurecontext_options\n\n    context.ca = !isValidPEM({\n      value: options.ca\n    }) && !isValidArray({\n      value: options.ca,\n      validator: isValidPEM\n    }) ? fs.readFileSync(options.ca) : options.ca;\n  } // We should also include any provided certificate revocation list.\n\n\n  if (options.crl) {\n    // For convenience, if the certificate revocation list is not a\n    // PEM-formatted string we read the file first. Otherwise, we assume\n    // it follows the same convention used by the core Node.js API to\n    // create a secure context.\n    // https://nodejs.org/docs/v12.0.0/api/tls.html#tls_tls_createsecurecontext_options\n    context.crl = !isValidPEM({\n      value: options.crl\n    }) && !isValidArray({\n      value: options.crl,\n      validator: isValidPEM\n    }) ? fs.readFileSync(options.crl) : options.crl;\n  }\n\n  return context;\n};\n/**\n * Validate the TLS options.\n * @private\n * @param {Object} params\n * @param {TLS} [params.tls] - wether TLS should be enabled or disabled\n * @param {boolean} [params.ssl] - deprecated property to enable or disable TLS\n * @param {DeprecatedSSLOptions} [params.sslOptions] - deprecated property to provide additional TLS options\n * @returns {boolean} Returns true all properties and values are valid.\n * @throws when TLS should be disabled and additional properties are provided,\n * when any path to a certificate authority or certificate revocation file is\n * not a valid string, when the list of TLS versions does not include any valid\n * one, or contains one that is not supported, or when the list of ciphersuites\n * does not include any valid one\n */\n\n\nexports.validate = function (_ref) {\n  let {\n    tls,\n    ssl,\n    sslOptions\n  } = _ref;\n  const tlsIsDisabled = tls && tls.enabled === false || ssl === false;\n  const tlsOptions = Object.assign({}, tls, sslOptions); // If TLS is disabled, we should not allow any additional options.\n\n  if (tlsIsDisabled === true && Object.keys(tlsOptions).some(k => k !== 'enabled')) {\n    throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_TLS_OPTIONS);\n  } // Validate any CA file path or CA file content.\n\n\n  if (!isValidPEM({\n    value: tlsOptions.ca\n  }) && !isValidArray({\n    value: tlsOptions.ca,\n    validator: isValidPEM\n  }) && !isValidString({\n    value: tlsOptions.ca\n  })) {\n    throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_TLS_CA_PATH);\n  } // Validate any CRL file path or CRL file content.\n\n\n  if (!isValidPEM({\n    value: tlsOptions.crl\n  }) && !isValidArray({\n    value: tlsOptions.crl,\n    validator: isValidPEM\n  }) && !isValidString({\n    value: tlsOptions.crl\n  })) {\n    throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_TLS_CRL_PATH);\n  } // Check if TLS versions are provided in a valid list-like format.\n\n\n  if (!isValidArray({\n    value: tlsOptions.versions\n  })) {\n    throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_BAD_TLS_VERSION_LIST, tlsOptions.versions));\n  } // If the application does not provide a custom list, we can use the\n  // list containing only the supported TLS versions by default.\n\n\n  const selectedVersions = tlsOptions.versions || tlsVersions.supported(); // TLSv1 and TLSv1.1 are valid versions but are not supported.\n\n  const unsupported = selectedVersions.filter(v => tlsVersions.unsupported().indexOf(v) > -1); // Everything other than valid TLS versions is not allowed.\n\n  const unallowed = selectedVersions.filter(v => tlsVersions.allowed().indexOf(v) === -1 && tlsVersions.unsupported().indexOf(v) === -1); // If the list does not include a supported TLS version and includes\n  // any supported version, we should report the appropriate error.\n\n  if (unsupported.length && unsupported.length + unallowed.length === selectedVersions.length) {\n    throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_INSECURE_TLS_VERSIONS, unsupported[0], tlsVersions.allowed().join(', ')));\n  } // If the list does not include a supported TLS version and includes\n  // other invalid versions, we should report the appropriate error.\n\n\n  if (unallowed.length && unallowed.length === selectedVersions.length) {\n    throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_BAD_TLS_VERSION, unallowed[0], tlsVersions.allowed().join(', ')));\n  } // Although a specific TLS version is allowed, it does not mean it will\n  // work because this will depend on the OpenSSL version used by the Node.js\n  // engine. Thus, we need to ensure that a version actually works before\n  // proceeding.\n\n\n  const versions = selectedVersions.filter(v => tlsVersions.supported().indexOf(v) > -1); // If the final list does not contain any TLS version that is actually\n  // supported by the client, we should report the appropriate error.\n\n  if (!versions.length) {\n    throw new Error(errors.MESSAGES.ER_DEVAPI_NO_SUPPORTED_TLS_VERSION);\n  }\n\n  if (!isValidArray({\n    value: tlsOptions.ciphersuites\n  })) {\n    throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_BAD_TLS_CIPHERSUITE_LIST, tls.ciphersuites));\n  } // By this point, ciphersuites is either an Array or undefined.\n\n\n  const ciphersuites = tlsCiphers.overlaps(tlsOptions.ciphersuites || tlsCiphers.defaults());\n\n  if (!ciphersuites.length) {\n    throw new Error(errors.MESSAGES.ER_DEVAPI_NO_SUPPORTED_TLS_CIPHERSUITE);\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/tls/secure-context.js"],"names":["errors","require","fs","tls","tlsCiphers","tlsVersions","util","isValidArray","isValidPEM","isValidString","exports","create","options","Object","assign","versions","allowed","ciphersuites","context","rejectUnauthorized","supported","filter","v","indexOf","sort","length","defaults","overlaps","ciphers","join","DEFAULT_MIN_VERSION","DEFAULT_MAX_VERSION","minVersion","maxVersion","secureProtocol","replace","concat","ca","value","validator","readFileSync","crl","validate","ssl","sslOptions","tlsIsDisabled","enabled","tlsOptions","keys","some","k","Error","MESSAGES","ER_DEVAPI_BAD_TLS_OPTIONS","ER_DEVAPI_BAD_TLS_CA_PATH","ER_DEVAPI_BAD_TLS_CRL_PATH","format","ER_DEVAPI_BAD_TLS_VERSION_LIST","selectedVersions","unsupported","unallowed","ER_DEVAPI_INSECURE_TLS_VERSIONS","ER_DEVAPI_BAD_TLS_VERSION","ER_DEVAPI_NO_SUPPORTED_TLS_VERSION","ER_DEVAPI_BAD_TLS_CIPHERSUITE_LIST","ER_DEVAPI_NO_SUPPORTED_TLS_CIPHERSUITE"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst errors = require('../constants/errors');\nconst fs = require('fs');\nconst tls = require('tls');\nconst tlsCiphers = require('./ciphers');\nconst tlsVersions = require('./versions');\nconst util = require('util');\nconst { isValidArray, isValidPEM, isValidString } = require('../validator');\n\n/**\n * Create a valid security context compatible with the Node.js TLS socket API\n * https://nodejs.org/docs/v12.0.0/api/tls.html#tls_tls_createsecurecontext_options\n * @private\n * @param {Object} options - TLS options provided by the application\n * @returns {Object} An object containing the appriate TLS socket configuration\n * options.\n */\nexports.create = function (options = {}) {\n    // If the application does not provide a list of allowed TLS versions,\n    // we use our own. We cannot have a default list of ciphersuites because\n    // those are dependent on the TLS version that ends up being used.\n    options = Object.assign({}, { versions: tlsVersions.allowed(), ciphersuites: [] }, options);\n    // We need to create the proper securiy context containing any\n    // certificates, TLS versions or ciphersuites that have been provided.\n    // Applications can also provide any additional option supported by the\n    // Node.js security context.\n    // https://nodejs.org/docs/v12.0.0/api/tls.html#tls_tls_createsecurecontext_options\n    const context = Object.assign({}, {\n        // Unless a certificate authority is provided, all connections should\n        // be authorized.\n        rejectUnauthorized: false\n    }, options);\n    // The list of allowed TLS versions can be less strict than the list of\n    // TLS versions that are actually supported by the Node.js engine and\n    // OpenSSL versions. Thus, we need to filter them, and sort them from the\n    // oldest to the latest.\n    const versions = tlsVersions.supported().filter(v => options.versions.indexOf(v) > -1).sort();\n\n    // If a list of ciphersuites is not provided, we want to use the\n    // default set of ciphershuites, otherwise we want only those\n    // that are effectively supported.\n    const ciphersuites = !options.ciphersuites.length ? tlsCiphers.defaults() : tlsCiphers.overlaps(options.ciphersuites);\n\n    // The ciphersuites variable contains a list of ciphersuites that need to\n    // be converted to the OpenSSL format (colon-separated).\n    context.ciphers = ciphersuites.join(':');\n\n    // We also already have a valid list of TLS versions. If the Node.js core\n    // API supports a TLS version range, we should use it and set the minimum\n    // and maximum version supported. If TLSv1.3 is not supported, maxVersion\n    // will be TLSv1.2.\n    if (tls.DEFAULT_MIN_VERSION && tls.DEFAULT_MAX_VERSION) {\n        context.minVersion = versions[0];\n        context.maxVersion = versions[versions.length - 1];\n    } else {\n        // Otherwise, for older Node.js engine versions (with an older OpenSSL\n        // version) we need to specify the best option which, in the best case\n        // scenario, will be TLSv1.2, since TLSv1.3 is never supported for\n        // these Node.js versions.\n        context.secureProtocol = versions[versions.length - 1].replace('.', '_').concat('_client_method');\n    }\n\n    // We should include any reference that is provided to a certificate\n    // authority .\n    if (options.ca) {\n        // When we provide a CA file, we want the server certificate to be\n        // verified against the chain of certificate authorities defined by\n        // the file, and throw an error if the verification fails.\n        context.rejectUnauthorized = true;\n        // For convenience, if the certificate authority is not a\n        // PEM-formatted string we read the file first. Otherwise, we assume\n        // it follows the same convention used by the core Node.js API to\n        // create a secure context.\n        // https://nodejs.org/docs/v12.0.0/api/tls.html#tls_tls_createsecurecontext_options\n        context.ca = (!isValidPEM({ value: options.ca }) && !isValidArray({ value: options.ca, validator: isValidPEM })) ? fs.readFileSync(options.ca) : options.ca;\n    }\n\n    // We should also include any provided certificate revocation list.\n    if (options.crl) {\n        // For convenience, if the certificate revocation list is not a\n        // PEM-formatted string we read the file first. Otherwise, we assume\n        // it follows the same convention used by the core Node.js API to\n        // create a secure context.\n        // https://nodejs.org/docs/v12.0.0/api/tls.html#tls_tls_createsecurecontext_options\n        context.crl = (!isValidPEM({ value: options.crl }) && !isValidArray({ value: options.crl, validator: isValidPEM })) ? fs.readFileSync(options.crl) : options.crl;\n    }\n\n    return context;\n};\n\n/**\n * Validate the TLS options.\n * @private\n * @param {Object} params\n * @param {TLS} [params.tls] - wether TLS should be enabled or disabled\n * @param {boolean} [params.ssl] - deprecated property to enable or disable TLS\n * @param {DeprecatedSSLOptions} [params.sslOptions] - deprecated property to provide additional TLS options\n * @returns {boolean} Returns true all properties and values are valid.\n * @throws when TLS should be disabled and additional properties are provided,\n * when any path to a certificate authority or certificate revocation file is\n * not a valid string, when the list of TLS versions does not include any valid\n * one, or contains one that is not supported, or when the list of ciphersuites\n * does not include any valid one\n */\nexports.validate = function ({ tls, ssl, sslOptions }) {\n    const tlsIsDisabled = (tls && tls.enabled === false) || ssl === false;\n    const tlsOptions = Object.assign({}, tls, sslOptions);\n    // If TLS is disabled, we should not allow any additional options.\n    if (tlsIsDisabled === true && Object.keys(tlsOptions).some(k => k !== 'enabled')) {\n        throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_TLS_OPTIONS);\n    }\n\n    // Validate any CA file path or CA file content.\n    if (!isValidPEM({ value: tlsOptions.ca }) && !isValidArray({ value: tlsOptions.ca, validator: isValidPEM }) && !isValidString({ value: tlsOptions.ca })) {\n        throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_TLS_CA_PATH);\n    }\n\n    // Validate any CRL file path or CRL file content.\n    if (!isValidPEM({ value: tlsOptions.crl }) && !isValidArray({ value: tlsOptions.crl, validator: isValidPEM }) && !isValidString({ value: tlsOptions.crl })) {\n        throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_TLS_CRL_PATH);\n    }\n\n    // Check if TLS versions are provided in a valid list-like format.\n    if (!isValidArray({ value: tlsOptions.versions })) {\n        throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_BAD_TLS_VERSION_LIST, tlsOptions.versions));\n    }\n\n    // If the application does not provide a custom list, we can use the\n    // list containing only the supported TLS versions by default.\n    const selectedVersions = tlsOptions.versions || tlsVersions.supported();\n\n    // TLSv1 and TLSv1.1 are valid versions but are not supported.\n    const unsupported = selectedVersions.filter(v => tlsVersions.unsupported().indexOf(v) > -1);\n    // Everything other than valid TLS versions is not allowed.\n    const unallowed = selectedVersions.filter(v => tlsVersions.allowed().indexOf(v) === -1 && tlsVersions.unsupported().indexOf(v) === -1);\n\n    // If the list does not include a supported TLS version and includes\n    // any supported version, we should report the appropriate error.\n    if (unsupported.length && unsupported.length + unallowed.length === selectedVersions.length) {\n        throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_INSECURE_TLS_VERSIONS, unsupported[0], tlsVersions.allowed().join(', ')));\n    }\n\n    // If the list does not include a supported TLS version and includes\n    // other invalid versions, we should report the appropriate error.\n    if (unallowed.length && unallowed.length === selectedVersions.length) {\n        throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_BAD_TLS_VERSION, unallowed[0], tlsVersions.allowed().join(', ')));\n    }\n\n    // Although a specific TLS version is allowed, it does not mean it will\n    // work because this will depend on the OpenSSL version used by the Node.js\n    // engine. Thus, we need to ensure that a version actually works before\n    // proceeding.\n    const versions = selectedVersions.filter(v => tlsVersions.supported().indexOf(v) > -1);\n\n    // If the final list does not contain any TLS version that is actually\n    // supported by the client, we should report the appropriate error.\n    if (!versions.length) {\n        throw new Error(errors.MESSAGES.ER_DEVAPI_NO_SUPPORTED_TLS_VERSION);\n    }\n\n    if (!isValidArray({ value: tlsOptions.ciphersuites })) {\n        throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_BAD_TLS_CIPHERSUITE_LIST, tls.ciphersuites));\n    }\n\n    // By this point, ciphersuites is either an Array or undefined.\n    const ciphersuites = tlsCiphers.overlaps(tlsOptions.ciphersuites || tlsCiphers.defaults());\n\n    if (!ciphersuites.length) {\n        throw new Error(errors.MESSAGES.ER_DEVAPI_NO_SUPPORTED_TLS_CIPHERSUITE);\n    }\n\n    return true;\n};\n"]},"metadata":{},"sourceType":"script"}