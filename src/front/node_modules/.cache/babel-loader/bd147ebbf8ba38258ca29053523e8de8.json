{"ast":null,"code":"/*\n * Copyright (c) 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst util = require('util');\n\nconst warnings = require('./constants/warnings');\n/**\n * Integrated client logger. Manages content to be displayed to an application\n * using different tools like the stdout/stderr stream and the debug log (with\n * NODE_DEBUG).\n * @module Logger\n */\n\n/**\n * Enum to identify logger levels.\n * @private\n * @readonly\n * @name LogLevel\n * @enum {string}\n */\n\n\nconst Level = {\n  INFO: 'INFO',\n  WARNING: 'WARNING'\n};\n/**\n * Append content to the debug log using a proper section to identify the\n * portion of the application that generates it.\n * @param {Object} [options]\n * @param {string} [options.section] - content scope\n * @param {string} [options.component] - content generator\n * @param {string} [content] - log content\n * @param {LogLevel} [level] - log level\n */\n\nfunction appendToDebugLog(_ref) {\n  let {\n    section,\n    component,\n    content,\n    level = Level.INFO\n  } = _ref;\n  return util.debuglog(`${section}.${component}`)(`[${level}] ${JSON.stringify(content, null, 2)}`);\n}\n/**\n * @alias module:Logger\n * @param {string} section - log section\n * @returns {module:Logger}\n */\n\n\nfunction Logger(section) {\n  return {\n    /**\n     * Generate an informational message.\n     * @param {string} component - name of the component that is\n     * generating the content\n     * @param {string} content - content to be displayed\n     */\n    info(component, content) {\n      // If the application did not enable the debug log, there is\n      // nothing to do.\n      if (!process.env.NODE_DEBUG) {\n        return;\n      } // If debug mode is enabled, we append the content to the debug\n      // log.\n\n\n      return appendToDebugLog({\n        section,\n        component,\n        content\n      });\n    },\n\n    /**\n     * Generate a warning message.\n     * @param {string} component - name of the component that is\n     * generating the content\n     * @param {string} content - content to be displayed\n     * @param {object} options - extended options\n     * @param {string} options.type - type of warning\n     */\n    warning(component, content) {\n      let {\n        type = warnings.TYPES.GENERIC,\n        code = warnings.CODES.GENERIC\n      } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      // If the application did not enable the debug log, we use the\n      // standard Node.js 'warning' event mechanism.\n      // https://nodejs.org/docs/v12.0.0/api/process.html#process_event_warning\n      if (!process.env.NODE_DEBUG) {\n        return process.emitWarning(content, type, code);\n      } // If debug mode is enabled, we append the content to the debug\n      // log.\n\n\n      return appendToDebugLog({\n        section,\n        component,\n        content,\n        level: Level.WARNING\n      });\n    }\n\n  };\n}\n\nLogger.Level = Level;\nmodule.exports = Logger;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/logger.js"],"names":["util","require","warnings","Level","INFO","WARNING","appendToDebugLog","section","component","content","level","debuglog","JSON","stringify","Logger","info","process","env","NODE_DEBUG","warning","type","TYPES","GENERIC","code","CODES","emitWarning","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,sBAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,KAAK,GAAG;AACVC,EAAAA,IAAI,EAAE,MADI;AAEVC,EAAAA,OAAO,EAAE;AAFC,CAAd;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,gBAAT,OAAgF;AAAA,MAArD;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA,OAAtB;AAA+BC,IAAAA,KAAK,GAAGP,KAAK,CAACC;AAA7C,GAAqD;AAC5E,SAAOJ,IAAI,CAACW,QAAL,CAAe,GAAEJ,OAAQ,IAAGC,SAAU,EAAtC,EAA0C,IAAGE,KAAM,KAAIE,IAAI,CAACC,SAAL,CAAeJ,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAAiC,EAAxF,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASK,MAAT,CAAiBP,OAAjB,EAA0B;AACtB,SAAO;AACH;AACR;AACA;AACA;AACA;AACA;AACQQ,IAAAA,IAAI,CAAEP,SAAF,EAAaC,OAAb,EAAsB;AACtB;AACA;AACA,UAAI,CAACO,OAAO,CAACC,GAAR,CAAYC,UAAjB,EAA6B;AACzB;AACH,OALqB,CAOtB;AACA;;;AACA,aAAOZ,gBAAgB,CAAC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,SAAX;AAAsBC,QAAAA;AAAtB,OAAD,CAAvB;AACH,KAjBE;;AAmBH;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQU,IAAAA,OAAO,CAAEX,SAAF,EAAaC,OAAb,EAA6F;AAAA,UAAvE;AAAEW,QAAAA,IAAI,GAAGlB,QAAQ,CAACmB,KAAT,CAAeC,OAAxB;AAAiCC,QAAAA,IAAI,GAAGrB,QAAQ,CAACsB,KAAT,CAAeF;AAAvD,OAAuE,uEAAJ,EAAI;;AAChG;AACA;AACA;AACA,UAAI,CAACN,OAAO,CAACC,GAAR,CAAYC,UAAjB,EAA6B;AACzB,eAAOF,OAAO,CAACS,WAAR,CAAoBhB,OAApB,EAA6BW,IAA7B,EAAmCG,IAAnC,CAAP;AACH,OAN+F,CAQhG;AACA;;;AACA,aAAOjB,gBAAgB,CAAC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,SAAX;AAAsBC,QAAAA,OAAtB;AAA+BC,QAAAA,KAAK,EAAEP,KAAK,CAACE;AAA5C,OAAD,CAAvB;AACH;;AAtCE,GAAP;AAwCH;;AAEDS,MAAM,CAACX,KAAP,GAAeA,KAAf;AAEAuB,MAAM,CAACC,OAAP,GAAiBb,MAAjB","sourcesContent":["/*\n * Copyright (c) 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst util = require('util');\nconst warnings = require('./constants/warnings');\n\n/**\n * Integrated client logger. Manages content to be displayed to an application\n * using different tools like the stdout/stderr stream and the debug log (with\n * NODE_DEBUG).\n * @module Logger\n */\n\n/**\n * Enum to identify logger levels.\n * @private\n * @readonly\n * @name LogLevel\n * @enum {string}\n */\nconst Level = {\n    INFO: 'INFO',\n    WARNING: 'WARNING'\n};\n\n/**\n * Append content to the debug log using a proper section to identify the\n * portion of the application that generates it.\n * @param {Object} [options]\n * @param {string} [options.section] - content scope\n * @param {string} [options.component] - content generator\n * @param {string} [content] - log content\n * @param {LogLevel} [level] - log level\n */\nfunction appendToDebugLog ({ section, component, content, level = Level.INFO }) {\n    return util.debuglog(`${section}.${component}`)(`[${level}] ${JSON.stringify(content, null, 2)}`);\n}\n\n/**\n * @alias module:Logger\n * @param {string} section - log section\n * @returns {module:Logger}\n */\nfunction Logger (section) {\n    return {\n        /**\n         * Generate an informational message.\n         * @param {string} component - name of the component that is\n         * generating the content\n         * @param {string} content - content to be displayed\n         */\n        info (component, content) {\n            // If the application did not enable the debug log, there is\n            // nothing to do.\n            if (!process.env.NODE_DEBUG) {\n                return;\n            }\n\n            // If debug mode is enabled, we append the content to the debug\n            // log.\n            return appendToDebugLog({ section, component, content });\n        },\n\n        /**\n         * Generate a warning message.\n         * @param {string} component - name of the component that is\n         * generating the content\n         * @param {string} content - content to be displayed\n         * @param {object} options - extended options\n         * @param {string} options.type - type of warning\n         */\n        warning (component, content, { type = warnings.TYPES.GENERIC, code = warnings.CODES.GENERIC } = {}) {\n            // If the application did not enable the debug log, we use the\n            // standard Node.js 'warning' event mechanism.\n            // https://nodejs.org/docs/v12.0.0/api/process.html#process_event_warning\n            if (!process.env.NODE_DEBUG) {\n                return process.emitWarning(content, type, code);\n            }\n\n            // If debug mode is enabled, we append the content to the debug\n            // log.\n            return appendToDebugLog({ section, component, content, level: Level.WARNING });\n        }\n    };\n}\n\nLogger.Level = Level;\n\nmodule.exports = Logger;\n"]},"metadata":{},"sourceType":"script"}