{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst Pa = require('parsimmon');\n\nconst booleanExpressions = require('./grammar/booleanExpressions');\n\nconst collectionOrTableExpressions = require('./grammar/collectionOrTableExpressions');\n\nconst keywords = require('./grammar/keywords');\n\nconst partials = require('./grammar/partials');\n\nconst projectedSearchExpr = require('./grammar/projectedSearchExpr');\n\nconst sortExpr = require('./grammar/sortExpr');\n/**\n * Available parser modes.\n * @readonly\n * @private\n * @name DataModel\n * @enum {number}\n */\n\n\nconst DataModel = parser.Mode = require('../../Protocol/Stubs/mysqlx_crud_pb').DataModel;\n/**\n * Available parser types.\n * @readonly\n * @private\n * @name Type\n * @enum {number}\n */\n\n\nconst Type = parser.Type = Object.assign({}, booleanExpressions.Type, collectionOrTableExpressions.Type, {\n  [sortExpr.name]: 'sortExpr',\n  [projectedSearchExpr.name]: 'projectedSearchExpr'\n});\n\nfunction parser(options) {\n  options = Object.assign({}, {\n    type: Type.EXPR,\n    mode: DataModel.DOCUMENT,\n    placeholders: [],\n    scoped: false\n  }, options);\n  const parsers = Object.assign({}, keywords(options), partials(options), booleanExpressions(options), collectionOrTableExpressions(options), {\n    QUOTED_ID(r) {\n      return Pa.seq(Pa.string('`'), Pa.alt(Pa.string('``').result('`'), Pa.noneOf('`')).many().tie(), Pa.string('`')).tie();\n    },\n\n    ID(r) {\n      return Pa.seq(Pa.alt(Pa.string('_'), Pa.letter), Pa.alt(Pa.string('_'), Pa.letter, r.DIGIT).many().tie()).tie();\n    },\n\n    INTERVAL_UNIT() {\n      return Pa.alt(Pa.string('MICROSECOND'), Pa.string('SECOND_MICROSECOND'), Pa.string('SECOND'), Pa.string('MINUTE_MICROSECOND'), Pa.string('MINUTE_SECOND'), Pa.string('MINUTE'), Pa.string('HOUR_MICROSECOND'), Pa.string('HOUR_SECOND'), Pa.string('HOUR_MINUTE'), Pa.string('HOUR'), Pa.string('DAY_MICROSECOND'), Pa.string('DAY_SECOND'), Pa.string('DAY_MINUTE'), Pa.string('DAY_HOUR'), Pa.string('DAY'), Pa.string('WEEK'), Pa.string('MONTH'), Pa.string('QUARTER'), Pa.string('YEAR_MONTH'), Pa.string('YEAR'));\n    },\n\n    STRING_DQ(r) {\n      return Pa.seq(Pa.string('\"'), Pa.alt(r.SCHAR, Pa.string(\"'\"), r.ESCAPED_DQ, r.ESCAPED_ESCAPE_CHAR).many().tie(), Pa.string('\"')).tie();\n    },\n\n    ESCAPED_DQ(r) {\n      return Pa.alt(Pa.string('\"\"'), Pa.string('\\u005C\"')).map(() => '\"');\n    },\n\n    ESCAPED_ESCAPE_CHAR(r) {\n      return Pa.string('\\u005C\\u005C').map(() => '\\u005C');\n    },\n\n    STRING_SQ(r) {\n      return Pa.seq(Pa.string(\"'\"), Pa.alt(r.SCHAR, Pa.string('\"'), r.ESCAPED_SQ, r.ESCAPED_ESCAPE_CHAR).many().tie(), Pa.string(\"'\")).tie();\n    },\n\n    ESCAPED_SQ(r) {\n      return Pa.alt(Pa.string(\"''\"), Pa.string(\"\\u005C'\")).map(() => \"'\");\n    },\n\n    DIGIT() {\n      return Pa.digit;\n    },\n\n    FLOAT(r) {\n      return Pa.seq(Pa.string('-').atMost(1).tie(), Pa.alt(Pa.seq(r.DIGIT.many().tie(), Pa.string('.'), r.DIGIT.atLeast(1).tie(), Pa.seq(Pa.string('E'), Pa.alt(Pa.string('+'), Pa.string('-')).atMost(1), r.DIGIT.atLeast(1).tie()).atMost(1).tie()), Pa.seq(r.DIGIT.atLeast(1).tie(), Pa.string('E'), Pa.alt(Pa.string('+'), Pa.string('-')).atMost(1), r.DIGIT.atLeast(1).tie())).tie()).tie();\n    },\n\n    INT(r) {\n      return Pa.seq(Pa.string('-').atMost(1).tie(), r.DIGIT.atLeast(1).tie()).tie();\n    },\n\n    SCHAR() {\n      return Pa.alt(Pa.range('\\u0020', '\\u0021'), // excludes double quotes (quotation mark)\n      Pa.range('\\u0023', '\\u0026'), // excludes single quotes (apostrophe)\n      Pa.range('\\u0028', '\\u005B'), // excludes escape character (reverse solidus)\n      Pa.range('\\u005D', '\\u007E'), Pa.range('\\u0080', '\\uFFFF'));\n    },\n\n    // Additional Expression Types\n    projectedSearchExpr: projectedSearchExpr.parser(options),\n    sortExpr: sortExpr.parser(options),\n\n    // Shortcuts\n    blank(r) {\n      return Pa.whitespace;\n    },\n\n    optBlank(r) {\n      return r.blank.atMost(1);\n    },\n\n    optNotPrefix(r) {\n      return r.NOT.skip(r.blank).atMost(1).map(data => !data.length ? '' : 'not_');\n    },\n\n    optNotSuffix(r) {\n      return r.NOT.skip(r.blank).atMost(1).map(data => !data.length ? '' : '_not');\n    }\n\n  });\n  const language = Pa.createLanguage(parsers);\n  return language[options.type];\n}\n\nmodule.exports = parser;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/ExprParser/lib/index.js"],"names":["Pa","require","booleanExpressions","collectionOrTableExpressions","keywords","partials","projectedSearchExpr","sortExpr","DataModel","parser","Mode","Type","Object","assign","name","options","type","EXPR","mode","DOCUMENT","placeholders","scoped","parsers","QUOTED_ID","r","seq","string","alt","result","noneOf","many","tie","ID","letter","DIGIT","INTERVAL_UNIT","STRING_DQ","SCHAR","ESCAPED_DQ","ESCAPED_ESCAPE_CHAR","map","STRING_SQ","ESCAPED_SQ","digit","FLOAT","atMost","atLeast","INT","range","blank","whitespace","optBlank","optNotPrefix","NOT","skip","data","length","optNotSuffix","language","createLanguage","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst Pa = require('parsimmon');\n\nconst booleanExpressions = require('./grammar/booleanExpressions');\nconst collectionOrTableExpressions = require('./grammar/collectionOrTableExpressions');\nconst keywords = require('./grammar/keywords');\nconst partials = require('./grammar/partials');\nconst projectedSearchExpr = require('./grammar/projectedSearchExpr');\nconst sortExpr = require('./grammar/sortExpr');\n\n/**\n * Available parser modes.\n * @readonly\n * @private\n * @name DataModel\n * @enum {number}\n */\nconst DataModel = parser.Mode = require('../../Protocol/Stubs/mysqlx_crud_pb').DataModel;\n\n/**\n * Available parser types.\n * @readonly\n * @private\n * @name Type\n * @enum {number}\n */\nconst Type = parser.Type = Object.assign({}, booleanExpressions.Type, collectionOrTableExpressions.Type, {\n    [sortExpr.name]: 'sortExpr',\n    [projectedSearchExpr.name]: 'projectedSearchExpr'\n});\n\nfunction parser (options) {\n    options = Object.assign({}, {\n        type: Type.EXPR,\n        mode: DataModel.DOCUMENT,\n        placeholders: [],\n        scoped: false\n    }, options);\n\n    const parsers = Object.assign({}, keywords(options), partials(options), booleanExpressions(options), collectionOrTableExpressions(options), {\n\n        QUOTED_ID (r) {\n            return Pa.seq(\n                Pa.string('`'),\n                Pa.alt(Pa.string('``').result('`'), Pa.noneOf('`')).many().tie(),\n                Pa.string('`')\n            ).tie();\n        },\n\n        ID (r) {\n            return Pa.seq(\n                Pa.alt(\n                    Pa.string('_'),\n                    Pa.letter\n                ),\n                Pa.alt(\n                    Pa.string('_'),\n                    Pa.letter,\n                    r.DIGIT\n                ).many().tie()\n            ).tie();\n        },\n\n        INTERVAL_UNIT () {\n            return Pa.alt(\n                Pa.string('MICROSECOND'),\n                Pa.string('SECOND_MICROSECOND'),\n                Pa.string('SECOND'),\n                Pa.string('MINUTE_MICROSECOND'),\n                Pa.string('MINUTE_SECOND'),\n                Pa.string('MINUTE'),\n                Pa.string('HOUR_MICROSECOND'),\n                Pa.string('HOUR_SECOND'),\n                Pa.string('HOUR_MINUTE'),\n                Pa.string('HOUR'),\n                Pa.string('DAY_MICROSECOND'),\n                Pa.string('DAY_SECOND'),\n                Pa.string('DAY_MINUTE'),\n                Pa.string('DAY_HOUR'),\n                Pa.string('DAY'),\n                Pa.string('WEEK'),\n                Pa.string('MONTH'),\n                Pa.string('QUARTER'),\n                Pa.string('YEAR_MONTH'),\n                Pa.string('YEAR')\n            );\n        },\n\n        STRING_DQ (r) {\n            return Pa\n                .seq(\n                    Pa.string('\"'),\n                    Pa.alt(r.SCHAR, Pa.string(\"'\"), r.ESCAPED_DQ, r.ESCAPED_ESCAPE_CHAR).many().tie(),\n                    Pa.string('\"')\n                )\n                .tie();\n        },\n\n        ESCAPED_DQ (r) {\n            return Pa.alt(Pa.string('\"\"'), Pa.string('\\u005C\"')).map(() => '\"');\n        },\n\n        ESCAPED_ESCAPE_CHAR (r) {\n            return Pa.string('\\u005C\\u005C').map(() => '\\u005C');\n        },\n\n        STRING_SQ (r) {\n            return Pa\n                .seq(\n                    Pa.string(\"'\"),\n                    Pa.alt(r.SCHAR, Pa.string('\"'), r.ESCAPED_SQ, r.ESCAPED_ESCAPE_CHAR).many().tie(),\n                    Pa.string(\"'\")\n                )\n                .tie();\n        },\n\n        ESCAPED_SQ (r) {\n            return Pa.alt(Pa.string(\"''\"), Pa.string(\"\\u005C'\")).map(() => \"'\");\n        },\n\n        DIGIT () {\n            return Pa.digit;\n        },\n\n        FLOAT (r) {\n            return Pa\n                .seq(\n                    Pa.string('-').atMost(1).tie(),\n                    Pa\n                        .alt(\n                            Pa.seq(\n                                r.DIGIT.many().tie(),\n                                Pa.string('.'),\n                                r.DIGIT.atLeast(1).tie(),\n                                Pa.seq(\n                                    Pa.string('E'),\n                                    Pa.alt(Pa.string('+'), Pa.string('-')).atMost(1),\n                                    r.DIGIT.atLeast(1).tie()\n                                ).atMost(1).tie()\n                            ),\n                            Pa.seq(\n                                r.DIGIT.atLeast(1).tie(),\n                                Pa.string('E'),\n                                Pa.alt(Pa.string('+'), Pa.string('-')).atMost(1),\n                                r.DIGIT.atLeast(1).tie()\n                            )\n                        )\n                        .tie()\n                )\n                .tie();\n        },\n\n        INT (r) {\n            return Pa\n                .seq(\n                    Pa.string('-').atMost(1).tie(),\n                    r.DIGIT.atLeast(1).tie()\n                )\n                .tie();\n        },\n\n        SCHAR () {\n            return Pa.alt(\n                Pa.range('\\u0020', '\\u0021'),\n                // excludes double quotes (quotation mark)\n                Pa.range('\\u0023', '\\u0026'),\n                // excludes single quotes (apostrophe)\n                Pa.range('\\u0028', '\\u005B'),\n                // excludes escape character (reverse solidus)\n                Pa.range('\\u005D', '\\u007E'),\n                Pa.range('\\u0080', '\\uFFFF')\n            );\n        },\n\n        // Additional Expression Types\n        projectedSearchExpr: projectedSearchExpr.parser(options),\n        sortExpr: sortExpr.parser(options),\n\n        // Shortcuts\n\n        blank (r) {\n            return Pa.whitespace;\n        },\n\n        optBlank (r) {\n            return r.blank.atMost(1);\n        },\n\n        optNotPrefix (r) {\n            return r.NOT.skip(r.blank).atMost(1).map(data => !data.length ? '' : 'not_');\n        },\n\n        optNotSuffix (r) {\n            return r.NOT.skip(r.blank).atMost(1).map(data => !data.length ? '' : '_not');\n        }\n    });\n\n    const language = Pa.createLanguage(parsers);\n\n    return language[options.type];\n}\n\nmodule.exports = parser;\n"]},"metadata":{},"sourceType":"script"}