{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst StmtExecuteStub = require('../../../Stubs/mysqlx_sql_pb').StmtExecute;\n\nconst any = require('../Datatypes/Any');\n\nconst bytes = require('../../ScalarValues/bytes');\n\nconst list = require('../../Traits/List');\n\nconst serializable = require('../../Traits/Serializable');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Sql.StmtExecute\n * @param {proto.Mysqlx.Sql.StmtExecute} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Sql.StmtExecute}\n */\n\n\nfunction StmtExecute(proto) {\n  return Object.assign({}, serializable(proto), wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Sql.StmtExecute#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        namespace: proto.getNamespace(),\n        stmt: bytes(proto.getStmt()).toString(),\n        args: list(proto.getArgsList().map(arg => any(arg))).toJSON(),\n        compact_metadata: proto.getCompactMetadata()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Sql.StmtExecute instance for a given statement.\n * @returns {module:adapters.Mysqlx.Sql.StmtExecute}\n */\n\n\nStmtExecute.create = function (query) {\n  const proto = new StmtExecuteStub();\n  proto.setNamespace(query.getNamespace());\n  proto.setStmt(bytes.create(Buffer.from(query.getSQL())).valueOf());\n  proto.setArgsList(query.getArgs().map(arg => any.create(arg).valueOf()));\n  return StmtExecute(proto);\n};\n\nmodule.exports = StmtExecute;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Sql/StmtExecute.js"],"names":["StmtExecuteStub","require","StmtExecute","any","bytes","list","serializable","wraps","proto","Object","assign","toJSON","namespace","getNamespace","stmt","getStmt","toString","args","getArgsList","map","arg","compact_metadata","getCompactMetadata","create","query","setNamespace","setStmt","Buffer","from","getSQL","valueOf","setArgsList","getArgs","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,8BAAD,CAAP,CAAwCC,WAAhE;;AACA,MAAMC,GAAG,GAAGF,OAAO,CAAC,kBAAD,CAAnB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,0BAAD,CAArB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,mBAAD,CAApB;;AACA,MAAMK,YAAY,GAAGL,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAMM,KAAK,GAAGN,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAsBM,KAAtB,EAA6B;AACzB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,YAAY,CAACE,KAAD,CAA9B,EAAuCD,KAAK,CAACC,KAAD,CAA5C,EAAqD;AACxD;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAO;AACHC,QAAAA,SAAS,EAAEJ,KAAK,CAACK,YAAN,EADR;AAEHC,QAAAA,IAAI,EAAEV,KAAK,CAACI,KAAK,CAACO,OAAN,EAAD,CAAL,CAAuBC,QAAvB,EAFH;AAGHC,QAAAA,IAAI,EAAEZ,IAAI,CAACG,KAAK,CAACU,WAAN,GAAoBC,GAApB,CAAwBC,GAAG,IAAIjB,GAAG,CAACiB,GAAD,CAAlC,CAAD,CAAJ,CAA+CT,MAA/C,EAHH;AAIHU,QAAAA,gBAAgB,EAAEb,KAAK,CAACc,kBAAN;AAJf,OAAP;AAMH;;AAduD,GAArD,CAAP;AAgBH;AAED;AACA;AACA;AACA;;;AACApB,WAAW,CAACqB,MAAZ,GAAqB,UAAUC,KAAV,EAAiB;AAClC,QAAMhB,KAAK,GAAG,IAAIR,eAAJ,EAAd;AACAQ,EAAAA,KAAK,CAACiB,YAAN,CAAmBD,KAAK,CAACX,YAAN,EAAnB;AACAL,EAAAA,KAAK,CAACkB,OAAN,CAActB,KAAK,CAACmB,MAAN,CAAaI,MAAM,CAACC,IAAP,CAAYJ,KAAK,CAACK,MAAN,EAAZ,CAAb,EAA0CC,OAA1C,EAAd;AACAtB,EAAAA,KAAK,CAACuB,WAAN,CAAkBP,KAAK,CAACQ,OAAN,GAAgBb,GAAhB,CAAoBC,GAAG,IAAIjB,GAAG,CAACoB,MAAJ,CAAWH,GAAX,EAAgBU,OAAhB,EAA3B,CAAlB;AAEA,SAAO5B,WAAW,CAACM,KAAD,CAAlB;AACH,CAPD;;AASAyB,MAAM,CAACC,OAAP,GAAiBhC,WAAjB","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst StmtExecuteStub = require('../../../Stubs/mysqlx_sql_pb').StmtExecute;\nconst any = require('../Datatypes/Any');\nconst bytes = require('../../ScalarValues/bytes');\nconst list = require('../../Traits/List');\nconst serializable = require('../../Traits/Serializable');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Sql.StmtExecute\n * @param {proto.Mysqlx.Sql.StmtExecute} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Sql.StmtExecute}\n */\nfunction StmtExecute (proto) {\n    return Object.assign({}, serializable(proto), wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Sql.StmtExecute#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                namespace: proto.getNamespace(),\n                stmt: bytes(proto.getStmt()).toString(),\n                args: list(proto.getArgsList().map(arg => any(arg))).toJSON(),\n                compact_metadata: proto.getCompactMetadata()\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Sql.StmtExecute instance for a given statement.\n * @returns {module:adapters.Mysqlx.Sql.StmtExecute}\n */\nStmtExecute.create = function (query) {\n    const proto = new StmtExecuteStub();\n    proto.setNamespace(query.getNamespace());\n    proto.setStmt(bytes.create(Buffer.from(query.getSQL())).valueOf());\n    proto.setArgsList(query.getArgs().map(arg => any.create(arg).valueOf()));\n\n    return StmtExecute(proto);\n};\n\nmodule.exports = StmtExecute;\n"]},"metadata":{},"sourceType":"script"}