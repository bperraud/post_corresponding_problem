{"ast":null,"code":"/*\n * Copyright (c) 2018, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n/**\n * AuthenticationManager factory.\n * @private\n * @alias AuthenticationManager\n * @returns {AuthenticationManager}\n */\n\nfunction AuthenticationManager() {\n  const state = {\n    plugins: []\n  };\n  return {\n    /**\n     * Register a new authentication plugin.\n     * @function\n     * @name module:AuthenticationManager#registerPlugin\n     * @param {AuthPlugin} plugin - AuthPlugin implementation\n     * @returns {AuthenticationManager} The AuthenticationManager singleton instance.\n     */\n    registerPlugin(plugin) {\n      state.plugins[plugin.Name] = plugin;\n      return this;\n    },\n\n    /**\n     * Retrieve a plugin implementation.\n     * @function\n     * @name module:AuthenticationManager#registerPlugin\n     * @param {string} name - plugin name\n     * @returns {AuthPlugin} An AuthPlugin implementation.\n     */\n    getPlugin(name) {\n      return state.plugins[name];\n    },\n\n    /**\n     * Retrieve the list of names of available plugins.\n     * @function\n     * @name module:AuthenticationManager#getPluginNames\n     * @returns {string[]} The list of plugin names.\n     */\n    getPluginNames() {\n      return Object.keys(state.plugins);\n    }\n\n  };\n}\n/**\n * Exposes an AuthenticationManager singleton.\n */\n\n\nmodule.exports = AuthenticationManager();","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Authentication/AuthenticationManager.js"],"names":["AuthenticationManager","state","plugins","registerPlugin","plugin","Name","getPlugin","name","getPluginNames","Object","keys","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,qBAAT,GAAkC;AAC9B,QAAMC,KAAK,GAAG;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAd;AAEA,SAAO;AACH;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,cAAc,CAAEC,MAAF,EAAU;AACpBH,MAAAA,KAAK,CAACC,OAAN,CAAcE,MAAM,CAACC,IAArB,IAA6BD,MAA7B;AAEA,aAAO,IAAP;AACH,KAZE;;AAcH;AACR;AACA;AACA;AACA;AACA;AACA;AACQE,IAAAA,SAAS,CAAEC,IAAF,EAAQ;AACb,aAAON,KAAK,CAACC,OAAN,CAAcK,IAAd,CAAP;AACH,KAvBE;;AAyBH;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,cAAc,GAAI;AACd,aAAOC,MAAM,CAACC,IAAP,CAAYT,KAAK,CAACC,OAAlB,CAAP;AACH;;AAjCE,GAAP;AAmCH;AAED;AACA;AACA;;;AACAS,MAAM,CAACC,OAAP,GAAiBZ,qBAAqB,EAAtC","sourcesContent":["/*\n * Copyright (c) 2018, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\n/**\n * AuthenticationManager factory.\n * @private\n * @alias AuthenticationManager\n * @returns {AuthenticationManager}\n */\nfunction AuthenticationManager () {\n    const state = { plugins: [] };\n\n    return {\n        /**\n         * Register a new authentication plugin.\n         * @function\n         * @name module:AuthenticationManager#registerPlugin\n         * @param {AuthPlugin} plugin - AuthPlugin implementation\n         * @returns {AuthenticationManager} The AuthenticationManager singleton instance.\n         */\n        registerPlugin (plugin) {\n            state.plugins[plugin.Name] = plugin;\n\n            return this;\n        },\n\n        /**\n         * Retrieve a plugin implementation.\n         * @function\n         * @name module:AuthenticationManager#registerPlugin\n         * @param {string} name - plugin name\n         * @returns {AuthPlugin} An AuthPlugin implementation.\n         */\n        getPlugin (name) {\n            return state.plugins[name];\n        },\n\n        /**\n         * Retrieve the list of names of available plugins.\n         * @function\n         * @name module:AuthenticationManager#getPluginNames\n         * @returns {string[]} The list of plugin names.\n         */\n        getPluginNames () {\n            return Object.keys(state.plugins);\n        }\n    };\n}\n\n/**\n * Exposes an AuthenticationManager singleton.\n */\nmodule.exports = AuthenticationManager();\n"]},"metadata":{},"sourceType":"script"}