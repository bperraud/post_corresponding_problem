{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst errors = require('../constants/errors');\n\nconst logger = require('../logger');\n\nconst preparing = require('./Preparing');\n\nconst warnings = require('../constants/warnings');\n\nconst log = logger('api');\n/**\n * Enum the current statement lifecycle stage.\n * @readonly\n * @private\n * @name PREPARE_OPTIONS\n * @enum {number}\n */\n\nconst PREPARE_OPTIONS = {\n  TO_PREPARE: 1,\n  TO_NOT_PREPARE: 2\n};\n/**\n * Limiting mixin.\n * @mixin\n * @alias Limiting\n * @param {Object} state - limiting properties\n * @returns {Limiting}\n */\n\nfunction Limiting(state) {\n  state = Object.assign({\n    stage: PREPARE_OPTIONS.TO_PREPARE,\n    preparable: preparing()\n  }, state);\n  return {\n    /**\n     * Retrieve the maximum size of the result set.\n     * @function\n     * @private\n     * @name Limiting#getCount\n     * @returns {number} The number of items.\n     */\n    getCount() {\n      return state.count;\n    },\n\n    /**\n     * Add query limit count and offset.\n     * @function\n     * @name Limiting#limit\n     * @param {Number} count - count of the result set\n     * @param {Number} [offset] - number of records to skip\n     * @throws {Error} When the limit count or offset are invalid.\n     * @returns {Limiting} The query instance.\n     */\n    limit(count, offset) {\n      this.resetStage();\n\n      if (arguments[1]) {\n        log.warning('limit', warnings.MESSAGES.WARN_DEPRECATED_LIMIT_WITH_OFFSET, {\n          type: warnings.TYPES.DEPRECATION,\n          code: warnings.CODES.DEPRECATION\n        });\n      }\n\n      if (isNaN(parseInt(count, 10)) || count < 0) {\n        throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_LIMIT_INPUT);\n      }\n\n      state.count = count;\n\n      if (typeof this.offset !== 'function') {\n        return this;\n      } // TODO(Rui): update after deprecation period\n      // Adding a value for LIMIT should force a default OFFSET=0 to streamline prepared statement support.\n\n\n      if (!offset) {\n        return this.offset(state.offset || 0);\n      }\n\n      return this.offset(offset);\n    },\n\n    /**\n     * @function\n     * @private\n     * @name Limiting#resetStage\n     * @returns {Limiting} The query instance.\n     */\n    resetStage() {\n      if (state.stage !== PREPARE_OPTIONS.TO_PREPARE) {\n        return;\n      }\n\n      state.preparable.forceReprepare();\n      state.stage = PREPARE_OPTIONS.TO_NOT_PREPARE;\n      return this;\n    },\n\n    /**\n     * @function\n     * @private\n     * @name Limiting#setCount\n     * @param {number} value - number of items\n     * @returns {Limiting} The query instance.\n     * @deprecated since version 8.0.12. Will be removed in future versions.\n     */\n    setCount(count) {\n      log.warning('setCount', warnings.MESSAGES.WARN_DEPRECATED_LIMIT_SET_COUNT, {\n        type: warnings.TYPES.DEPRECATION,\n        code: warnings.CODES.DEPRECATION\n      });\n      state.count = count;\n      return this;\n    }\n\n  };\n}\n\n;\nLimiting.PREPARE_OPTIONS = PREPARE_OPTIONS;\nmodule.exports = Limiting;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/Limiting.js"],"names":["errors","require","logger","preparing","warnings","log","PREPARE_OPTIONS","TO_PREPARE","TO_NOT_PREPARE","Limiting","state","Object","assign","stage","preparable","getCount","count","limit","offset","resetStage","arguments","warning","MESSAGES","WARN_DEPRECATED_LIMIT_WITH_OFFSET","type","TYPES","DEPRECATION","code","CODES","isNaN","parseInt","Error","ER_DEVAPI_BAD_LIMIT_INPUT","forceReprepare","setCount","WARN_DEPRECATED_LIMIT_SET_COUNT","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst errors = require('../constants/errors');\nconst logger = require('../logger');\nconst preparing = require('./Preparing');\nconst warnings = require('../constants/warnings');\n\nconst log = logger('api');\n\n/**\n * Enum the current statement lifecycle stage.\n * @readonly\n * @private\n * @name PREPARE_OPTIONS\n * @enum {number}\n */\nconst PREPARE_OPTIONS = {\n    TO_PREPARE: 1,\n    TO_NOT_PREPARE: 2\n};\n\n/**\n * Limiting mixin.\n * @mixin\n * @alias Limiting\n * @param {Object} state - limiting properties\n * @returns {Limiting}\n */\nfunction Limiting (state) {\n    state = Object.assign({ stage: PREPARE_OPTIONS.TO_PREPARE, preparable: preparing() }, state);\n\n    return {\n        /**\n         * Retrieve the maximum size of the result set.\n         * @function\n         * @private\n         * @name Limiting#getCount\n         * @returns {number} The number of items.\n         */\n        getCount () {\n            return state.count;\n        },\n\n        /**\n         * Add query limit count and offset.\n         * @function\n         * @name Limiting#limit\n         * @param {Number} count - count of the result set\n         * @param {Number} [offset] - number of records to skip\n         * @throws {Error} When the limit count or offset are invalid.\n         * @returns {Limiting} The query instance.\n         */\n        limit (count, offset) {\n            this.resetStage();\n\n            if (arguments[1]) {\n                log.warning('limit', warnings.MESSAGES.WARN_DEPRECATED_LIMIT_WITH_OFFSET, {\n                    type: warnings.TYPES.DEPRECATION,\n                    code: warnings.CODES.DEPRECATION\n                });\n            }\n\n            if (isNaN(parseInt(count, 10)) || count < 0) {\n                throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_LIMIT_INPUT);\n            }\n\n            state.count = count;\n\n            if (typeof this.offset !== 'function') {\n                return this;\n            }\n\n            // TODO(Rui): update after deprecation period\n            // Adding a value for LIMIT should force a default OFFSET=0 to streamline prepared statement support.\n            if (!offset) {\n                return this.offset(state.offset || 0);\n            }\n\n            return this.offset(offset);\n        },\n\n        /**\n         * @function\n         * @private\n         * @name Limiting#resetStage\n         * @returns {Limiting} The query instance.\n         */\n        resetStage () {\n            if (state.stage !== PREPARE_OPTIONS.TO_PREPARE) {\n                return;\n            }\n\n            state.preparable.forceReprepare();\n            state.stage = PREPARE_OPTIONS.TO_NOT_PREPARE;\n\n            return this;\n        },\n\n        /**\n         * @function\n         * @private\n         * @name Limiting#setCount\n         * @param {number} value - number of items\n         * @returns {Limiting} The query instance.\n         * @deprecated since version 8.0.12. Will be removed in future versions.\n         */\n        setCount (count) {\n            log.warning('setCount', warnings.MESSAGES.WARN_DEPRECATED_LIMIT_SET_COUNT, {\n                type: warnings.TYPES.DEPRECATION,\n                code: warnings.CODES.DEPRECATION\n            });\n\n            state.count = count;\n\n            return this;\n        }\n    };\n};\n\nLimiting.PREPARE_OPTIONS = PREPARE_OPTIONS;\n\nmodule.exports = Limiting;\n"]},"metadata":{},"sourceType":"script"}