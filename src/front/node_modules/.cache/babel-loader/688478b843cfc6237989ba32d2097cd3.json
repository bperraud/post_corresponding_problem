{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst OpenStub = require('../../../Stubs/mysqlx_expect_pb').Open;\n\nconst condition = require('./Condition');\n\nconst serializable = require('../../Traits/Serializable');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Expect.Open\n * @param {proto.Mysqlx.Expect.Open} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Expect.Open}\n */\n\n\nfunction Open(proto) {\n  return Object.assign({}, serializable(proto), wraps(proto), {\n    /**\n     * Retrieve the operation name.\n     * @function\n     * @name module:adapters.Mysqlx.Expect.Open#getOperation\n     * @returns {string} The operation name\n     */\n    getOperation() {\n      return Object.keys(OpenStub.CtxOperation).filter(k => OpenStub.CtxOperation[k] === proto.getOp())[0];\n    },\n\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Expect.Open#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        op: this.getOperation(),\n        cond: proto.getCondList().map(c => condition(c).toJSON())\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Expect.Open instance given a list of expectations.\n * @returns {module:adapters.Mysqlx.Expect.Open}\n */\n\n\nOpen.create = function (expectations) {\n  const proto = new OpenStub();\n  proto.setCondList(expectations.map(e => condition.create(e).valueOf()));\n  return Open(proto);\n};\n\nmodule.exports = Open;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Expect/Open.js"],"names":["OpenStub","require","Open","condition","serializable","wraps","proto","Object","assign","getOperation","keys","CtxOperation","filter","k","getOp","toJSON","op","cond","getCondList","map","c","create","expectations","setCondList","e","valueOf","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,iCAAD,CAAP,CAA2CC,IAA5D;;AACA,MAAMC,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,IAAT,CAAeI,KAAf,EAAsB;AAClB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,YAAY,CAACE,KAAD,CAA9B,EAAuCD,KAAK,CAACC,KAAD,CAA5C,EAAqD;AACxD;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,YAAY,GAAI;AACZ,aAAOF,MAAM,CAACG,IAAP,CAAYV,QAAQ,CAACW,YAArB,EACFC,MADE,CACKC,CAAC,IAAIb,QAAQ,CAACW,YAAT,CAAsBE,CAAtB,MAA6BP,KAAK,CAACQ,KAAN,EADvC,EACsD,CADtD,CAAP;AAEH,KAVuD;;AAYxD;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,MAAM,GAAI;AACN,aAAO;AACHC,QAAAA,EAAE,EAAE,KAAKP,YAAL,EADD;AAEHQ,QAAAA,IAAI,EAAEX,KAAK,CAACY,WAAN,GAAoBC,GAApB,CAAwBC,CAAC,IAAIjB,SAAS,CAACiB,CAAD,CAAT,CAAaL,MAAb,EAA7B;AAFH,OAAP;AAIH;;AAvBuD,GAArD,CAAP;AAyBH;AAED;AACA;AACA;AACA;;;AACAb,IAAI,CAACmB,MAAL,GAAc,UAAUC,YAAV,EAAwB;AAClC,QAAMhB,KAAK,GAAG,IAAIN,QAAJ,EAAd;AACAM,EAAAA,KAAK,CAACiB,WAAN,CAAkBD,YAAY,CAACH,GAAb,CAAiBK,CAAC,IAAIrB,SAAS,CAACkB,MAAV,CAAiBG,CAAjB,EAAoBC,OAApB,EAAtB,CAAlB;AAEA,SAAOvB,IAAI,CAACI,KAAD,CAAX;AACH,CALD;;AAOAoB,MAAM,CAACC,OAAP,GAAiBzB,IAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst OpenStub = require('../../../Stubs/mysqlx_expect_pb').Open;\nconst condition = require('./Condition');\nconst serializable = require('../../Traits/Serializable');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Expect.Open\n * @param {proto.Mysqlx.Expect.Open} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Expect.Open}\n */\nfunction Open (proto) {\n    return Object.assign({}, serializable(proto), wraps(proto), {\n        /**\n         * Retrieve the operation name.\n         * @function\n         * @name module:adapters.Mysqlx.Expect.Open#getOperation\n         * @returns {string} The operation name\n         */\n        getOperation () {\n            return Object.keys(OpenStub.CtxOperation)\n                .filter(k => OpenStub.CtxOperation[k] === proto.getOp())[0];\n        },\n\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Expect.Open#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                op: this.getOperation(),\n                cond: proto.getCondList().map(c => condition(c).toJSON())\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Expect.Open instance given a list of expectations.\n * @returns {module:adapters.Mysqlx.Expect.Open}\n */\nOpen.create = function (expectations) {\n    const proto = new OpenStub();\n    proto.setCondList(expectations.map(e => condition.create(e).valueOf()));\n\n    return Open(proto);\n};\n\nmodule.exports = Open;\n"]},"metadata":{},"sourceType":"script"}