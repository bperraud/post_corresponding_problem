{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst FindStub = require('../../../Stubs/mysqlx_crud_pb').Find;\n\nconst collection = require('./Collection');\n\nconst expr = require('../Expr/Expr');\n\nconst limit = require('./Limit');\n\nconst limitExpr = require('./LimitExpr');\n\nconst list = require('../../Traits/List');\n\nconst order = require('./Order');\n\nconst polyglot = require('../../Traits/Polyglot');\n\nconst projection = require('./Projection');\n\nconst scalar = require('../Datatypes/Scalar');\n\nconst serializable = require('../../Traits/Serializable');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Find\n * @param {proto.Mysqlx.Crud.Find} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Find}\n */\n\n\nfunction Find(proto) {\n  return Object.assign({}, polyglot(proto), serializable(proto), wraps(proto), {\n    /**\n     * Retireve the name of the type of behavior of an associated lock.\n     * @function\n     * @name module:adapters.Mysqlx.Crud.Find#getLockOptions\n     * @returns {string}\n     */\n    getLockOptions() {\n      return Object.keys(FindStub.RowLockOptions).filter(k => FindStub.RowLockOptions[k] === proto.getLockingOptions())[0];\n    },\n\n    /**\n     * Retireve the name of the type of the associated lock.\n     * @function\n     * @name module:adapters.Mysqlx.Crud.Find#getLockType\n     * @returns {string}\n     */\n    getLockType() {\n      return Object.keys(FindStub.RowLock).filter(k => FindStub.RowLock[k] === proto.getLocking())[0];\n    },\n\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Crud.Find#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        collection: collection(proto.getCollection()).toJSON(),\n        data_model: this.getDataModel(),\n        projection: list(proto.getProjectionList().map(column => projection(column))).toJSON(),\n        criteria: expr(proto.getCriteria()).toJSON(),\n        args: list(proto.getArgsList().map(arg => scalar(arg))).toJSON(),\n        order: list(proto.getOrderList().map(rule => order(rule))).toJSON(),\n        grouping: list(proto.getGroupingList().map(column => expr(column))).toJSON(),\n        grouping_criteria: expr(proto.getGroupingCriteria()).toJSON(),\n        locking: this.getLockType(),\n        locking_options: this.getLockOptions(),\n        limit: limit(proto.getLimit()).toJSON(),\n        limit_expr: limitExpr(proto.getLimitExpr()).toJSON()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Find instance for a given statement.\n * @param {module:CollectionFind|module:TableSelect} statement\n * @param {Object} [options] - extended options\n * @returns {module:adapters.Mysqlx.Crud.Find}\n */\n\n\nFind.create = function (statement, options) {\n  options = Object.assign({}, {\n    mode: statement.getCategory(),\n    toParse: true,\n    toPrepare: false\n  }, options);\n  const proto = new FindStub();\n  proto.setCollection(collection.create(statement.getTableName(), statement.getSchema()).valueOf());\n  proto.setDataModel(statement.getCategory());\n  proto.setProjectionList(statement.getProjections().map(column => projection.create(column, options).valueOf()));\n  const criteria = expr.create(statement.getCriteria(), options);\n  proto.setCriteria(criteria.valueOf());\n  const args = criteria.getPlaceholderArgs(statement.getBindings()); // Placeholder assignments can't be encoded in the Prepare stage\n\n  if (!options.toPrepare) {\n    proto.setArgsList(args); // non-prepared statements should use Mysqlx.Crud.Limit to keep compatibility with older server versions\n\n    proto.setLimit(limit.create(statement.getCount(), statement.getOffset()).valueOf());\n  } else {\n    // if row_count and offset should be placeholders, they need to map to the\n    // appropriate position index (args.length + i)\n    proto.setLimitExpr(limitExpr.create(statement.getCount(), statement.getOffset(), Object.assign({}, options, {\n      position: args.length\n    })).valueOf());\n  }\n\n  proto.setOrderList(statement.getOrderings().map(column => order.create(column, options).valueOf()));\n  proto.setGroupingList(statement.getGroupings().map(column => expr.create(column, options).valueOf()));\n  proto.setGroupingCriteria(expr.create(statement.getGroupingCriteria(), options).valueOf());\n  proto.setLocking(statement.getRowLock());\n  proto.setLockingOptions(statement.getLockContention());\n  return Find(proto);\n};\n\nmodule.exports = Find;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Crud/Find.js"],"names":["FindStub","require","Find","collection","expr","limit","limitExpr","list","order","polyglot","projection","scalar","serializable","wraps","proto","Object","assign","getLockOptions","keys","RowLockOptions","filter","k","getLockingOptions","getLockType","RowLock","getLocking","toJSON","getCollection","data_model","getDataModel","getProjectionList","map","column","criteria","getCriteria","args","getArgsList","arg","getOrderList","rule","grouping","getGroupingList","grouping_criteria","getGroupingCriteria","locking","locking_options","getLimit","limit_expr","getLimitExpr","create","statement","options","mode","getCategory","toParse","toPrepare","setCollection","getTableName","getSchema","valueOf","setDataModel","setProjectionList","getProjections","setCriteria","getPlaceholderArgs","getBindings","setArgsList","setLimit","getCount","getOffset","setLimitExpr","position","length","setOrderList","getOrderings","setGroupingList","getGroupings","setGroupingCriteria","setLocking","getRowLock","setLockingOptions","getLockContention","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst FindStub = require('../../../Stubs/mysqlx_crud_pb').Find;\nconst collection = require('./Collection');\nconst expr = require('../Expr/Expr');\nconst limit = require('./Limit');\nconst limitExpr = require('./LimitExpr');\nconst list = require('../../Traits/List');\nconst order = require('./Order');\nconst polyglot = require('../../Traits/Polyglot');\nconst projection = require('./Projection');\nconst scalar = require('../Datatypes/Scalar');\nconst serializable = require('../../Traits/Serializable');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Find\n * @param {proto.Mysqlx.Crud.Find} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Find}\n */\nfunction Find (proto) {\n    return Object.assign({}, polyglot(proto), serializable(proto), wraps(proto), {\n        /**\n         * Retireve the name of the type of behavior of an associated lock.\n         * @function\n         * @name module:adapters.Mysqlx.Crud.Find#getLockOptions\n         * @returns {string}\n         */\n        getLockOptions () {\n            return Object.keys(FindStub.RowLockOptions)\n                .filter(k => FindStub.RowLockOptions[k] === proto.getLockingOptions())[0];\n        },\n\n        /**\n         * Retireve the name of the type of the associated lock.\n         * @function\n         * @name module:adapters.Mysqlx.Crud.Find#getLockType\n         * @returns {string}\n         */\n        getLockType () {\n            return Object.keys(FindStub.RowLock)\n                .filter(k => FindStub.RowLock[k] === proto.getLocking())[0];\n        },\n\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Crud.Find#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                collection: collection(proto.getCollection()).toJSON(),\n                data_model: this.getDataModel(),\n                projection: list(proto.getProjectionList().map(column => projection(column))).toJSON(),\n                criteria: expr(proto.getCriteria()).toJSON(),\n                args: list(proto.getArgsList().map(arg => scalar(arg))).toJSON(),\n                order: list(proto.getOrderList().map(rule => order(rule))).toJSON(),\n                grouping: list(proto.getGroupingList().map(column => expr(column))).toJSON(),\n                grouping_criteria: expr(proto.getGroupingCriteria()).toJSON(),\n                locking: this.getLockType(),\n                locking_options: this.getLockOptions(),\n                limit: limit(proto.getLimit()).toJSON(),\n                limit_expr: limitExpr(proto.getLimitExpr()).toJSON()\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Find instance for a given statement.\n * @param {module:CollectionFind|module:TableSelect} statement\n * @param {Object} [options] - extended options\n * @returns {module:adapters.Mysqlx.Crud.Find}\n */\nFind.create = function (statement, options) {\n    options = Object.assign({}, { mode: statement.getCategory(), toParse: true, toPrepare: false }, options);\n\n    const proto = new FindStub();\n\n    proto.setCollection(collection.create(statement.getTableName(), statement.getSchema()).valueOf());\n    proto.setDataModel(statement.getCategory());\n    proto.setProjectionList(statement.getProjections().map(column => projection.create(column, options).valueOf()));\n\n    const criteria = expr.create(statement.getCriteria(), options);\n    proto.setCriteria(criteria.valueOf());\n\n    const args = criteria.getPlaceholderArgs(statement.getBindings());\n\n    // Placeholder assignments can't be encoded in the Prepare stage\n    if (!options.toPrepare) {\n        proto.setArgsList(args);\n        // non-prepared statements should use Mysqlx.Crud.Limit to keep compatibility with older server versions\n        proto.setLimit(limit.create(statement.getCount(), statement.getOffset()).valueOf());\n    } else {\n        // if row_count and offset should be placeholders, they need to map to the\n        // appropriate position index (args.length + i)\n        proto.setLimitExpr(limitExpr.create(statement.getCount(), statement.getOffset(), Object.assign({}, options, { position: args.length })).valueOf());\n    }\n\n    proto.setOrderList(statement.getOrderings().map(column => order.create(column, options).valueOf()));\n    proto.setGroupingList(statement.getGroupings().map(column => expr.create(column, options).valueOf()));\n\n    proto.setGroupingCriteria(expr.create(statement.getGroupingCriteria(), options).valueOf());\n\n    proto.setLocking(statement.getRowLock());\n    proto.setLockingOptions(statement.getLockContention());\n\n    return Find(proto);\n};\n\nmodule.exports = Find;\n"]},"metadata":{},"sourceType":"script"}