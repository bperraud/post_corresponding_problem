{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst documentPathItem = require('./DocumentPathItem');\n\nconst list = require('../../Traits/List');\n\nconst optionalString = require('../../Traits/OptionalString');\n\nconst parser = require('../../../../ExprParser');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Expr.ColumnIdentifier\n * @param {proto.Mysqlx.Expr.ColumnIdentifier} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Expr.ColumnIdentifier}\n */\n\n\nfunction ColumnIdentifier(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Expr.ColumnIdentifier#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        document_path: list(proto.getDocumentPathList().map(item => documentPathItem(item))).toJSON(),\n        name: optionalString(proto.getName()).toJSON(),\n        table_name: optionalString(proto.getTableName()).toJSON(),\n        schema_name: optionalString(proto.getSchemaName()).toJSON()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Expr.ColumnIdentifier instance given an expression.\n * @returns {module:adapters.Mysqlx.Expr.ColumnIdentifier}\n */\n\n\nColumnIdentifier.create = function (value, options) {\n  options = Object.assign({}, {\n    type: parser.Type.COLUMN_OR_PATH\n  }, options);\n  return ColumnIdentifier(parser.parse(value, options).getIdentifier());\n};\n\nmodule.exports = ColumnIdentifier;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Expr/ColumnIdentifier.js"],"names":["documentPathItem","require","list","optionalString","parser","wraps","ColumnIdentifier","proto","Object","assign","toJSON","document_path","getDocumentPathList","map","item","name","getName","table_name","getTableName","schema_name","getSchemaName","create","value","options","type","Type","COLUMN_OR_PATH","parse","getIdentifier","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAAhC;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,mBAAD,CAApB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,6BAAD,CAA9B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,wBAAD,CAAtB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,gBAAT,CAA2BC,KAA3B,EAAkC;AAC9B,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAK,CAACE,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAO;AACHC,QAAAA,aAAa,EAAET,IAAI,CAACK,KAAK,CAACK,mBAAN,GAA4BC,GAA5B,CAAgCC,IAAI,IAAId,gBAAgB,CAACc,IAAD,CAAxD,CAAD,CAAJ,CAAsEJ,MAAtE,EADZ;AAEHK,QAAAA,IAAI,EAAEZ,cAAc,CAACI,KAAK,CAACS,OAAN,EAAD,CAAd,CAAgCN,MAAhC,EAFH;AAGHO,QAAAA,UAAU,EAAEd,cAAc,CAACI,KAAK,CAACW,YAAN,EAAD,CAAd,CAAqCR,MAArC,EAHT;AAIHS,QAAAA,WAAW,EAAEhB,cAAc,CAACI,KAAK,CAACa,aAAN,EAAD,CAAd,CAAsCV,MAAtC;AAJV,OAAP;AAMH;;AAdkC,GAAhC,CAAP;AAgBH;AAED;AACA;AACA;AACA;;;AACAJ,gBAAgB,CAACe,MAAjB,GAA0B,UAAUC,KAAV,EAAiBC,OAAjB,EAA0B;AAChDA,EAAAA,OAAO,GAAGf,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAAEe,IAAAA,IAAI,EAAEpB,MAAM,CAACqB,IAAP,CAAYC;AAApB,GAAlB,EAAwDH,OAAxD,CAAV;AAEA,SAAOjB,gBAAgB,CAACF,MAAM,CAACuB,KAAP,CAAaL,KAAb,EAAoBC,OAApB,EAA6BK,aAA7B,EAAD,CAAvB;AACH,CAJD;;AAMAC,MAAM,CAACC,OAAP,GAAiBxB,gBAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst documentPathItem = require('./DocumentPathItem');\nconst list = require('../../Traits/List');\nconst optionalString = require('../../Traits/OptionalString');\nconst parser = require('../../../../ExprParser');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Expr.ColumnIdentifier\n * @param {proto.Mysqlx.Expr.ColumnIdentifier} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Expr.ColumnIdentifier}\n */\nfunction ColumnIdentifier (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Expr.ColumnIdentifier#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                document_path: list(proto.getDocumentPathList().map(item => documentPathItem(item))).toJSON(),\n                name: optionalString(proto.getName()).toJSON(),\n                table_name: optionalString(proto.getTableName()).toJSON(),\n                schema_name: optionalString(proto.getSchemaName()).toJSON()\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Expr.ColumnIdentifier instance given an expression.\n * @returns {module:adapters.Mysqlx.Expr.ColumnIdentifier}\n */\nColumnIdentifier.create = function (value, options) {\n    options = Object.assign({}, { type: parser.Type.COLUMN_OR_PATH }, options);\n\n    return ColumnIdentifier(parser.parse(value, options).getIdentifier());\n};\n\nmodule.exports = ColumnIdentifier;\n"]},"metadata":{},"sourceType":"script"}