{"ast":null,"code":"/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst binding = require('./Binding');\n\nconst collectionOrdering = require('./CollectionOrdering');\n\nconst grouping = require('./Grouping');\n\nconst locking = require('./Locking');\n\nconst parseFlexibleParamList = require('./Util/parseFlexibleParamList');\n\nconst preparing = require('./Preparing');\n\nconst projecting = require('./Projecting');\n\nconst query = require('./Query');\n\nconst result = require('./DocResult');\n\nconst skipping = require('./Skipping');\n\nconst type = require('../Protocol/Stubs/mysqlx_prepare_pb').Prepare.OneOfMessage.Type.FIND;\n/**\n * CollectionFind factory.\n * @module CollectionFind\n * @mixes Binding\n * @mixes Grouping\n * @mixes Skipping\n * @mixes Locking\n * @mixes CollectionOrdering\n * @mixes Projecting\n * @mixes Query\n */\n\n/**\n * @private\n * @alias module:CollectionFind\n * @param {Connection} connection - database connection context\n * @param {module:Schema} schema - schema to bind\n * @param {string} tableName - collection name\n * @param {string} [criteria] - filtering criteria expression\n * @returns {module:CollectionFind}\n */\n\n\nfunction CollectionFind(connection, schema, tableName, criteria) {\n  const state = {\n    preparable: preparing({\n      connection\n    })\n  };\n  const base = Object.assign({}, binding({\n    criteria\n  }), collectionOrdering(state), grouping(state), locking(state), projecting(), query({\n    schema,\n    tableName,\n    type\n  }), skipping(state));\n  state.preparable = Object.assign({}, base, state.preparable);\n  return Object.assign({}, base, {\n    /**\n     * Pick collection properties for projection.\n     * @function\n     * @name module:CollectionFind#fields\n     * @param {string[]|string} projections - expression with the properties to pick\n     * @returns {module:CollectionFind} The query instance.\n     */\n    fields() {\n      state.preparable.forceRestart();\n      return this.setProjections(parseFlexibleParamList(Array.prototype.slice.call(arguments)));\n    },\n\n    /**\n     * Document cursor.\n     * @callback module:CollectionFind~documentCursor\n     * @param {object} object - the document in the current cursor position\n     */\n\n    /**\n     * Execute find query.\n     * @function\n     * @name module:CollectionFind#execute\n     * @param {module:CollectionFind~documentCursor} [dataCursor] - callback function to handle results\n     * @return {Promise.<module:DocResult>}\n     */\n    execute(dataCursor) {\n      // Before trying to send any message to the server, we need to\n      // check if the connection is open (has a client instance) or if\n      // it became idle in the meantime.\n      if (!connection.isOpen() || connection.isIdle()) {\n        // There is always a default error (ER_DEVAPI_CONNECTION_CLOSED).\n        return Promise.reject(connection.getError());\n      }\n\n      const cursor = dataCursor ? row => dataCursor(row[0]) : undefined;\n\n      const fn = () => connection.getClient().crudFind(this, cursor);\n\n      return state.preparable.execute(fn, cursor).then(details => result(details));\n    }\n\n  });\n}\n\nmodule.exports = CollectionFind;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/CollectionFind.js"],"names":["binding","require","collectionOrdering","grouping","locking","parseFlexibleParamList","preparing","projecting","query","result","skipping","type","Prepare","OneOfMessage","Type","FIND","CollectionFind","connection","schema","tableName","criteria","state","preparable","base","Object","assign","fields","forceRestart","setProjections","Array","prototype","slice","call","arguments","execute","dataCursor","isOpen","isIdle","Promise","reject","getError","cursor","row","undefined","fn","getClient","crudFind","then","details","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,sBAAD,CAAlC;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMI,sBAAsB,GAAGJ,OAAO,CAAC,+BAAD,CAAtC;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMM,UAAU,GAAGN,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMO,KAAK,GAAGP,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMQ,MAAM,GAAGR,OAAO,CAAC,aAAD,CAAtB;;AACA,MAAMS,QAAQ,GAAGT,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMU,IAAI,GAAGV,OAAO,CAAC,qCAAD,CAAP,CAA+CW,OAA/C,CAAuDC,YAAvD,CAAoEC,IAApE,CAAyEC,IAAtF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAyBC,UAAzB,EAAqCC,MAArC,EAA6CC,SAA7C,EAAwDC,QAAxD,EAAkE;AAC9D,QAAMC,KAAK,GAAG;AAAEC,IAAAA,UAAU,EAAEhB,SAAS,CAAC;AAAEW,MAAAA;AAAF,KAAD;AAAvB,GAAd;AACA,QAAMM,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBzB,OAAO,CAAC;AAAEoB,IAAAA;AAAF,GAAD,CAAzB,EAAyClB,kBAAkB,CAACmB,KAAD,CAA3D,EAAoElB,QAAQ,CAACkB,KAAD,CAA5E,EAAqFjB,OAAO,CAACiB,KAAD,CAA5F,EAAqGd,UAAU,EAA/G,EAAmHC,KAAK,CAAC;AAAEU,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBR,IAAAA;AAArB,GAAD,CAAxH,EAAuJD,QAAQ,CAACW,KAAD,CAA/J,CAAb;AAEAA,EAAAA,KAAK,CAACC,UAAN,GAAmBE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,IAAlB,EAAwBF,KAAK,CAACC,UAA9B,CAAnB;AAEA,SAAOE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,IAAlB,EAAwB;AAC3B;AACR;AACA;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACNL,MAAAA,KAAK,CAACC,UAAN,CAAiBK,YAAjB;AAEA,aAAO,KAAKC,cAAL,CAAoBvB,sBAAsB,CAACwB,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAD,CAA1C,CAAP;AACH,KAZ0B;;AAc3B;AACR;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,OAAO,CAAEC,UAAF,EAAc;AACjB;AACA;AACA;AACA,UAAI,CAAClB,UAAU,CAACmB,MAAX,EAAD,IAAwBnB,UAAU,CAACoB,MAAX,EAA5B,EAAiD;AAC7C;AACA,eAAOC,OAAO,CAACC,MAAR,CAAetB,UAAU,CAACuB,QAAX,EAAf,CAAP;AACH;;AAED,YAAMC,MAAM,GAAGN,UAAU,GAAGO,GAAG,IAAIP,UAAU,CAACO,GAAG,CAAC,CAAD,CAAJ,CAApB,GAA+BC,SAAxD;;AACA,YAAMC,EAAE,GAAG,MAAM3B,UAAU,CAAC4B,SAAX,GAAuBC,QAAvB,CAAgC,IAAhC,EAAsCL,MAAtC,CAAjB;;AAEA,aAAOpB,KAAK,CAACC,UAAN,CAAiBY,OAAjB,CAAyBU,EAAzB,EAA6BH,MAA7B,EACFM,IADE,CACGC,OAAO,IAAIvC,MAAM,CAACuC,OAAD,CADpB,CAAP;AAEH;;AAzC0B,GAAxB,CAAP;AA2CH;;AAEDC,MAAM,CAACC,OAAP,GAAiBlC,cAAjB","sourcesContent":["/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst binding = require('./Binding');\nconst collectionOrdering = require('./CollectionOrdering');\nconst grouping = require('./Grouping');\nconst locking = require('./Locking');\nconst parseFlexibleParamList = require('./Util/parseFlexibleParamList');\nconst preparing = require('./Preparing');\nconst projecting = require('./Projecting');\nconst query = require('./Query');\nconst result = require('./DocResult');\nconst skipping = require('./Skipping');\nconst type = require('../Protocol/Stubs/mysqlx_prepare_pb').Prepare.OneOfMessage.Type.FIND;\n\n/**\n * CollectionFind factory.\n * @module CollectionFind\n * @mixes Binding\n * @mixes Grouping\n * @mixes Skipping\n * @mixes Locking\n * @mixes CollectionOrdering\n * @mixes Projecting\n * @mixes Query\n */\n\n/**\n * @private\n * @alias module:CollectionFind\n * @param {Connection} connection - database connection context\n * @param {module:Schema} schema - schema to bind\n * @param {string} tableName - collection name\n * @param {string} [criteria] - filtering criteria expression\n * @returns {module:CollectionFind}\n */\nfunction CollectionFind (connection, schema, tableName, criteria) {\n    const state = { preparable: preparing({ connection }) };\n    const base = Object.assign({}, binding({ criteria }), collectionOrdering(state), grouping(state), locking(state), projecting(), query({ schema, tableName, type }), skipping(state));\n\n    state.preparable = Object.assign({}, base, state.preparable);\n\n    return Object.assign({}, base, {\n        /**\n         * Pick collection properties for projection.\n         * @function\n         * @name module:CollectionFind#fields\n         * @param {string[]|string} projections - expression with the properties to pick\n         * @returns {module:CollectionFind} The query instance.\n         */\n        fields () {\n            state.preparable.forceRestart();\n\n            return this.setProjections(parseFlexibleParamList(Array.prototype.slice.call(arguments)));\n        },\n\n        /**\n         * Document cursor.\n         * @callback module:CollectionFind~documentCursor\n         * @param {object} object - the document in the current cursor position\n         */\n\n        /**\n         * Execute find query.\n         * @function\n         * @name module:CollectionFind#execute\n         * @param {module:CollectionFind~documentCursor} [dataCursor] - callback function to handle results\n         * @return {Promise.<module:DocResult>}\n         */\n        execute (dataCursor) {\n            // Before trying to send any message to the server, we need to\n            // check if the connection is open (has a client instance) or if\n            // it became idle in the meantime.\n            if (!connection.isOpen() || connection.isIdle()) {\n                // There is always a default error (ER_DEVAPI_CONNECTION_CLOSED).\n                return Promise.reject(connection.getError());\n            }\n\n            const cursor = dataCursor ? row => dataCursor(row[0]) : undefined;\n            const fn = () => connection.getClient().crudFind(this, cursor);\n\n            return state.preparable.execute(fn, cursor)\n                .then(details => result(details));\n        }\n    });\n}\n\nmodule.exports = CollectionFind;\n"]},"metadata":{},"sourceType":"script"}