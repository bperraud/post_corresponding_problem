{"ast":null,"code":"/*\n * Copyright (c) 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst os = require('os');\n/**\n * Utilities for extracting system-wide details.\n * @private\n * @module System\n */\n\n/**\n * Mapping of operating system names returned by the core Node.js API\n * and their corresponding commercial convention.\n * @private\n */\n\n\nconst BRAND_MAP = {\n  freebsd: 'FreeBSD',\n  linux: 'Linux',\n  darwin: 'macOS',\n  sunos: 'Solaris',\n  win32: 'Windows'\n};\n/**\n * Mapping of processor architecture names returned by the core Node.js API\n * and their corresponding commercial convention.\n * @private\n */\n\nconst ARCHITECTURE_MAP = {\n  arm: 'ARM',\n  ia32: 'i386',\n  x64: 'x86_64'\n};\n/**\n * Collection of functions to compute the commercialized version from the\n * values returned by the core Node.js API for each specific platform.\n * @private\n * @example\n * darwin@18.2.0 = macOS-10.14\n * sunos@5.11.4 = Solaris-11.4\n */\n\nconst VERSION_MAP = {\n  freebsd: v => v.match(/(\\d+\\.\\d+).*/)[1],\n  linux: v => v.match(/([^-]+).*/)[1],\n  darwin: v => `10.${parseInt(v.match(/([^.]+).*/)[1], 10) - 4}`,\n  sunos: v => v.match(/\\d+\\.([^-]+).*/)[1],\n  win32: v => v.match(/([^-]+).*/)[1]\n};\n/**\n * Returns the version of the system running in the machine using a standard convention.\n * @private\n * @function\n * @returns {string} The platform name.\n */\n\nfunction version() {\n  const name = os.platform();\n  const version = os.release();\n\n  if (VERSION_MAP[name]) {\n    return VERSION_MAP[name](version);\n  }\n\n  let dashOffset = version.indexOf('-');\n\n  if (dashOffset === -1) {\n    dashOffset = version.length;\n  }\n\n  return version.substring(0, dashOffset);\n}\n/**\n * Retrieve the operating system brand name and version.\n * @private\n * @returns {string}\n */\n\n\nexports.brand = function () {\n  const name = os.platform();\n  let convention = BRAND_MAP[name];\n\n  if (!convention) {\n    convention = name;\n  }\n\n  convention += '-' + version();\n  return convention;\n};\n/**\n * Retrieve the system hostname.\n * @private\n * @returns {string}\n */\n\n\nexports.hostname = function () {\n  return os.hostname();\n};\n/**\n * Retrieve the process id in the scope of the underlying system.\n * @private\n * @returns {string}\n */\n\n\nexports.pid = function () {\n  return process.pid.toString();\n};\n/**\n * Retrieve the platform name associated with the processor architecture.\n * @private\n * @returns {string}\n * @example\n * x86_64\n * i386\n * ARM\n */\n\n\nexports.platform = function () {\n  const base = os.arch();\n  let convention = ARCHITECTURE_MAP[base];\n\n  if (!convention) {\n    convention = base;\n  }\n\n  return convention;\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/system.js"],"names":["os","require","BRAND_MAP","freebsd","linux","darwin","sunos","win32","ARCHITECTURE_MAP","arm","ia32","x64","VERSION_MAP","v","match","parseInt","version","name","platform","release","dashOffset","indexOf","length","substring","exports","brand","convention","hostname","pid","process","toString","base","arch"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,SAAS,GAAG;AACdC,EAAAA,OAAO,EAAE,SADK;AAEdC,EAAAA,KAAK,EAAE,OAFO;AAGdC,EAAAA,MAAM,EAAE,OAHM;AAIdC,EAAAA,KAAK,EAAE,SAJO;AAKdC,EAAAA,KAAK,EAAE;AALO,CAAlB;AAQA;AACA;AACA;AACA;AACA;;AACA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,GAAG,EAAE,KADgB;AAErBC,EAAAA,IAAI,EAAE,MAFe;AAGrBC,EAAAA,GAAG,EAAE;AAHgB,CAAzB;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG;AAChBT,EAAAA,OAAO,EAAEU,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQ,cAAR,EAAwB,CAAxB,CADE;AAEhBV,EAAAA,KAAK,EAAES,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQ,WAAR,EAAqB,CAArB,CAFI;AAGhBT,EAAAA,MAAM,EAAEQ,CAAC,IAAK,MAAKE,QAAQ,CAACF,CAAC,CAACC,KAAF,CAAQ,WAAR,EAAqB,CAArB,CAAD,EAA0B,EAA1B,CAAR,GAAwC,CAAE,EAH7C;AAIhBR,EAAAA,KAAK,EAAEO,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQ,gBAAR,EAA0B,CAA1B,CAJI;AAKhBP,EAAAA,KAAK,EAAEM,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQ,WAAR,EAAqB,CAArB;AALI,CAApB;AAQA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,OAAT,GAAoB;AAChB,QAAMC,IAAI,GAAGjB,EAAE,CAACkB,QAAH,EAAb;AACA,QAAMF,OAAO,GAAGhB,EAAE,CAACmB,OAAH,EAAhB;;AAEA,MAAIP,WAAW,CAACK,IAAD,CAAf,EAAuB;AACnB,WAAOL,WAAW,CAACK,IAAD,CAAX,CAAkBD,OAAlB,CAAP;AACH;;AAED,MAAII,UAAU,GAAGJ,OAAO,CAACK,OAAR,CAAgB,GAAhB,CAAjB;;AACA,MAAID,UAAU,KAAK,CAAC,CAApB,EAAuB;AACnBA,IAAAA,UAAU,GAAGJ,OAAO,CAACM,MAArB;AACH;;AAED,SAAON,OAAO,CAACO,SAAR,CAAkB,CAAlB,EAAqBH,UAArB,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;;;AACAI,OAAO,CAACC,KAAR,GAAgB,YAAY;AACxB,QAAMR,IAAI,GAAGjB,EAAE,CAACkB,QAAH,EAAb;AAEA,MAAIQ,UAAU,GAAGxB,SAAS,CAACe,IAAD,CAA1B;;AACA,MAAI,CAACS,UAAL,EAAiB;AACbA,IAAAA,UAAU,GAAGT,IAAb;AACH;;AAEDS,EAAAA,UAAU,IAAI,MAAMV,OAAO,EAA3B;AAEA,SAAOU,UAAP;AACH,CAXD;AAaA;AACA;AACA;AACA;AACA;;;AACAF,OAAO,CAACG,QAAR,GAAmB,YAAY;AAC3B,SAAO3B,EAAE,CAAC2B,QAAH,EAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAH,OAAO,CAACI,GAAR,GAAc,YAAY;AACtB,SAAOC,OAAO,CAACD,GAAR,CAAYE,QAAZ,EAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAN,OAAO,CAACN,QAAR,GAAmB,YAAY;AAC3B,QAAMa,IAAI,GAAG/B,EAAE,CAACgC,IAAH,EAAb;AAEA,MAAIN,UAAU,GAAGlB,gBAAgB,CAACuB,IAAD,CAAjC;;AACA,MAAI,CAACL,UAAL,EAAiB;AACbA,IAAAA,UAAU,GAAGK,IAAb;AACH;;AAED,SAAOL,UAAP;AACH,CATD","sourcesContent":["/*\n * Copyright (c) 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst os = require('os');\n\n/**\n * Utilities for extracting system-wide details.\n * @private\n * @module System\n */\n\n/**\n * Mapping of operating system names returned by the core Node.js API\n * and their corresponding commercial convention.\n * @private\n */\nconst BRAND_MAP = {\n    freebsd: 'FreeBSD',\n    linux: 'Linux',\n    darwin: 'macOS',\n    sunos: 'Solaris',\n    win32: 'Windows'\n};\n\n/**\n * Mapping of processor architecture names returned by the core Node.js API\n * and their corresponding commercial convention.\n * @private\n */\nconst ARCHITECTURE_MAP = {\n    arm: 'ARM',\n    ia32: 'i386',\n    x64: 'x86_64'\n};\n\n/**\n * Collection of functions to compute the commercialized version from the\n * values returned by the core Node.js API for each specific platform.\n * @private\n * @example\n * darwin@18.2.0 = macOS-10.14\n * sunos@5.11.4 = Solaris-11.4\n */\nconst VERSION_MAP = {\n    freebsd: v => v.match(/(\\d+\\.\\d+).*/)[1],\n    linux: v => v.match(/([^-]+).*/)[1],\n    darwin: v => `10.${parseInt(v.match(/([^.]+).*/)[1], 10) - 4}`,\n    sunos: v => v.match(/\\d+\\.([^-]+).*/)[1],\n    win32: v => v.match(/([^-]+).*/)[1]\n};\n\n/**\n * Returns the version of the system running in the machine using a standard convention.\n * @private\n * @function\n * @returns {string} The platform name.\n */\nfunction version () {\n    const name = os.platform();\n    const version = os.release();\n\n    if (VERSION_MAP[name]) {\n        return VERSION_MAP[name](version);\n    }\n\n    let dashOffset = version.indexOf('-');\n    if (dashOffset === -1) {\n        dashOffset = version.length;\n    }\n\n    return version.substring(0, dashOffset);\n}\n\n/**\n * Retrieve the operating system brand name and version.\n * @private\n * @returns {string}\n */\nexports.brand = function () {\n    const name = os.platform();\n\n    let convention = BRAND_MAP[name];\n    if (!convention) {\n        convention = name;\n    }\n\n    convention += '-' + version();\n\n    return convention;\n};\n\n/**\n * Retrieve the system hostname.\n * @private\n * @returns {string}\n */\nexports.hostname = function () {\n    return os.hostname();\n};\n\n/**\n * Retrieve the process id in the scope of the underlying system.\n * @private\n * @returns {string}\n */\nexports.pid = function () {\n    return process.pid.toString();\n};\n\n/**\n * Retrieve the platform name associated with the processor architecture.\n * @private\n * @returns {string}\n * @example\n * x86_64\n * i386\n * ARM\n */\nexports.platform = function () {\n    const base = os.arch();\n\n    let convention = ARCHITECTURE_MAP[base];\n    if (!convention) {\n        convention = base;\n    }\n\n    return convention;\n};\n"]},"metadata":{},"sourceType":"script"}