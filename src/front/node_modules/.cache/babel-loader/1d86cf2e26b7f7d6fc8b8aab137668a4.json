{"ast":null,"code":"/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst authPlugin = require('./AuthPlugin');\n\nconst errors = require('../constants/errors');\n\nconst util = require('util');\n\nconst {\n  sha1,\n  xor\n} = require('../crypto');\n\nconst Name = 'MYSQL41';\n/**\n * MySQL41Auth factory.\n * @private\n * @alias MySQL41Auth\n * @param {Object} state - plugin properties\n * @returns {MySQL41Auth} A plugin instance.\n */\n\nfunction MySQL41Auth(state) {\n  state = Object.assign({\n    algorithm: 'sha1',\n    hashSize: 20,\n    nonceSize: 20\n  }, state);\n  return Object.assign({}, authPlugin(state), {\n    /**\n     * Generate the payload for the first authentication step.\n     * @function\n     * @name module:MySQL41Auth#getInitialAuthData\n     * @returns {undefined}\n     */\n    getInitialAuthData() {},\n\n    /**\n     * Retrieve the name of the authentication mechanism (client plugin).\n     * @function\n     * @name module:MySQL41Auth#getName\n     * @returns {string} 'MYSQL41'\n     */\n    getName() {\n      return Name;\n    },\n\n    /**\n     * Generate the payload for the second authentication step.\n     * @function\n     * @name module:MySQL41Auth#getNextAuthData\n     * @param {Buffer} nonce - nonce returned by the server in the first step\n     * @returns {Buffer} A Node.js buffer with a hexadecimal value in the format of \"[SCHEMA]\\0USER\\0*[SCRAMBLE]\\0\".\n     */\n    getNextAuthData(nonce) {\n      if (nonce.length !== state.nonceSize) {\n        throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_AUTH_NONCE_MISMATCH, state.nonceSize, nonce.length));\n      }\n\n      const schema = this.getSchema();\n      const user = this.getUser();\n      const password = this.getPassword(); // if the password is not empty, since the hash is an hexadecimal string,\n      // we should accomodate enough space for each character\n\n      const size = !password ? schema.length + user.length + 2 : schema.length + user.length + state.hashSize * 2 + 3; // We want the buffer to be zero-filled by default, so we should\n      // use Buffer.alloc().\n\n      const authData = Buffer.alloc(size);\n      authData.write(schema);\n      authData.write(user, schema.length + 1);\n      authData.write('*', schema.length + user.length + 2);\n\n      if (!password) {\n        // authData=\"[SCHEMA]\\0USER\\0*\\0\"\n        return authData;\n      } // authData = \"[SCHEMA]\\0USER\\0*SCRAMBLE\\0\"\n\n\n      const scramble = xor(sha1(password), sha1(nonce, sha1(sha1(password))));\n      authData.write(scramble.toString('hex'), schema.length + user.length + 3);\n      return authData;\n    }\n\n  });\n}\n\nMySQL41Auth.Name = Name;\nmodule.exports = MySQL41Auth;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Authentication/MySQL41Auth.js"],"names":["authPlugin","require","errors","util","sha1","xor","Name","MySQL41Auth","state","Object","assign","algorithm","hashSize","nonceSize","getInitialAuthData","getName","getNextAuthData","nonce","length","Error","format","MESSAGES","ER_DEVAPI_AUTH_NONCE_MISMATCH","schema","getSchema","user","getUser","password","getPassword","size","authData","Buffer","alloc","write","scramble","toString","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst authPlugin = require('./AuthPlugin');\nconst errors = require('../constants/errors');\nconst util = require('util');\nconst { sha1, xor } = require('../crypto');\n\nconst Name = 'MYSQL41';\n\n/**\n * MySQL41Auth factory.\n * @private\n * @alias MySQL41Auth\n * @param {Object} state - plugin properties\n * @returns {MySQL41Auth} A plugin instance.\n */\nfunction MySQL41Auth (state) {\n    state = Object.assign({ algorithm: 'sha1', hashSize: 20, nonceSize: 20 }, state);\n\n    return Object.assign({}, authPlugin(state), {\n        /**\n         * Generate the payload for the first authentication step.\n         * @function\n         * @name module:MySQL41Auth#getInitialAuthData\n         * @returns {undefined}\n         */\n        getInitialAuthData () {},\n\n        /**\n         * Retrieve the name of the authentication mechanism (client plugin).\n         * @function\n         * @name module:MySQL41Auth#getName\n         * @returns {string} 'MYSQL41'\n         */\n        getName () {\n            return Name;\n        },\n\n        /**\n         * Generate the payload for the second authentication step.\n         * @function\n         * @name module:MySQL41Auth#getNextAuthData\n         * @param {Buffer} nonce - nonce returned by the server in the first step\n         * @returns {Buffer} A Node.js buffer with a hexadecimal value in the format of \"[SCHEMA]\\0USER\\0*[SCRAMBLE]\\0\".\n         */\n        getNextAuthData (nonce) {\n            if (nonce.length !== state.nonceSize) {\n                throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_AUTH_NONCE_MISMATCH, state.nonceSize, nonce.length));\n            }\n\n            const schema = this.getSchema();\n            const user = this.getUser();\n            const password = this.getPassword();\n            // if the password is not empty, since the hash is an hexadecimal string,\n            // we should accomodate enough space for each character\n            const size = !password ? schema.length + user.length + 2 : schema.length + user.length + state.hashSize * 2 + 3;\n\n            // We want the buffer to be zero-filled by default, so we should\n            // use Buffer.alloc().\n            const authData = Buffer.alloc(size);\n            authData.write(schema);\n            authData.write(user, schema.length + 1);\n            authData.write('*', schema.length + user.length + 2);\n\n            if (!password) {\n                // authData=\"[SCHEMA]\\0USER\\0*\\0\"\n                return authData;\n            }\n\n            // authData = \"[SCHEMA]\\0USER\\0*SCRAMBLE\\0\"\n            const scramble = xor(sha1(password), sha1(nonce, sha1(sha1(password))));\n            authData.write(scramble.toString('hex'), schema.length + user.length + 3);\n\n            return authData;\n        }\n    });\n}\n\nMySQL41Auth.Name = Name;\n\nmodule.exports = MySQL41Auth;\n"]},"metadata":{},"sourceType":"script"}