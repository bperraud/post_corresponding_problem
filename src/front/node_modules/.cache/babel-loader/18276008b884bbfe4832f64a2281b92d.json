{"ast":null,"code":"/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst binding = require('./Binding');\n\nconst errors = require('../constants/errors');\n\nconst limiting = require('./Limiting');\n\nconst collectionOrdering = require('./CollectionOrdering');\n\nconst preparing = require('./Preparing');\n\nconst query = require('./Query');\n\nconst result = require('./Result');\n\nconst type = require('../Protocol/Stubs/mysqlx_prepare_pb').Prepare.OneOfMessage.Type.DELETE;\n\nconst util = require('util');\n/**\n * CollectionRemove factory.\n * @module CollectionRemove\n * @mixes Binding\n * @mixes Limiting\n * @mixes CollectionOrdering\n * @mixes Query\n */\n\n/**\n * @private\n * @alias module:CollectionRemove\n * @param {Connection} connection - database connection context\n * @param {module:Schema} schema - schema to bind\n * @param {string} tableName - collection name\n * @param {string} [criteria] - filtering criteria expression\n * @returns {module:CollectionRemove}\n */\n\n\nfunction CollectionRemove(connection, schema, tableName, criteria) {\n  const state = {\n    preparable: preparing({\n      connection\n    })\n  };\n  const base = Object.assign({}, binding({\n    criteria: criteria || ''\n  }), collectionOrdering(state), limiting(state), query({\n    schema,\n    tableName,\n    type\n  }));\n  state.preparable = Object.assign({}, base, state.preparable);\n  return Object.assign({}, base, {\n    /**\n     * Execute remove query.\n     * @function\n     * @name module:CollectionRemove#execute\n     * @return {Promise.<module:Result>}\n     */\n    execute() {\n      const criteria = this.getCriteria().trim(); // An explicit criteria needs to be provided. This is to avoid\n      // updating all documents in a collection by mistake.\n\n      if (!criteria.length) {\n        return Promise.reject(new Error(util.format(errors.MESSAGES.ER_DEVAPI_MISSING_DOCUMENT_CRITERIA, 'remove()')));\n      } // Before trying to send any message to the server, we need to\n      // check if the connection is open (has a client instance) or if\n      // it became idle in the meantime.\n\n\n      if (!connection.isOpen() || connection.isIdle()) {\n        // There is always a default error (ER_DEVAPI_CONNECTION_CLOSED).\n        return Promise.reject(connection.getError());\n      }\n\n      const fn = () => connection.getClient().crudRemove(this);\n\n      return state.preparable.execute(fn).then(details => result(details));\n    }\n\n  });\n}\n\nmodule.exports = CollectionRemove;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/CollectionRemove.js"],"names":["binding","require","errors","limiting","collectionOrdering","preparing","query","result","type","Prepare","OneOfMessage","Type","DELETE","util","CollectionRemove","connection","schema","tableName","criteria","state","preparable","base","Object","assign","execute","getCriteria","trim","length","Promise","reject","Error","format","MESSAGES","ER_DEVAPI_MISSING_DOCUMENT_CRITERIA","isOpen","isIdle","getError","fn","getClient","crudRemove","then","details","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,qBAAD,CAAtB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,sBAAD,CAAlC;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMO,IAAI,GAAGP,OAAO,CAAC,qCAAD,CAAP,CAA+CQ,OAA/C,CAAuDC,YAAvD,CAAoEC,IAApE,CAAyEC,MAAtF;;AACA,MAAMC,IAAI,GAAGZ,OAAO,CAAC,MAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASa,gBAAT,CAA2BC,UAA3B,EAAuCC,MAAvC,EAA+CC,SAA/C,EAA0DC,QAA1D,EAAoE;AAChE,QAAMC,KAAK,GAAG;AAAEC,IAAAA,UAAU,EAAEf,SAAS,CAAC;AAAEU,MAAAA;AAAF,KAAD;AAAvB,GAAd;AACA,QAAMM,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBvB,OAAO,CAAC;AAAEkB,IAAAA,QAAQ,EAAEA,QAAQ,IAAI;AAAxB,GAAD,CAAzB,EAAyDd,kBAAkB,CAACe,KAAD,CAA3E,EAAoFhB,QAAQ,CAACgB,KAAD,CAA5F,EAAqGb,KAAK,CAAC;AAAEU,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBT,IAAAA;AAArB,GAAD,CAA1G,CAAb;AAEAW,EAAAA,KAAK,CAACC,UAAN,GAAmBE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,IAAlB,EAAwBF,KAAK,CAACC,UAA9B,CAAnB;AAEA,SAAOE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,IAAlB,EAAwB;AAC3B;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,OAAO,GAAI;AACP,YAAMN,QAAQ,GAAG,KAAKO,WAAL,GAAmBC,IAAnB,EAAjB,CADO,CAEP;AACA;;AACA,UAAI,CAACR,QAAQ,CAACS,MAAd,EAAsB;AAClB,eAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAUjB,IAAI,CAACkB,MAAL,CAAY7B,MAAM,CAAC8B,QAAP,CAAgBC,mCAA5B,EAAiE,UAAjE,CAAV,CAAf,CAAP;AACH,OANM,CAQP;AACA;AACA;;;AACA,UAAI,CAAClB,UAAU,CAACmB,MAAX,EAAD,IAAwBnB,UAAU,CAACoB,MAAX,EAA5B,EAAiD;AAC7C;AACA,eAAOP,OAAO,CAACC,MAAR,CAAed,UAAU,CAACqB,QAAX,EAAf,CAAP;AACH;;AAED,YAAMC,EAAE,GAAG,MAAMtB,UAAU,CAACuB,SAAX,GAAuBC,UAAvB,CAAkC,IAAlC,CAAjB;;AAEA,aAAOpB,KAAK,CAACC,UAAN,CAAiBI,OAAjB,CAAyBa,EAAzB,EACFG,IADE,CACGC,OAAO,IAAIlC,MAAM,CAACkC,OAAD,CADpB,CAAP;AAEH;;AA3B0B,GAAxB,CAAP;AA6BH;;AAEDC,MAAM,CAACC,OAAP,GAAiB7B,gBAAjB","sourcesContent":["/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst binding = require('./Binding');\nconst errors = require('../constants/errors');\nconst limiting = require('./Limiting');\nconst collectionOrdering = require('./CollectionOrdering');\nconst preparing = require('./Preparing');\nconst query = require('./Query');\nconst result = require('./Result');\nconst type = require('../Protocol/Stubs/mysqlx_prepare_pb').Prepare.OneOfMessage.Type.DELETE;\nconst util = require('util');\n\n/**\n * CollectionRemove factory.\n * @module CollectionRemove\n * @mixes Binding\n * @mixes Limiting\n * @mixes CollectionOrdering\n * @mixes Query\n */\n\n/**\n * @private\n * @alias module:CollectionRemove\n * @param {Connection} connection - database connection context\n * @param {module:Schema} schema - schema to bind\n * @param {string} tableName - collection name\n * @param {string} [criteria] - filtering criteria expression\n * @returns {module:CollectionRemove}\n */\nfunction CollectionRemove (connection, schema, tableName, criteria) {\n    const state = { preparable: preparing({ connection }) };\n    const base = Object.assign({}, binding({ criteria: criteria || '' }), collectionOrdering(state), limiting(state), query({ schema, tableName, type }));\n\n    state.preparable = Object.assign({}, base, state.preparable);\n\n    return Object.assign({}, base, {\n        /**\n         * Execute remove query.\n         * @function\n         * @name module:CollectionRemove#execute\n         * @return {Promise.<module:Result>}\n         */\n        execute () {\n            const criteria = this.getCriteria().trim();\n            // An explicit criteria needs to be provided. This is to avoid\n            // updating all documents in a collection by mistake.\n            if (!criteria.length) {\n                return Promise.reject(new Error(util.format(errors.MESSAGES.ER_DEVAPI_MISSING_DOCUMENT_CRITERIA, 'remove()')));\n            }\n\n            // Before trying to send any message to the server, we need to\n            // check if the connection is open (has a client instance) or if\n            // it became idle in the meantime.\n            if (!connection.isOpen() || connection.isIdle()) {\n                // There is always a default error (ER_DEVAPI_CONNECTION_CLOSED).\n                return Promise.reject(connection.getError());\n            }\n\n            const fn = () => connection.getClient().crudRemove(this);\n\n            return state.preparable.execute(fn)\n                .then(details => result(details));\n        }\n    });\n}\n\nmodule.exports = CollectionRemove;\n"]},"metadata":{},"sourceType":"script"}