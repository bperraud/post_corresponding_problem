{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst OneOfMessageStub = require('../../../Stubs/mysqlx_prepare_pb').Prepare.OneOfMessage;\n\nconst crudDelete = require('../../Messages/Crud/Delete');\n\nconst crudFind = require('../../Messages/Crud/Find');\n\nconst crudUpdate = require('../../Messages/Crud/Update');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Prepare.Prepare.OneOfMessage\n * @param {proto.Mysqlx.Prepare.Prepare.OneOfMessage} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Prepare.Prepare.OneOfMessage}\n */\n\n\nfunction OneOfMessage(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Retrieve the type name of the message.\n     * @function\n     * @name module:adapters.Mysqlx.Prepare.Prepare.OneOfMessage#getType\n     * @returns {string}\n     */\n    getType() {\n      return Object.keys(OneOfMessageStub.Type).filter(k => OneOfMessageStub.Type[k] === proto.getType())[0];\n    },\n\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Prepare.Prepare.OneOfMessage#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      const json = {\n        type: this.getType()\n      };\n\n      switch (proto.getType()) {\n        case OneOfMessageStub.Type.FIND:\n          return Object.assign({}, json, {\n            find: crudFind(proto.getFind()).toJSON()\n          });\n\n        case OneOfMessageStub.Type.UPDATE:\n          return Object.assign({}, json, {\n            update: crudUpdate(proto.getUpdate()).toJSON()\n          });\n\n        case OneOfMessageStub.Type.DELETE:\n          return Object.assign({}, json, {\n            delete: crudDelete(proto.getDelete()).toJSON()\n          });\n\n        default:\n          return json;\n      }\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Prepare.Prepare.OneOfMessage instance for a given statement.\n * @param {Preparing} statement\n * @param {Object} [options] - extended options\n * @returns {module:adapters.Mysqlx.Prepare.Prepare.OneOfMessage}\n */\n\n\nOneOfMessage.create = function (statement, options) {\n  const proto = new OneOfMessageStub();\n  const type = statement.getType();\n  proto.setType(type);\n\n  if (type === OneOfMessageStub.Type.FIND) {\n    proto.setFind(crudFind.create(statement, options).valueOf());\n  } else if (type === OneOfMessageStub.Type.UPDATE) {\n    proto.setUpdate(crudUpdate.create(statement, options).valueOf());\n  } else if (type === OneOfMessageStub.Type.DELETE) {\n    proto.setDelete(crudDelete.create(statement, options).valueOf());\n  }\n\n  return OneOfMessage(proto);\n};\n\nmodule.exports = OneOfMessage;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Prepare/OneOfMessage.js"],"names":["OneOfMessageStub","require","Prepare","OneOfMessage","crudDelete","crudFind","crudUpdate","wraps","proto","Object","assign","getType","keys","Type","filter","k","toJSON","json","type","FIND","find","getFind","UPDATE","update","getUpdate","DELETE","delete","getDelete","create","statement","options","setType","setFind","valueOf","setUpdate","setDelete","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,kCAAD,CAAP,CAA4CC,OAA5C,CAAoDC,YAA7E;;AACA,MAAMC,UAAU,GAAGH,OAAO,CAAC,4BAAD,CAA1B;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,0BAAD,CAAxB;;AACA,MAAMK,UAAU,GAAGL,OAAO,CAAC,4BAAD,CAA1B;;AACA,MAAMM,KAAK,GAAGN,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,YAAT,CAAuBK,KAAvB,EAA8B;AAC1B,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAK,CAACC,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,OAAO,GAAI;AACP,aAAOF,MAAM,CAACG,IAAP,CAAYZ,gBAAgB,CAACa,IAA7B,EACFC,MADE,CACKC,CAAC,IAAIf,gBAAgB,CAACa,IAAjB,CAAsBE,CAAtB,MAA6BP,KAAK,CAACG,OAAN,EADvC,EACwD,CADxD,CAAP;AAEH,KAVkC;;AAYnC;AACR;AACA;AACA;AACA;AACA;AACQK,IAAAA,MAAM,GAAI;AACN,YAAMC,IAAI,GAAG;AAAEC,QAAAA,IAAI,EAAE,KAAKP,OAAL;AAAR,OAAb;;AAEA,cAAQH,KAAK,CAACG,OAAN,EAAR;AACA,aAAKX,gBAAgB,CAACa,IAAjB,CAAsBM,IAA3B;AACI,iBAAOV,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBO,IAAlB,EAAwB;AAAEG,YAAAA,IAAI,EAAEf,QAAQ,CAACG,KAAK,CAACa,OAAN,EAAD,CAAR,CAA0BL,MAA1B;AAAR,WAAxB,CAAP;;AACJ,aAAKhB,gBAAgB,CAACa,IAAjB,CAAsBS,MAA3B;AACI,iBAAOb,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBO,IAAlB,EAAwB;AAAEM,YAAAA,MAAM,EAAEjB,UAAU,CAACE,KAAK,CAACgB,SAAN,EAAD,CAAV,CAA8BR,MAA9B;AAAV,WAAxB,CAAP;;AACJ,aAAKhB,gBAAgB,CAACa,IAAjB,CAAsBY,MAA3B;AACI,iBAAOhB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBO,IAAlB,EAAwB;AAAES,YAAAA,MAAM,EAAEtB,UAAU,CAACI,KAAK,CAACmB,SAAN,EAAD,CAAV,CAA8BX,MAA9B;AAAV,WAAxB,CAAP;;AACJ;AACI,iBAAOC,IAAP;AARJ;AAUH;;AA/BkC,GAAhC,CAAP;AAiCH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAd,YAAY,CAACyB,MAAb,GAAsB,UAAUC,SAAV,EAAqBC,OAArB,EAA8B;AAChD,QAAMtB,KAAK,GAAG,IAAIR,gBAAJ,EAAd;AAEA,QAAMkB,IAAI,GAAGW,SAAS,CAAClB,OAAV,EAAb;AACAH,EAAAA,KAAK,CAACuB,OAAN,CAAcb,IAAd;;AAEA,MAAIA,IAAI,KAAKlB,gBAAgB,CAACa,IAAjB,CAAsBM,IAAnC,EAAyC;AACrCX,IAAAA,KAAK,CAACwB,OAAN,CAAc3B,QAAQ,CAACuB,MAAT,CAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCG,OAApC,EAAd;AACH,GAFD,MAEO,IAAIf,IAAI,KAAKlB,gBAAgB,CAACa,IAAjB,CAAsBS,MAAnC,EAA2C;AAC9Cd,IAAAA,KAAK,CAAC0B,SAAN,CAAgB5B,UAAU,CAACsB,MAAX,CAAkBC,SAAlB,EAA6BC,OAA7B,EAAsCG,OAAtC,EAAhB;AACH,GAFM,MAEA,IAAIf,IAAI,KAAKlB,gBAAgB,CAACa,IAAjB,CAAsBY,MAAnC,EAA2C;AAC9CjB,IAAAA,KAAK,CAAC2B,SAAN,CAAgB/B,UAAU,CAACwB,MAAX,CAAkBC,SAAlB,EAA6BC,OAA7B,EAAsCG,OAAtC,EAAhB;AACH;;AAED,SAAO9B,YAAY,CAACK,KAAD,CAAnB;AACH,CAfD;;AAiBA4B,MAAM,CAACC,OAAP,GAAiBlC,YAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst OneOfMessageStub = require('../../../Stubs/mysqlx_prepare_pb').Prepare.OneOfMessage;\nconst crudDelete = require('../../Messages/Crud/Delete');\nconst crudFind = require('../../Messages/Crud/Find');\nconst crudUpdate = require('../../Messages/Crud/Update');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Prepare.Prepare.OneOfMessage\n * @param {proto.Mysqlx.Prepare.Prepare.OneOfMessage} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Prepare.Prepare.OneOfMessage}\n */\nfunction OneOfMessage (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Retrieve the type name of the message.\n         * @function\n         * @name module:adapters.Mysqlx.Prepare.Prepare.OneOfMessage#getType\n         * @returns {string}\n         */\n        getType () {\n            return Object.keys(OneOfMessageStub.Type)\n                .filter(k => OneOfMessageStub.Type[k] === proto.getType())[0];\n        },\n\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Prepare.Prepare.OneOfMessage#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            const json = { type: this.getType() };\n\n            switch (proto.getType()) {\n            case OneOfMessageStub.Type.FIND:\n                return Object.assign({}, json, { find: crudFind(proto.getFind()).toJSON() });\n            case OneOfMessageStub.Type.UPDATE:\n                return Object.assign({}, json, { update: crudUpdate(proto.getUpdate()).toJSON() });\n            case OneOfMessageStub.Type.DELETE:\n                return Object.assign({}, json, { delete: crudDelete(proto.getDelete()).toJSON() });\n            default:\n                return json;\n            }\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Prepare.Prepare.OneOfMessage instance for a given statement.\n * @param {Preparing} statement\n * @param {Object} [options] - extended options\n * @returns {module:adapters.Mysqlx.Prepare.Prepare.OneOfMessage}\n */\nOneOfMessage.create = function (statement, options) {\n    const proto = new OneOfMessageStub();\n\n    const type = statement.getType();\n    proto.setType(type);\n\n    if (type === OneOfMessageStub.Type.FIND) {\n        proto.setFind(crudFind.create(statement, options).valueOf());\n    } else if (type === OneOfMessageStub.Type.UPDATE) {\n        proto.setUpdate(crudUpdate.create(statement, options).valueOf());\n    } else if (type === OneOfMessageStub.Type.DELETE) {\n        proto.setDelete(crudDelete.create(statement, options).valueOf());\n    }\n\n    return OneOfMessage(proto);\n};\n\nmodule.exports = OneOfMessage;\n"]},"metadata":{},"sourceType":"script"}