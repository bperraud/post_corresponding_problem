{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst ordering = require('./Ordering');\n\nconst parseFlexibleParamList = require('./Util/parseFlexibleParamList');\n\nconst preparing = require('./Preparing');\n/**\n * TableOrdering mixin.\n * @mixin\n * @alias TableOrdering\n * @param {Object} state - ordering properties\n * @returns {Ordering}\n */\n\n\nfunction TableOrdering(state) {\n  state = Object.assign({\n    preparable: preparing()\n  }, state);\n  return Object.assign({}, ordering(), {\n    /**\n     * Add <code>ORDER BY</code> clause (set the order options of the result set).\n     * @function\n     * @name TableOrdering#orderBy\n     * @param {...string|string[]} [SortExprStr] - columns (and direction) to sort\n     * @throws {Error} When an expression is invalid.\n     * @example\n     * // arguments as columns (and direction) to sort\n     * const query = table.select('foo', 'bar').orderBy('foo asc', 'bar desc')\n     *\n     * // array of columns (and direction) to sort\n     * const query = table.select('foo', 'bar').orderBy(['foo asc', 'bar desc'])\n     * @returns {TableOrdering} The query instance.\n     */\n    orderBy() {\n      state.preparable.forceRestart();\n      return this.setOrderings(parseFlexibleParamList(Array.prototype.slice.call(arguments)));\n    }\n\n  });\n}\n\nmodule.exports = TableOrdering;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/TableOrdering.js"],"names":["ordering","require","parseFlexibleParamList","preparing","TableOrdering","state","Object","assign","preparable","orderBy","forceRestart","setOrderings","Array","prototype","slice","call","arguments","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,+BAAD,CAAtC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,aAAT,CAAwBC,KAAxB,EAA+B;AAC3BA,EAAAA,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,UAAU,EAAEL,SAAS;AAAvB,GAAd,EAA2CE,KAA3C,CAAR;AAEA,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,QAAQ,EAA1B,EAA8B;AACjC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQS,IAAAA,OAAO,GAAI;AACPJ,MAAAA,KAAK,CAACG,UAAN,CAAiBE,YAAjB;AAEA,aAAO,KAAKC,YAAL,CAAkBT,sBAAsB,CAACU,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAD,CAAxC,CAAP;AACH;;AAnBgC,GAA9B,CAAP;AAqBH;;AAEDC,MAAM,CAACC,OAAP,GAAiBd,aAAjB","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst ordering = require('./Ordering');\nconst parseFlexibleParamList = require('./Util/parseFlexibleParamList');\nconst preparing = require('./Preparing');\n\n/**\n * TableOrdering mixin.\n * @mixin\n * @alias TableOrdering\n * @param {Object} state - ordering properties\n * @returns {Ordering}\n */\nfunction TableOrdering (state) {\n    state = Object.assign({ preparable: preparing() }, state);\n\n    return Object.assign({}, ordering(), {\n        /**\n         * Add <code>ORDER BY</code> clause (set the order options of the result set).\n         * @function\n         * @name TableOrdering#orderBy\n         * @param {...string|string[]} [SortExprStr] - columns (and direction) to sort\n         * @throws {Error} When an expression is invalid.\n         * @example\n         * // arguments as columns (and direction) to sort\n         * const query = table.select('foo', 'bar').orderBy('foo asc', 'bar desc')\n         *\n         * // array of columns (and direction) to sort\n         * const query = table.select('foo', 'bar').orderBy(['foo asc', 'bar desc'])\n         * @returns {TableOrdering} The query instance.\n         */\n        orderBy () {\n            state.preparable.forceRestart();\n\n            return this.setOrderings(parseFlexibleParamList(Array.prototype.slice.call(arguments)));\n        }\n    });\n}\n\nmodule.exports = TableOrdering;\n"]},"metadata":{},"sourceType":"script"}