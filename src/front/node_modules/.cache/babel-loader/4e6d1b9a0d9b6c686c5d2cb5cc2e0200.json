{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst AuthenticateContinueStub = require('../../../Stubs/mysqlx_session_pb').AuthenticateContinue;\n\nconst ServerMessagesStub = require('../../../Stubs/mysqlx_pb').ServerMessages.Type;\n\nconst tokenizable = require('../../Traits/Tokenizable');\n\nconst serializable = require('../../Traits/Serializable');\n\nconst bytes = require('../../ScalarValues/bytes');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Session.AuthenticateContinue\n * @param {proto.Mysqlx.Session.AuthenticateContinue} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Session.AuthenticateContinue}\n */\n\n\nfunction AuthenticateContinue(proto) {\n  return Object.assign({}, tokenizable(proto), serializable(proto), wraps(proto));\n}\n/**\n * Creates and wraps a Mysqlx.Session.AuthenticateContinue instance with a given token.\n * @returns {module:adapters.Mysqlx.Session.AuthenticateContinue}\n */\n\n\nAuthenticateContinue.create = function (token) {\n  const proto = new AuthenticateContinueStub();\n  proto.setAuthData(bytes.create(token).valueOf());\n  return AuthenticateContinue(proto);\n};\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Session.AuthenticateContinue}\n */\n\n\nAuthenticateContinue.deserialize = function (buffer) {\n  return AuthenticateContinue(AuthenticateContinueStub.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nAuthenticateContinue.MESSAGE_ID = ServerMessagesStub.SESS_AUTHENTICATE_CONTINUE;\nmodule.exports = AuthenticateContinue;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Session/AuthenticateContinue.js"],"names":["AuthenticateContinueStub","require","AuthenticateContinue","ServerMessagesStub","ServerMessages","Type","tokenizable","serializable","bytes","wraps","proto","Object","assign","create","token","setAuthData","valueOf","deserialize","buffer","deserializeBinary","MESSAGE_ID","SESS_AUTHENTICATE_CONTINUE","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,wBAAwB,GAAGC,OAAO,CAAC,kCAAD,CAAP,CAA4CC,oBAA7E;;AACA,MAAMC,kBAAkB,GAAGF,OAAO,CAAC,0BAAD,CAAP,CAAoCG,cAApC,CAAmDC,IAA9E;;AACA,MAAMC,WAAW,GAAGL,OAAO,CAAC,0BAAD,CAA3B;;AACA,MAAMM,YAAY,GAAGN,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAMO,KAAK,GAAGP,OAAO,CAAC,0BAAD,CAArB;;AACA,MAAMQ,KAAK,GAAGR,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,oBAAT,CAA+BQ,KAA/B,EAAsC;AAClC,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,WAAW,CAACI,KAAD,CAA7B,EAAsCH,YAAY,CAACG,KAAD,CAAlD,EAA2DD,KAAK,CAACC,KAAD,CAAhE,CAAP;AACH;AAED;AACA;AACA;AACA;;;AACAR,oBAAoB,CAACW,MAArB,GAA8B,UAAUC,KAAV,EAAiB;AAC3C,QAAMJ,KAAK,GAAG,IAAIV,wBAAJ,EAAd;AACAU,EAAAA,KAAK,CAACK,WAAN,CAAkBP,KAAK,CAACK,MAAN,CAAaC,KAAb,EAAoBE,OAApB,EAAlB;AAEA,SAAOd,oBAAoB,CAACQ,KAAD,CAA3B;AACH,CALD;AAOA;AACA;AACA;AACA;;;AACAR,oBAAoB,CAACe,WAArB,GAAmC,UAAUC,MAAV,EAAkB;AACjD,SAAOhB,oBAAoB,CAACF,wBAAwB,CAACmB,iBAAzB,CAA2CX,KAAK,CAACS,WAAN,CAAkBC,MAAlB,CAA3C,CAAD,CAA3B;AACH,CAFD;;AAIAhB,oBAAoB,CAACkB,UAArB,GAAkCjB,kBAAkB,CAACkB,0BAArD;AAEAC,MAAM,CAACC,OAAP,GAAiBrB,oBAAjB","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst AuthenticateContinueStub = require('../../../Stubs/mysqlx_session_pb').AuthenticateContinue;\nconst ServerMessagesStub = require('../../../Stubs/mysqlx_pb').ServerMessages.Type;\nconst tokenizable = require('../../Traits/Tokenizable');\nconst serializable = require('../../Traits/Serializable');\nconst bytes = require('../../ScalarValues/bytes');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Session.AuthenticateContinue\n * @param {proto.Mysqlx.Session.AuthenticateContinue} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Session.AuthenticateContinue}\n */\nfunction AuthenticateContinue (proto) {\n    return Object.assign({}, tokenizable(proto), serializable(proto), wraps(proto));\n}\n\n/**\n * Creates and wraps a Mysqlx.Session.AuthenticateContinue instance with a given token.\n * @returns {module:adapters.Mysqlx.Session.AuthenticateContinue}\n */\nAuthenticateContinue.create = function (token) {\n    const proto = new AuthenticateContinueStub();\n    proto.setAuthData(bytes.create(token).valueOf());\n\n    return AuthenticateContinue(proto);\n};\n\n/**\n * Creates a wrapper from a raw X Protocol message payload.\n * @returns {module:adapters.Mysqlx.Session.AuthenticateContinue}\n */\nAuthenticateContinue.deserialize = function (buffer) {\n    return AuthenticateContinue(AuthenticateContinueStub.deserializeBinary(bytes.deserialize(buffer)));\n};\n\nAuthenticateContinue.MESSAGE_ID = ServerMessagesStub.SESS_AUTHENTICATE_CONTINUE;\n\nmodule.exports = AuthenticateContinue;\n"]},"metadata":{},"sourceType":"script"}