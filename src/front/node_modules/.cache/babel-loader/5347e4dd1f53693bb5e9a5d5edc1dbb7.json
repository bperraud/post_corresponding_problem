{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst LimitStub = require('../../../Stubs/mysqlx_crud_pb').Limit;\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Limit\n * @param {proto.Mysqlx.Crud.Limit} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Limit}\n */\n\n\nfunction Limit(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Crud.Limit#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      // Mysqlx.Crud.Limit and Mysqlx.Crud.LimitExpr are exclusive which\n      // means one of them will be undefined.\n      if (typeof proto === 'undefined') {\n        // In that case, we want the field to be ignored in the parent object.\n        return;\n      }\n\n      return {\n        row_count: proto.getRowCount(),\n        offset: proto.getOffset()\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Limit instance given a count (and offset).\n * @param {number} count\n * @param {number} [offset]\n * @returns {module:adapters.Mysqlx.Crud.Limit}\n */\n\n\nLimit.create = function (count, offset) {\n  // If the count is not defined there's nothing to do.\n  // We can't wrap an empty Mysqlx.Crud.Limit stub instance because it\n  // contains a default value of 0 for count, and that is not the\n  // intended behaviour.\n  if (typeof count === 'undefined') {\n    return Limit();\n  }\n\n  const proto = new LimitStub(); // count is requireds\n\n  proto.setRowCount(count); // offset is optional\n\n  if (typeof offset !== 'undefined') {\n    proto.setOffset(offset);\n  }\n\n  return Limit(proto);\n};\n\nmodule.exports = Limit;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Crud/Limit.js"],"names":["LimitStub","require","Limit","wraps","proto","Object","assign","toJSON","row_count","getRowCount","offset","getOffset","create","count","setRowCount","setOffset","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,+BAAD,CAAP,CAAyCC,KAA3D;;AACA,MAAMC,KAAK,GAAGF,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAgBE,KAAhB,EAAuB;AACnB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAK,CAACC,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN;AACA;AACA,UAAI,OAAOH,KAAP,KAAiB,WAArB,EAAkC;AAC9B;AACA;AACH;;AAED,aAAO;AACHI,QAAAA,SAAS,EAAEJ,KAAK,CAACK,WAAN,EADR;AAEHC,QAAAA,MAAM,EAAEN,KAAK,CAACO,SAAN;AAFL,OAAP;AAIH;;AAnBkC,GAAhC,CAAP;AAqBH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAT,KAAK,CAACU,MAAN,GAAe,UAAUC,KAAV,EAAiBH,MAAjB,EAAyB;AACpC;AACA;AACA;AACA;AACA,MAAI,OAAOG,KAAP,KAAiB,WAArB,EAAkC;AAC9B,WAAOX,KAAK,EAAZ;AACH;;AAED,QAAME,KAAK,GAAG,IAAIJ,SAAJ,EAAd,CAToC,CAWpC;;AACAI,EAAAA,KAAK,CAACU,WAAN,CAAkBD,KAAlB,EAZoC,CAcpC;;AACA,MAAI,OAAOH,MAAP,KAAkB,WAAtB,EAAmC;AAC/BN,IAAAA,KAAK,CAACW,SAAN,CAAgBL,MAAhB;AACH;;AAED,SAAOR,KAAK,CAACE,KAAD,CAAZ;AACH,CApBD;;AAsBAY,MAAM,CAACC,OAAP,GAAiBf,KAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst LimitStub = require('../../../Stubs/mysqlx_crud_pb').Limit;\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Limit\n * @param {proto.Mysqlx.Crud.Limit} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Limit}\n */\nfunction Limit (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Crud.Limit#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            // Mysqlx.Crud.Limit and Mysqlx.Crud.LimitExpr are exclusive which\n            // means one of them will be undefined.\n            if (typeof proto === 'undefined') {\n                // In that case, we want the field to be ignored in the parent object.\n                return;\n            }\n\n            return {\n                row_count: proto.getRowCount(),\n                offset: proto.getOffset()\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Limit instance given a count (and offset).\n * @param {number} count\n * @param {number} [offset]\n * @returns {module:adapters.Mysqlx.Crud.Limit}\n */\nLimit.create = function (count, offset) {\n    // If the count is not defined there's nothing to do.\n    // We can't wrap an empty Mysqlx.Crud.Limit stub instance because it\n    // contains a default value of 0 for count, and that is not the\n    // intended behaviour.\n    if (typeof count === 'undefined') {\n        return Limit();\n    }\n\n    const proto = new LimitStub();\n\n    // count is requireds\n    proto.setRowCount(count);\n\n    // offset is optional\n    if (typeof offset !== 'undefined') {\n        proto.setOffset(offset);\n    }\n\n    return Limit(proto);\n};\n\nmodule.exports = Limit;\n"]},"metadata":{},"sourceType":"script"}