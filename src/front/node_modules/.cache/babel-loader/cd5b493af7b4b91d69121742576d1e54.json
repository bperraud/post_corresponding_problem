{"ast":null,"code":"/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst TypedRowStub = require('../../../Stubs/mysqlx_crud_pb').Insert.TypedRow;\n\nconst expr = require('../../Messages/Expr/Expr');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Insert.TypedRow\n * @param {proto.Mysqlx.Crud.Insert.TypedRow} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Insert.TypedRow}\n */\n\n\nfunction TypedRow(proto) {\n  return Object.assign({}, wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Crud.Insert.TypedRow#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        field: proto.getFieldList().map(f => expr(f).toJSON())\n      };\n    }\n\n  });\n}\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Insert.TypedRow instance given a list of fields.\n * @private\n * @param {Array} fields\n * @returns {module:adapters.Mysqlx.Crud.Insert.TypedRow}\n */\n\n\nTypedRow.create = function (fields) {\n  const values = Array.isArray(fields) ? fields : Array.of(fields);\n  const proto = new TypedRowStub(); // `undefined` values should not be encoded at all\n\n  proto.setFieldList(values.filter(v => typeof v !== 'undefined').map(v => expr.create(v).valueOf()));\n  return TypedRow(proto);\n};\n\nmodule.exports = TypedRow;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Crud/TypedRow.js"],"names":["TypedRowStub","require","Insert","TypedRow","expr","wraps","proto","Object","assign","toJSON","field","getFieldList","map","f","create","fields","values","Array","isArray","of","setFieldList","filter","v","valueOf","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,+BAAD,CAAP,CAAyCC,MAAzC,CAAgDC,QAArE;;AACA,MAAMC,IAAI,GAAGH,OAAO,CAAC,0BAAD,CAApB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,QAAT,CAAmBG,KAAnB,EAA0B;AACtB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAK,CAACC,KAAD,CAAvB,EAAgC;AACnC;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAO;AACHC,QAAAA,KAAK,EAAEJ,KAAK,CAACK,YAAN,GAAqBC,GAArB,CAAyBC,CAAC,IAAIT,IAAI,CAACS,CAAD,CAAJ,CAAQJ,MAAR,EAA9B;AADJ,OAAP;AAGH;;AAXkC,GAAhC,CAAP;AAaH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAN,QAAQ,CAACW,MAAT,GAAkB,UAAUC,MAAV,EAAkB;AAChC,QAAMC,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcH,MAAd,IAAwBA,MAAxB,GAAiCE,KAAK,CAACE,EAAN,CAASJ,MAAT,CAAhD;AAEA,QAAMT,KAAK,GAAG,IAAIN,YAAJ,EAAd,CAHgC,CAIhC;;AACAM,EAAAA,KAAK,CAACc,YAAN,CAAmBJ,MAAM,CAACK,MAAP,CAAcC,CAAC,IAAI,OAAOA,CAAP,KAAa,WAAhC,EAA6CV,GAA7C,CAAiDU,CAAC,IAAIlB,IAAI,CAACU,MAAL,CAAYQ,CAAZ,EAAeC,OAAf,EAAtD,CAAnB;AAEA,SAAOpB,QAAQ,CAACG,KAAD,CAAf;AACH,CARD;;AAUAkB,MAAM,CAACC,OAAP,GAAiBtB,QAAjB","sourcesContent":["/*\n * Copyright (c) 2020, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst TypedRowStub = require('../../../Stubs/mysqlx_crud_pb').Insert.TypedRow;\nconst expr = require('../../Messages/Expr/Expr');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Crud.Insert.TypedRow\n * @param {proto.Mysqlx.Crud.Insert.TypedRow} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Crud.Insert.TypedRow}\n */\nfunction TypedRow (proto) {\n    return Object.assign({}, wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Crud.Insert.TypedRow#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                field: proto.getFieldList().map(f => expr(f).toJSON())\n            };\n        }\n    });\n}\n\n/**\n * Creates a wrapper of a generic Mysqlx.Crud.Insert.TypedRow instance given a list of fields.\n * @private\n * @param {Array} fields\n * @returns {module:adapters.Mysqlx.Crud.Insert.TypedRow}\n */\nTypedRow.create = function (fields) {\n    const values = Array.isArray(fields) ? fields : Array.of(fields);\n\n    const proto = new TypedRowStub();\n    // `undefined` values should not be encoded at all\n    proto.setFieldList(values.filter(v => typeof v !== 'undefined').map(v => expr.create(v).valueOf()));\n\n    return TypedRow(proto);\n};\n\nmodule.exports = TypedRow;\n"]},"metadata":{},"sourceType":"script"}