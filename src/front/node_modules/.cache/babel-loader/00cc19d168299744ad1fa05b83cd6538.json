{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n// source: mysqlx_session.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\nvar jspb = require('google-protobuf');\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar mysqlx_pb = require('./mysqlx_pb.js');\n\ngoog.object.extend(proto, mysqlx_pb);\ngoog.exportSymbol('proto.Mysqlx.Session.AuthenticateContinue', null, global);\ngoog.exportSymbol('proto.Mysqlx.Session.AuthenticateOk', null, global);\ngoog.exportSymbol('proto.Mysqlx.Session.AuthenticateStart', null, global);\ngoog.exportSymbol('proto.Mysqlx.Session.Close', null, global);\ngoog.exportSymbol('proto.Mysqlx.Session.Reset', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.Mysqlx.Session.AuthenticateStart = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Session.AuthenticateStart, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Mysqlx.Session.AuthenticateStart.displayName = 'proto.Mysqlx.Session.AuthenticateStart';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Session.AuthenticateContinue = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Session.AuthenticateContinue, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Mysqlx.Session.AuthenticateContinue.displayName = 'proto.Mysqlx.Session.AuthenticateContinue';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Session.AuthenticateOk = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Session.AuthenticateOk, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Mysqlx.Session.AuthenticateOk.displayName = 'proto.Mysqlx.Session.AuthenticateOk';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Session.Reset = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Session.Reset, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Mysqlx.Session.Reset.displayName = 'proto.Mysqlx.Session.Reset';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Session.Close = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Session.Close, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Mysqlx.Session.Close.displayName = 'proto.Mysqlx.Session.Close';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Session.AuthenticateStart.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Session.AuthenticateStart.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Session.AuthenticateStart} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Session.AuthenticateStart.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      mechName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n      authData: msg.getAuthData_asB64(),\n      initialResponse: msg.getInitialResponse_asB64()\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Session.AuthenticateStart}\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Session.AuthenticateStart();\n  return proto.Mysqlx.Session.AuthenticateStart.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Session.AuthenticateStart} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Session.AuthenticateStart}\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setMechName(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setAuthData(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setInitialResponse(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Session.AuthenticateStart.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Session.AuthenticateStart} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {string} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeString(1, f);\n  }\n\n  f =\n  /** @type {!(string|Uint8Array)} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeBytes(2, f);\n  }\n\n  f =\n  /** @type {!(string|Uint8Array)} */\n  jspb.Message.getField(message, 3);\n\n  if (f != null) {\n    writer.writeBytes(3, f);\n  }\n};\n/**\n * required string mech_name = 1;\n * @return {string}\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.getMechName = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.Mysqlx.Session.AuthenticateStart} returns this\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.setMechName = function (value) {\n  return jspb.Message.setField(this, 1, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.Mysqlx.Session.AuthenticateStart} returns this\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.clearMechName = function () {\n  return jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.hasMechName = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional bytes auth_data = 2;\n * @return {string}\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.getAuthData = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * optional bytes auth_data = 2;\n * This is a type-conversion wrapper around `getAuthData()`\n * @return {string}\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.getAuthData_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getAuthData())\n  );\n};\n/**\n * optional bytes auth_data = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAuthData()`\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.getAuthData_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getAuthData())\n  );\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.Mysqlx.Session.AuthenticateStart} returns this\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.setAuthData = function (value) {\n  return jspb.Message.setField(this, 2, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.Mysqlx.Session.AuthenticateStart} returns this\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.clearAuthData = function () {\n  return jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.hasAuthData = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional bytes initial_response = 3;\n * @return {string}\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.getInitialResponse = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 3, \"\")\n  );\n};\n/**\n * optional bytes initial_response = 3;\n * This is a type-conversion wrapper around `getInitialResponse()`\n * @return {string}\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.getInitialResponse_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getInitialResponse())\n  );\n};\n/**\n * optional bytes initial_response = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getInitialResponse()`\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.getInitialResponse_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getInitialResponse())\n  );\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.Mysqlx.Session.AuthenticateStart} returns this\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.setInitialResponse = function (value) {\n  return jspb.Message.setField(this, 3, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.Mysqlx.Session.AuthenticateStart} returns this\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.clearInitialResponse = function () {\n  return jspb.Message.setField(this, 3, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.Mysqlx.Session.AuthenticateStart.prototype.hasInitialResponse = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Session.AuthenticateContinue.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Session.AuthenticateContinue.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Session.AuthenticateContinue} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Session.AuthenticateContinue.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      authData: msg.getAuthData_asB64()\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Session.AuthenticateContinue}\n */\n\n\nproto.Mysqlx.Session.AuthenticateContinue.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Session.AuthenticateContinue();\n  return proto.Mysqlx.Session.AuthenticateContinue.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Session.AuthenticateContinue} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Session.AuthenticateContinue}\n */\n\n\nproto.Mysqlx.Session.AuthenticateContinue.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setAuthData(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Session.AuthenticateContinue.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Session.AuthenticateContinue.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Session.AuthenticateContinue} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Session.AuthenticateContinue.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {!(string|Uint8Array)} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeBytes(1, f);\n  }\n};\n/**\n * required bytes auth_data = 1;\n * @return {string}\n */\n\n\nproto.Mysqlx.Session.AuthenticateContinue.prototype.getAuthData = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * required bytes auth_data = 1;\n * This is a type-conversion wrapper around `getAuthData()`\n * @return {string}\n */\n\n\nproto.Mysqlx.Session.AuthenticateContinue.prototype.getAuthData_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getAuthData())\n  );\n};\n/**\n * required bytes auth_data = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAuthData()`\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Session.AuthenticateContinue.prototype.getAuthData_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getAuthData())\n  );\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.Mysqlx.Session.AuthenticateContinue} returns this\n */\n\n\nproto.Mysqlx.Session.AuthenticateContinue.prototype.setAuthData = function (value) {\n  return jspb.Message.setField(this, 1, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.Mysqlx.Session.AuthenticateContinue} returns this\n */\n\n\nproto.Mysqlx.Session.AuthenticateContinue.prototype.clearAuthData = function () {\n  return jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.Mysqlx.Session.AuthenticateContinue.prototype.hasAuthData = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Session.AuthenticateOk.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Session.AuthenticateOk.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Session.AuthenticateOk} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Session.AuthenticateOk.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      authData: msg.getAuthData_asB64()\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Session.AuthenticateOk}\n */\n\n\nproto.Mysqlx.Session.AuthenticateOk.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Session.AuthenticateOk();\n  return proto.Mysqlx.Session.AuthenticateOk.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Session.AuthenticateOk} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Session.AuthenticateOk}\n */\n\n\nproto.Mysqlx.Session.AuthenticateOk.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setAuthData(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Session.AuthenticateOk.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Session.AuthenticateOk.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Session.AuthenticateOk} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Session.AuthenticateOk.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {!(string|Uint8Array)} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeBytes(1, f);\n  }\n};\n/**\n * optional bytes auth_data = 1;\n * @return {string}\n */\n\n\nproto.Mysqlx.Session.AuthenticateOk.prototype.getAuthData = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * optional bytes auth_data = 1;\n * This is a type-conversion wrapper around `getAuthData()`\n * @return {string}\n */\n\n\nproto.Mysqlx.Session.AuthenticateOk.prototype.getAuthData_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getAuthData())\n  );\n};\n/**\n * optional bytes auth_data = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAuthData()`\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Session.AuthenticateOk.prototype.getAuthData_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getAuthData())\n  );\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.Mysqlx.Session.AuthenticateOk} returns this\n */\n\n\nproto.Mysqlx.Session.AuthenticateOk.prototype.setAuthData = function (value) {\n  return jspb.Message.setField(this, 1, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.Mysqlx.Session.AuthenticateOk} returns this\n */\n\n\nproto.Mysqlx.Session.AuthenticateOk.prototype.clearAuthData = function () {\n  return jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.Mysqlx.Session.AuthenticateOk.prototype.hasAuthData = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Session.Reset.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Session.Reset.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Session.Reset} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Session.Reset.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      keepOpen: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Session.Reset}\n */\n\n\nproto.Mysqlx.Session.Reset.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Session.Reset();\n  return proto.Mysqlx.Session.Reset.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Session.Reset} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Session.Reset}\n */\n\n\nproto.Mysqlx.Session.Reset.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setKeepOpen(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Session.Reset.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Session.Reset.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Session.Reset} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Session.Reset.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {boolean} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeBool(1, f);\n  }\n};\n/**\n * optional bool keep_open = 1;\n * @return {boolean}\n */\n\n\nproto.Mysqlx.Session.Reset.prototype.getKeepOpen = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getBooleanFieldWithDefault(this, 1, false)\n  );\n};\n/**\n * @param {boolean} value\n * @return {!proto.Mysqlx.Session.Reset} returns this\n */\n\n\nproto.Mysqlx.Session.Reset.prototype.setKeepOpen = function (value) {\n  return jspb.Message.setField(this, 1, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.Mysqlx.Session.Reset} returns this\n */\n\n\nproto.Mysqlx.Session.Reset.prototype.clearKeepOpen = function () {\n  return jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.Mysqlx.Session.Reset.prototype.hasKeepOpen = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Session.Close.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Session.Close.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Session.Close} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Session.Close.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {};\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Session.Close}\n */\n\n\nproto.Mysqlx.Session.Close.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Session.Close();\n  return proto.Mysqlx.Session.Close.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Session.Close} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Session.Close}\n */\n\n\nproto.Mysqlx.Session.Close.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Session.Close.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Session.Close.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Session.Close} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Session.Close.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n};\n\ngoog.object.extend(exports, proto.Mysqlx.Session);","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Stubs/mysqlx_session_pb.js"],"names":["jspb","require","goog","global","Function","mysqlx_pb","object","extend","proto","exportSymbol","Mysqlx","Session","AuthenticateStart","opt_data","Message","initialize","inherits","DEBUG","COMPILED","displayName","AuthenticateContinue","AuthenticateOk","Reset","Close","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","mechName","getField","undefined","authData","getAuthData_asB64","initialResponse","getInitialResponse_asB64","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","value","readString","setMechName","readBytes","setAuthData","setInitialResponse","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","writeString","writeBytes","getMechName","getFieldWithDefault","setField","clearMechName","hasMechName","getAuthData","bytesAsB64","getAuthData_asU8","bytesAsU8","clearAuthData","hasAuthData","getInitialResponse","getInitialResponse_asU8","clearInitialResponse","hasInitialResponse","keepOpen","getBooleanFieldWithDefault","readBool","setKeepOpen","writeBool","getKeepOpen","clearKeepOpen","hasKeepOpen","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n// source: mysqlx_session.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar mysqlx_pb = require('./mysqlx_pb.js');\ngoog.object.extend(proto, mysqlx_pb);\ngoog.exportSymbol('proto.Mysqlx.Session.AuthenticateContinue', null, global);\ngoog.exportSymbol('proto.Mysqlx.Session.AuthenticateOk', null, global);\ngoog.exportSymbol('proto.Mysqlx.Session.AuthenticateStart', null, global);\ngoog.exportSymbol('proto.Mysqlx.Session.Close', null, global);\ngoog.exportSymbol('proto.Mysqlx.Session.Reset', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Session.AuthenticateStart = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Session.AuthenticateStart, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Mysqlx.Session.AuthenticateStart.displayName = 'proto.Mysqlx.Session.AuthenticateStart';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Session.AuthenticateContinue = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Session.AuthenticateContinue, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Mysqlx.Session.AuthenticateContinue.displayName = 'proto.Mysqlx.Session.AuthenticateContinue';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Session.AuthenticateOk = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Session.AuthenticateOk, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Mysqlx.Session.AuthenticateOk.displayName = 'proto.Mysqlx.Session.AuthenticateOk';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Session.Reset = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Session.Reset, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Mysqlx.Session.Reset.displayName = 'proto.Mysqlx.Session.Reset';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Session.Close = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Session.Close, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Mysqlx.Session.Close.displayName = 'proto.Mysqlx.Session.Close';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Session.AuthenticateStart.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Session.AuthenticateStart} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Session.AuthenticateStart.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    mechName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n    authData: msg.getAuthData_asB64(),\n    initialResponse: msg.getInitialResponse_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Session.AuthenticateStart}\n */\nproto.Mysqlx.Session.AuthenticateStart.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Session.AuthenticateStart;\n  return proto.Mysqlx.Session.AuthenticateStart.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Session.AuthenticateStart} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Session.AuthenticateStart}\n */\nproto.Mysqlx.Session.AuthenticateStart.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setMechName(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setAuthData(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setInitialResponse(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Session.AuthenticateStart.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Session.AuthenticateStart} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Session.AuthenticateStart.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));\n  if (f != null) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * required string mech_name = 1;\n * @return {string}\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.getMechName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.Mysqlx.Session.AuthenticateStart} returns this\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.setMechName = function(value) {\n  return jspb.Message.setField(this, 1, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.Mysqlx.Session.AuthenticateStart} returns this\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.clearMechName = function() {\n  return jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.hasMechName = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional bytes auth_data = 2;\n * @return {string}\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.getAuthData = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes auth_data = 2;\n * This is a type-conversion wrapper around `getAuthData()`\n * @return {string}\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.getAuthData_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getAuthData()));\n};\n\n\n/**\n * optional bytes auth_data = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAuthData()`\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.getAuthData_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getAuthData()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.Mysqlx.Session.AuthenticateStart} returns this\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.setAuthData = function(value) {\n  return jspb.Message.setField(this, 2, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.Mysqlx.Session.AuthenticateStart} returns this\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.clearAuthData = function() {\n  return jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.hasAuthData = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional bytes initial_response = 3;\n * @return {string}\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.getInitialResponse = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes initial_response = 3;\n * This is a type-conversion wrapper around `getInitialResponse()`\n * @return {string}\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.getInitialResponse_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getInitialResponse()));\n};\n\n\n/**\n * optional bytes initial_response = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getInitialResponse()`\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.getInitialResponse_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getInitialResponse()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.Mysqlx.Session.AuthenticateStart} returns this\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.setInitialResponse = function(value) {\n  return jspb.Message.setField(this, 3, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.Mysqlx.Session.AuthenticateStart} returns this\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.clearInitialResponse = function() {\n  return jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.Mysqlx.Session.AuthenticateStart.prototype.hasInitialResponse = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Session.AuthenticateContinue.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Session.AuthenticateContinue.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Session.AuthenticateContinue} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Session.AuthenticateContinue.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    authData: msg.getAuthData_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Session.AuthenticateContinue}\n */\nproto.Mysqlx.Session.AuthenticateContinue.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Session.AuthenticateContinue;\n  return proto.Mysqlx.Session.AuthenticateContinue.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Session.AuthenticateContinue} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Session.AuthenticateContinue}\n */\nproto.Mysqlx.Session.AuthenticateContinue.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setAuthData(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Session.AuthenticateContinue.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Session.AuthenticateContinue.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Session.AuthenticateContinue} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Session.AuthenticateContinue.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * required bytes auth_data = 1;\n * @return {string}\n */\nproto.Mysqlx.Session.AuthenticateContinue.prototype.getAuthData = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * required bytes auth_data = 1;\n * This is a type-conversion wrapper around `getAuthData()`\n * @return {string}\n */\nproto.Mysqlx.Session.AuthenticateContinue.prototype.getAuthData_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getAuthData()));\n};\n\n\n/**\n * required bytes auth_data = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAuthData()`\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Session.AuthenticateContinue.prototype.getAuthData_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getAuthData()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.Mysqlx.Session.AuthenticateContinue} returns this\n */\nproto.Mysqlx.Session.AuthenticateContinue.prototype.setAuthData = function(value) {\n  return jspb.Message.setField(this, 1, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.Mysqlx.Session.AuthenticateContinue} returns this\n */\nproto.Mysqlx.Session.AuthenticateContinue.prototype.clearAuthData = function() {\n  return jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.Mysqlx.Session.AuthenticateContinue.prototype.hasAuthData = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Session.AuthenticateOk.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Session.AuthenticateOk.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Session.AuthenticateOk} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Session.AuthenticateOk.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    authData: msg.getAuthData_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Session.AuthenticateOk}\n */\nproto.Mysqlx.Session.AuthenticateOk.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Session.AuthenticateOk;\n  return proto.Mysqlx.Session.AuthenticateOk.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Session.AuthenticateOk} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Session.AuthenticateOk}\n */\nproto.Mysqlx.Session.AuthenticateOk.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setAuthData(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Session.AuthenticateOk.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Session.AuthenticateOk.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Session.AuthenticateOk} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Session.AuthenticateOk.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes auth_data = 1;\n * @return {string}\n */\nproto.Mysqlx.Session.AuthenticateOk.prototype.getAuthData = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes auth_data = 1;\n * This is a type-conversion wrapper around `getAuthData()`\n * @return {string}\n */\nproto.Mysqlx.Session.AuthenticateOk.prototype.getAuthData_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getAuthData()));\n};\n\n\n/**\n * optional bytes auth_data = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAuthData()`\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Session.AuthenticateOk.prototype.getAuthData_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getAuthData()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.Mysqlx.Session.AuthenticateOk} returns this\n */\nproto.Mysqlx.Session.AuthenticateOk.prototype.setAuthData = function(value) {\n  return jspb.Message.setField(this, 1, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.Mysqlx.Session.AuthenticateOk} returns this\n */\nproto.Mysqlx.Session.AuthenticateOk.prototype.clearAuthData = function() {\n  return jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.Mysqlx.Session.AuthenticateOk.prototype.hasAuthData = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Session.Reset.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Session.Reset.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Session.Reset} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Session.Reset.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keepOpen: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Session.Reset}\n */\nproto.Mysqlx.Session.Reset.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Session.Reset;\n  return proto.Mysqlx.Session.Reset.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Session.Reset} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Session.Reset}\n */\nproto.Mysqlx.Session.Reset.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setKeepOpen(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Session.Reset.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Session.Reset.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Session.Reset} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Session.Reset.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool keep_open = 1;\n * @return {boolean}\n */\nproto.Mysqlx.Session.Reset.prototype.getKeepOpen = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.Mysqlx.Session.Reset} returns this\n */\nproto.Mysqlx.Session.Reset.prototype.setKeepOpen = function(value) {\n  return jspb.Message.setField(this, 1, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.Mysqlx.Session.Reset} returns this\n */\nproto.Mysqlx.Session.Reset.prototype.clearKeepOpen = function() {\n  return jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.Mysqlx.Session.Reset.prototype.hasKeepOpen = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Session.Close.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Session.Close.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Session.Close} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Session.Close.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Session.Close}\n */\nproto.Mysqlx.Session.Close.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Session.Close;\n  return proto.Mysqlx.Session.Close.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Session.Close} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Session.Close}\n */\nproto.Mysqlx.Session.Close.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Session.Close.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Session.Close.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Session.Close} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Session.Close.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\ngoog.object.extend(exports, proto.Mysqlx.Session);\n"]},"metadata":{},"sourceType":"script"}