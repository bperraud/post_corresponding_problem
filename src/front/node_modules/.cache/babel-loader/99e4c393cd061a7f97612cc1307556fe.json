{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\nvar jspb = require('google-protobuf');\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar mysqlx_datatypes_pb = require('./mysqlx_datatypes_pb.js');\n\nvar mysqlx_pb = require('./mysqlx_pb.js');\n\ngoog.exportSymbol('proto.Mysqlx.Connection.Capabilities', null, global);\ngoog.exportSymbol('proto.Mysqlx.Connection.CapabilitiesGet', null, global);\ngoog.exportSymbol('proto.Mysqlx.Connection.CapabilitiesSet', null, global);\ngoog.exportSymbol('proto.Mysqlx.Connection.Capability', null, global);\ngoog.exportSymbol('proto.Mysqlx.Connection.Close', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.Mysqlx.Connection.Capability = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Connection.Capability, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Connection.Capability.displayName = 'proto.Mysqlx.Connection.Capability';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Connection.Capability.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Connection.Capability.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Connection.Capability} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Connection.Capability.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      name: jspb.Message.getField(msg, 1),\n      value: (f = msg.getValue()) && mysqlx_datatypes_pb.Any.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Connection.Capability}\n */\n\n\nproto.Mysqlx.Connection.Capability.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Connection.Capability();\n  return proto.Mysqlx.Connection.Capability.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Connection.Capability} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Connection.Capability}\n */\n\n\nproto.Mysqlx.Connection.Capability.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setName(value);\n        break;\n\n      case 2:\n        var value = new mysqlx_datatypes_pb.Any();\n        reader.readMessage(value, mysqlx_datatypes_pb.Any.deserializeBinaryFromReader);\n        msg.setValue(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Connection.Capability.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Connection.Capability.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Connection.Capability} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Connection.Capability.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {string} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getValue();\n\n  if (f != null) {\n    writer.writeMessage(2, f, mysqlx_datatypes_pb.Any.serializeBinaryToWriter);\n  }\n};\n/**\n * required string name = 1;\n * @return {string}\n */\n\n\nproto.Mysqlx.Connection.Capability.prototype.getName = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/** @param {string} value */\n\n\nproto.Mysqlx.Connection.Capability.prototype.setName = function (value) {\n  jspb.Message.setField(this, 1, value);\n};\n\nproto.Mysqlx.Connection.Capability.prototype.clearName = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Connection.Capability.prototype.hasName = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * required Mysqlx.Datatypes.Any value = 2;\n * @return {!proto.Mysqlx.Datatypes.Any}\n */\n\n\nproto.Mysqlx.Connection.Capability.prototype.getValue = function () {\n  return (\n    /** @type{!proto.Mysqlx.Datatypes.Any} */\n    jspb.Message.getWrapperField(this, mysqlx_datatypes_pb.Any, 2, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Datatypes.Any} value */\n\n\nproto.Mysqlx.Connection.Capability.prototype.setValue = function (value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\nproto.Mysqlx.Connection.Capability.prototype.clearValue = function () {\n  jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Connection.Capability.prototype.hasValue = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Connection.Capabilities = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Connection.Capabilities.repeatedFields_, null);\n};\n\ngoog.inherits(proto.Mysqlx.Connection.Capabilities, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Connection.Capabilities.displayName = 'proto.Mysqlx.Connection.Capabilities';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.Mysqlx.Connection.Capabilities.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Connection.Capabilities.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Connection.Capabilities.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Connection.Capabilities} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Connection.Capabilities.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      capabilitiesList: jspb.Message.toObjectList(msg.getCapabilitiesList(), proto.Mysqlx.Connection.Capability.toObject, includeInstance)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Connection.Capabilities}\n */\n\n\nproto.Mysqlx.Connection.Capabilities.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Connection.Capabilities();\n  return proto.Mysqlx.Connection.Capabilities.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Connection.Capabilities} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Connection.Capabilities}\n */\n\n\nproto.Mysqlx.Connection.Capabilities.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new proto.Mysqlx.Connection.Capability();\n        reader.readMessage(value, proto.Mysqlx.Connection.Capability.deserializeBinaryFromReader);\n        msg.addCapabilities(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Connection.Capabilities.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Connection.Capabilities.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Connection.Capabilities} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Connection.Capabilities.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getCapabilitiesList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(1, f, proto.Mysqlx.Connection.Capability.serializeBinaryToWriter);\n  }\n};\n/**\n * repeated Capability capabilities = 1;\n * @return {!Array.<!proto.Mysqlx.Connection.Capability>}\n */\n\n\nproto.Mysqlx.Connection.Capabilities.prototype.getCapabilitiesList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Connection.Capability>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Connection.Capability, 1)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Connection.Capability>} value */\n\n\nproto.Mysqlx.Connection.Capabilities.prototype.setCapabilitiesList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n/**\n * @param {!proto.Mysqlx.Connection.Capability=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Connection.Capability}\n */\n\n\nproto.Mysqlx.Connection.Capabilities.prototype.addCapabilities = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Mysqlx.Connection.Capability, opt_index);\n};\n\nproto.Mysqlx.Connection.Capabilities.prototype.clearCapabilitiesList = function () {\n  this.setCapabilitiesList([]);\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Connection.CapabilitiesGet = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Connection.CapabilitiesGet, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Connection.CapabilitiesGet.displayName = 'proto.Mysqlx.Connection.CapabilitiesGet';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Connection.CapabilitiesGet.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Connection.CapabilitiesGet.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Connection.CapabilitiesGet} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Connection.CapabilitiesGet.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {};\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Connection.CapabilitiesGet}\n */\n\n\nproto.Mysqlx.Connection.CapabilitiesGet.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Connection.CapabilitiesGet();\n  return proto.Mysqlx.Connection.CapabilitiesGet.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Connection.CapabilitiesGet} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Connection.CapabilitiesGet}\n */\n\n\nproto.Mysqlx.Connection.CapabilitiesGet.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Connection.CapabilitiesGet.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Connection.CapabilitiesGet.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Connection.CapabilitiesGet} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Connection.CapabilitiesGet.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Connection.CapabilitiesSet = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Connection.CapabilitiesSet, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Connection.CapabilitiesSet.displayName = 'proto.Mysqlx.Connection.CapabilitiesSet';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Connection.CapabilitiesSet.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Connection.CapabilitiesSet.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Connection.CapabilitiesSet} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Connection.CapabilitiesSet.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      capabilities: (f = msg.getCapabilities()) && proto.Mysqlx.Connection.Capabilities.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Connection.CapabilitiesSet}\n */\n\n\nproto.Mysqlx.Connection.CapabilitiesSet.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Connection.CapabilitiesSet();\n  return proto.Mysqlx.Connection.CapabilitiesSet.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Connection.CapabilitiesSet} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Connection.CapabilitiesSet}\n */\n\n\nproto.Mysqlx.Connection.CapabilitiesSet.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new proto.Mysqlx.Connection.Capabilities();\n        reader.readMessage(value, proto.Mysqlx.Connection.Capabilities.deserializeBinaryFromReader);\n        msg.setCapabilities(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Connection.CapabilitiesSet.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Connection.CapabilitiesSet.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Connection.CapabilitiesSet} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Connection.CapabilitiesSet.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getCapabilities();\n\n  if (f != null) {\n    writer.writeMessage(1, f, proto.Mysqlx.Connection.Capabilities.serializeBinaryToWriter);\n  }\n};\n/**\n * required Capabilities capabilities = 1;\n * @return {!proto.Mysqlx.Connection.Capabilities}\n */\n\n\nproto.Mysqlx.Connection.CapabilitiesSet.prototype.getCapabilities = function () {\n  return (\n    /** @type{!proto.Mysqlx.Connection.Capabilities} */\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Connection.Capabilities, 1, 1)\n  );\n};\n/** @param {!proto.Mysqlx.Connection.Capabilities} value */\n\n\nproto.Mysqlx.Connection.CapabilitiesSet.prototype.setCapabilities = function (value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\nproto.Mysqlx.Connection.CapabilitiesSet.prototype.clearCapabilities = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Connection.CapabilitiesSet.prototype.hasCapabilities = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Connection.Close = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Connection.Close, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Connection.Close.displayName = 'proto.Mysqlx.Connection.Close';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Connection.Close.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Connection.Close.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Connection.Close} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Connection.Close.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {};\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Connection.Close}\n */\n\n\nproto.Mysqlx.Connection.Close.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Connection.Close();\n  return proto.Mysqlx.Connection.Close.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Connection.Close} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Connection.Close}\n */\n\n\nproto.Mysqlx.Connection.Close.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Connection.Close.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Connection.Close.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Connection.Close} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Connection.Close.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n};\n\ngoog.object.extend(exports, proto.Mysqlx.Connection);","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Stubs/mysqlx_connection_pb.js"],"names":["jspb","require","goog","global","Function","mysqlx_datatypes_pb","mysqlx_pb","exportSymbol","proto","Mysqlx","Connection","Capability","opt_data","Message","initialize","inherits","DEBUG","COMPILED","displayName","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","name","getField","value","getValue","Any","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","readString","setName","readMessage","setValue","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","undefined","writeString","writeMessage","getName","getFieldWithDefault","setField","clearName","hasName","getWrapperField","setWrapperField","clearValue","hasValue","Capabilities","repeatedFields_","capabilitiesList","toObjectList","getCapabilitiesList","addCapabilities","length","writeRepeatedMessage","getRepeatedWrapperField","setCapabilitiesList","setRepeatedWrapperField","opt_value","opt_index","addToRepeatedWrapperField","clearCapabilitiesList","CapabilitiesGet","CapabilitiesSet","capabilities","getCapabilities","setCapabilities","clearCapabilities","hasCapabilities","Close","object","extend","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar mysqlx_datatypes_pb = require('./mysqlx_datatypes_pb.js');\nvar mysqlx_pb = require('./mysqlx_pb.js');\ngoog.exportSymbol('proto.Mysqlx.Connection.Capabilities', null, global);\ngoog.exportSymbol('proto.Mysqlx.Connection.CapabilitiesGet', null, global);\ngoog.exportSymbol('proto.Mysqlx.Connection.CapabilitiesSet', null, global);\ngoog.exportSymbol('proto.Mysqlx.Connection.Capability', null, global);\ngoog.exportSymbol('proto.Mysqlx.Connection.Close', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Connection.Capability = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Connection.Capability, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Connection.Capability.displayName = 'proto.Mysqlx.Connection.Capability';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Connection.Capability.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Connection.Capability.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Connection.Capability} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Connection.Capability.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getField(msg, 1),\n    value: (f = msg.getValue()) && mysqlx_datatypes_pb.Any.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Connection.Capability}\n */\nproto.Mysqlx.Connection.Capability.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Connection.Capability;\n  return proto.Mysqlx.Connection.Capability.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Connection.Capability} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Connection.Capability}\n */\nproto.Mysqlx.Connection.Capability.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = new mysqlx_datatypes_pb.Any;\n      reader.readMessage(value,mysqlx_datatypes_pb.Any.deserializeBinaryFromReader);\n      msg.setValue(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Connection.Capability.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Connection.Capability.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Connection.Capability} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Connection.Capability.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getValue();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      mysqlx_datatypes_pb.Any.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * required string name = 1;\n * @return {string}\n */\nproto.Mysqlx.Connection.Capability.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Mysqlx.Connection.Capability.prototype.setName = function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.Mysqlx.Connection.Capability.prototype.clearName = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Connection.Capability.prototype.hasName = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * required Mysqlx.Datatypes.Any value = 2;\n * @return {!proto.Mysqlx.Datatypes.Any}\n */\nproto.Mysqlx.Connection.Capability.prototype.getValue = function() {\n  return /** @type{!proto.Mysqlx.Datatypes.Any} */ (\n    jspb.Message.getWrapperField(this, mysqlx_datatypes_pb.Any, 2, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Datatypes.Any} value */\nproto.Mysqlx.Connection.Capability.prototype.setValue = function(value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\n\nproto.Mysqlx.Connection.Capability.prototype.clearValue = function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Connection.Capability.prototype.hasValue = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Connection.Capabilities = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Connection.Capabilities.repeatedFields_, null);\n};\ngoog.inherits(proto.Mysqlx.Connection.Capabilities, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Connection.Capabilities.displayName = 'proto.Mysqlx.Connection.Capabilities';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Mysqlx.Connection.Capabilities.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Connection.Capabilities.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Connection.Capabilities.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Connection.Capabilities} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Connection.Capabilities.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    capabilitiesList: jspb.Message.toObjectList(msg.getCapabilitiesList(),\n    proto.Mysqlx.Connection.Capability.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Connection.Capabilities}\n */\nproto.Mysqlx.Connection.Capabilities.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Connection.Capabilities;\n  return proto.Mysqlx.Connection.Capabilities.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Connection.Capabilities} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Connection.Capabilities}\n */\nproto.Mysqlx.Connection.Capabilities.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.Mysqlx.Connection.Capability;\n      reader.readMessage(value,proto.Mysqlx.Connection.Capability.deserializeBinaryFromReader);\n      msg.addCapabilities(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Connection.Capabilities.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Connection.Capabilities.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Connection.Capabilities} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Connection.Capabilities.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCapabilitiesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      proto.Mysqlx.Connection.Capability.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * repeated Capability capabilities = 1;\n * @return {!Array.<!proto.Mysqlx.Connection.Capability>}\n */\nproto.Mysqlx.Connection.Capabilities.prototype.getCapabilitiesList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Connection.Capability>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Connection.Capability, 1));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Connection.Capability>} value */\nproto.Mysqlx.Connection.Capabilities.prototype.setCapabilitiesList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Connection.Capability=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Connection.Capability}\n */\nproto.Mysqlx.Connection.Capabilities.prototype.addCapabilities = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Mysqlx.Connection.Capability, opt_index);\n};\n\n\nproto.Mysqlx.Connection.Capabilities.prototype.clearCapabilitiesList = function() {\n  this.setCapabilitiesList([]);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Connection.CapabilitiesGet = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Connection.CapabilitiesGet, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Connection.CapabilitiesGet.displayName = 'proto.Mysqlx.Connection.CapabilitiesGet';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Connection.CapabilitiesGet.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Connection.CapabilitiesGet.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Connection.CapabilitiesGet} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Connection.CapabilitiesGet.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Connection.CapabilitiesGet}\n */\nproto.Mysqlx.Connection.CapabilitiesGet.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Connection.CapabilitiesGet;\n  return proto.Mysqlx.Connection.CapabilitiesGet.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Connection.CapabilitiesGet} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Connection.CapabilitiesGet}\n */\nproto.Mysqlx.Connection.CapabilitiesGet.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Connection.CapabilitiesGet.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Connection.CapabilitiesGet.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Connection.CapabilitiesGet} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Connection.CapabilitiesGet.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Connection.CapabilitiesSet = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Connection.CapabilitiesSet, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Connection.CapabilitiesSet.displayName = 'proto.Mysqlx.Connection.CapabilitiesSet';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Connection.CapabilitiesSet.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Connection.CapabilitiesSet.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Connection.CapabilitiesSet} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Connection.CapabilitiesSet.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    capabilities: (f = msg.getCapabilities()) && proto.Mysqlx.Connection.Capabilities.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Connection.CapabilitiesSet}\n */\nproto.Mysqlx.Connection.CapabilitiesSet.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Connection.CapabilitiesSet;\n  return proto.Mysqlx.Connection.CapabilitiesSet.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Connection.CapabilitiesSet} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Connection.CapabilitiesSet}\n */\nproto.Mysqlx.Connection.CapabilitiesSet.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.Mysqlx.Connection.Capabilities;\n      reader.readMessage(value,proto.Mysqlx.Connection.Capabilities.deserializeBinaryFromReader);\n      msg.setCapabilities(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Connection.CapabilitiesSet.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Connection.CapabilitiesSet.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Connection.CapabilitiesSet} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Connection.CapabilitiesSet.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCapabilities();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.Mysqlx.Connection.Capabilities.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * required Capabilities capabilities = 1;\n * @return {!proto.Mysqlx.Connection.Capabilities}\n */\nproto.Mysqlx.Connection.CapabilitiesSet.prototype.getCapabilities = function() {\n  return /** @type{!proto.Mysqlx.Connection.Capabilities} */ (\n    jspb.Message.getWrapperField(this, proto.Mysqlx.Connection.Capabilities, 1, 1));\n};\n\n\n/** @param {!proto.Mysqlx.Connection.Capabilities} value */\nproto.Mysqlx.Connection.CapabilitiesSet.prototype.setCapabilities = function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.Mysqlx.Connection.CapabilitiesSet.prototype.clearCapabilities = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Connection.CapabilitiesSet.prototype.hasCapabilities = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Connection.Close = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Connection.Close, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Connection.Close.displayName = 'proto.Mysqlx.Connection.Close';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Connection.Close.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Connection.Close.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Connection.Close} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Connection.Close.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Connection.Close}\n */\nproto.Mysqlx.Connection.Close.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Connection.Close;\n  return proto.Mysqlx.Connection.Close.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Connection.Close} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Connection.Close}\n */\nproto.Mysqlx.Connection.Close.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Connection.Close.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Connection.Close.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Connection.Close} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Connection.Close.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\ngoog.object.extend(exports, proto.Mysqlx.Connection);\n"]},"metadata":{},"sourceType":"script"}