{"ast":null,"code":"/*\n * Copyright (c) 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst connection = require('./Connection');\n/**\n * API for connections to be used by a connection pool.\n * @private\n * @module PoolConnection\n * @mixes module:Connection\n */\n\n/**\n * @private\n * @alias module:PoolConnection\n * @param {Object} [options] - client properties (connection and pooling configuration)\n * @returns {module:PoolConnection}\n */\n\n\nfunction PoolConnection() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    pooling: {}\n  };\n  // Object to keep special pooling related state.\n  // Will also contain whatever state is managed by the connection instance\n  // that is mixed-in.\n  const state = {\n    releasedAt: null\n  };\n  return Object.assign({}, connection(options), {\n    /**\n     * Activate a connection that has been aquired from the pool.\n     * @private\n     * @function\n     * @name module:PoolConnection#acquire\n     * @returns {module:PoolConnection}\n     */\n    acquire() {\n      // Acquiring a connection just means to signal it is not released.\n      state.releasedAt = null;\n      return this;\n    },\n\n    /**\n     * Release a connection that has been returned back to the pool.\n     * @private\n     * @function\n     * @name module:PoolConnection#close\n     * @returns {Promise} Returns a promise just to keep consistency with standalone connections\n     */\n    close() {\n      state.releasedAt = Date.now();\n      return Promise.resolve();\n    },\n\n    /**\n     * Checks if a connection is idle and has expired (maxIdleTime has been exceeded).\n     * @private\n     * @function\n     * @name module:PoolConnection#isExpired\n     * @returns {boolean}\n     */\n    isExpired() {\n      // If the connection has not been released yet, then it has not\n      // expired as well.\n      if (state.releasedAt === null) {\n        return false;\n      }\n\n      const maxIdleTime = options.pooling.maxIdleTime; // If maxIdleTime = 0, it means an idle connection never expires.\n\n      if (maxIdleTime === 0) {\n        return false;\n      } // Otherwise, we should check if the connection was released for\n      // more than the value of maxIdleTime.\n\n\n      return Date.now() - state.releasedAt > options.pooling.maxIdleTime;\n    },\n\n    /**\n     * Tells anyone that this is a connection from a pool.\n     * @private\n     * @function\n     * @name module:PoolConnection#isFromPool\n     * @returns {boolean} Always returns true\n     */\n    isFromPool() {\n      return true;\n    },\n\n    /**\n     * Checks if a connection is idle (has been released back into the pool).\n     * @private\n     * @function\n     * @name module:PoolConnection#isIdle\n     * @returns {boolean}\n     */\n    isIdle() {\n      return !!state.releasedAt;\n    }\n\n  });\n}\n\nmodule.exports = PoolConnection;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/PoolConnection.js"],"names":["connection","require","PoolConnection","options","pooling","state","releasedAt","Object","assign","acquire","close","Date","now","Promise","resolve","isExpired","maxIdleTime","isFromPool","isIdle","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,GAAoD;AAAA,MAA3BC,OAA2B,uEAAjB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAiB;AAChD;AACA;AACA;AACA,QAAMC,KAAK,GAAG;AAAEC,IAAAA,UAAU,EAAE;AAAd,GAAd;AAEA,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,UAAU,CAACG,OAAD,CAA5B,EAAuC;AAC1C;AACR;AACA;AACA;AACA;AACA;AACA;AACQM,IAAAA,OAAO,GAAI;AACP;AACAJ,MAAAA,KAAK,CAACC,UAAN,GAAmB,IAAnB;AACA,aAAO,IAAP;AACH,KAZyC;;AAc1C;AACR;AACA;AACA;AACA;AACA;AACA;AACQI,IAAAA,KAAK,GAAI;AACLL,MAAAA,KAAK,CAACC,UAAN,GAAmBK,IAAI,CAACC,GAAL,EAAnB;AACA,aAAOC,OAAO,CAACC,OAAR,EAAP;AACH,KAxByC;;AA0B1C;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,SAAS,GAAI;AACT;AACA;AACA,UAAIV,KAAK,CAACC,UAAN,KAAqB,IAAzB,EAA+B;AAC3B,eAAO,KAAP;AACH;;AAED,YAAMU,WAAW,GAAGb,OAAO,CAACC,OAAR,CAAgBY,WAApC,CAPS,CAST;;AACA,UAAIA,WAAW,KAAK,CAApB,EAAuB;AACnB,eAAO,KAAP;AACH,OAZQ,CAcT;AACA;;;AACA,aAAOL,IAAI,CAACC,GAAL,KAAaP,KAAK,CAACC,UAAnB,GAAgCH,OAAO,CAACC,OAAR,CAAgBY,WAAvD;AACH,KAlDyC;;AAoD1C;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,UAAU,GAAI;AACV,aAAO,IAAP;AACH,KA7DyC;;AA+D1C;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,MAAM,GAAI;AACN,aAAO,CAAC,CAACb,KAAK,CAACC,UAAf;AACH;;AAxEyC,GAAvC,CAAP;AA0EH;;AAEDa,MAAM,CAACC,OAAP,GAAiBlB,cAAjB","sourcesContent":["/*\n * Copyright (c) 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst connection = require('./Connection');\n\n/**\n * API for connections to be used by a connection pool.\n * @private\n * @module PoolConnection\n * @mixes module:Connection\n */\n\n/**\n * @private\n * @alias module:PoolConnection\n * @param {Object} [options] - client properties (connection and pooling configuration)\n * @returns {module:PoolConnection}\n */\nfunction PoolConnection (options = { pooling: {} }) {\n    // Object to keep special pooling related state.\n    // Will also contain whatever state is managed by the connection instance\n    // that is mixed-in.\n    const state = { releasedAt: null };\n\n    return Object.assign({}, connection(options), {\n        /**\n         * Activate a connection that has been aquired from the pool.\n         * @private\n         * @function\n         * @name module:PoolConnection#acquire\n         * @returns {module:PoolConnection}\n         */\n        acquire () {\n            // Acquiring a connection just means to signal it is not released.\n            state.releasedAt = null;\n            return this;\n        },\n\n        /**\n         * Release a connection that has been returned back to the pool.\n         * @private\n         * @function\n         * @name module:PoolConnection#close\n         * @returns {Promise} Returns a promise just to keep consistency with standalone connections\n         */\n        close () {\n            state.releasedAt = Date.now();\n            return Promise.resolve();\n        },\n\n        /**\n         * Checks if a connection is idle and has expired (maxIdleTime has been exceeded).\n         * @private\n         * @function\n         * @name module:PoolConnection#isExpired\n         * @returns {boolean}\n         */\n        isExpired () {\n            // If the connection has not been released yet, then it has not\n            // expired as well.\n            if (state.releasedAt === null) {\n                return false;\n            }\n\n            const maxIdleTime = options.pooling.maxIdleTime;\n\n            // If maxIdleTime = 0, it means an idle connection never expires.\n            if (maxIdleTime === 0) {\n                return false;\n            }\n\n            // Otherwise, we should check if the connection was released for\n            // more than the value of maxIdleTime.\n            return Date.now() - state.releasedAt > options.pooling.maxIdleTime;\n        },\n\n        /**\n         * Tells anyone that this is a connection from a pool.\n         * @private\n         * @function\n         * @name module:PoolConnection#isFromPool\n         * @returns {boolean} Always returns true\n         */\n        isFromPool () {\n            return true;\n        },\n\n        /**\n         * Checks if a connection is idle (has been released back into the pool).\n         * @private\n         * @function\n         * @name module:PoolConnection#isIdle\n         * @returns {boolean}\n         */\n        isIdle () {\n            return !!state.releasedAt;\n        }\n    });\n}\n\nmodule.exports = PoolConnection;\n"]},"metadata":{},"sourceType":"script"}