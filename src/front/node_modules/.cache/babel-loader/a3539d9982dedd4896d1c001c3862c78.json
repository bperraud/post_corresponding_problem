{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst Expr = require('../../../Protocol/Stubs/mysqlx_expr_pb.js').Expr;\n\nconst Operator = require('../../../Protocol/Stubs/mysqlx_expr_pb.js').Operator;\n\nfunction ternaryOperator(operations, index) {\n  index = index || 0;\n  const operator = new Operator();\n  operator.setName(operations[index].operator);\n\n  if (operations[index].operands.length < 3) {\n    operator.addParam(ternaryOperator(operations, index + 1));\n  }\n\n  operations[index].operands.forEach(operand => {\n    operator.addParam(operand);\n  });\n  const expr = new Expr();\n  expr.setType(Expr.Type.OPERATOR);\n  expr.setOperator(operator);\n  return expr;\n}\n\nmodule.exports = function (data) {\n  if (!data[1].length) {\n    return data[0];\n  }\n\n  const operations = Array.from(data[1]);\n  operations[0].operands = [data[0]].concat(operations[0].operands);\n  operations.reverse();\n  return ternaryOperator(operations);\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/ExprParser/lib/mappers/ternaryOperator.js"],"names":["Expr","require","Operator","ternaryOperator","operations","index","operator","setName","operands","length","addParam","forEach","operand","expr","setType","Type","OPERATOR","setOperator","module","exports","data","Array","from","concat","reverse"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,2CAAD,CAAP,CAAqDD,IAAlE;;AACA,MAAME,QAAQ,GAAGD,OAAO,CAAC,2CAAD,CAAP,CAAqDC,QAAtE;;AAEA,SAASC,eAAT,CAA0BC,UAA1B,EAAsCC,KAAtC,EAA6C;AACzCA,EAAAA,KAAK,GAAGA,KAAK,IAAI,CAAjB;AAEA,QAAMC,QAAQ,GAAG,IAAIJ,QAAJ,EAAjB;AACAI,EAAAA,QAAQ,CAACC,OAAT,CAAiBH,UAAU,CAACC,KAAD,CAAV,CAAkBC,QAAnC;;AAEA,MAAIF,UAAU,CAACC,KAAD,CAAV,CAAkBG,QAAlB,CAA2BC,MAA3B,GAAoC,CAAxC,EAA2C;AACvCH,IAAAA,QAAQ,CAACI,QAAT,CAAkBP,eAAe,CAACC,UAAD,EAAaC,KAAK,GAAG,CAArB,CAAjC;AACH;;AAEDD,EAAAA,UAAU,CAACC,KAAD,CAAV,CAAkBG,QAAlB,CAA2BG,OAA3B,CAAmCC,OAAO,IAAI;AAC1CN,IAAAA,QAAQ,CAACI,QAAT,CAAkBE,OAAlB;AACH,GAFD;AAIA,QAAMC,IAAI,GAAG,IAAIb,IAAJ,EAAb;AACAa,EAAAA,IAAI,CAACC,OAAL,CAAad,IAAI,CAACe,IAAL,CAAUC,QAAvB;AACAH,EAAAA,IAAI,CAACI,WAAL,CAAiBX,QAAjB;AAEA,SAAOO,IAAP;AACH;;AAEDK,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAC7B,MAAI,CAACA,IAAI,CAAC,CAAD,CAAJ,CAAQX,MAAb,EAAqB;AACjB,WAAOW,IAAI,CAAC,CAAD,CAAX;AACH;;AAED,QAAMhB,UAAU,GAAGiB,KAAK,CAACC,IAAN,CAAWF,IAAI,CAAC,CAAD,CAAf,CAAnB;AACAhB,EAAAA,UAAU,CAAC,CAAD,CAAV,CAAcI,QAAd,GAAyB,CAACY,IAAI,CAAC,CAAD,CAAL,EAAUG,MAAV,CAAiBnB,UAAU,CAAC,CAAD,CAAV,CAAcI,QAA/B,CAAzB;AACAJ,EAAAA,UAAU,CAACoB,OAAX;AAEA,SAAOrB,eAAe,CAACC,UAAD,CAAtB;AACH,CAVD","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst Expr = require('../../../Protocol/Stubs/mysqlx_expr_pb.js').Expr;\nconst Operator = require('../../../Protocol/Stubs/mysqlx_expr_pb.js').Operator;\n\nfunction ternaryOperator (operations, index) {\n    index = index || 0;\n\n    const operator = new Operator();\n    operator.setName(operations[index].operator);\n\n    if (operations[index].operands.length < 3) {\n        operator.addParam(ternaryOperator(operations, index + 1));\n    }\n\n    operations[index].operands.forEach(operand => {\n        operator.addParam(operand);\n    });\n\n    const expr = new Expr();\n    expr.setType(Expr.Type.OPERATOR);\n    expr.setOperator(operator);\n\n    return expr;\n}\n\nmodule.exports = function (data) {\n    if (!data[1].length) {\n        return data[0];\n    }\n\n    const operations = Array.from(data[1]);\n    operations[0].operands = [data[0]].concat(operations[0].operands);\n    operations.reverse();\n\n    return ternaryOperator(operations);\n};\n"]},"metadata":{},"sourceType":"script"}