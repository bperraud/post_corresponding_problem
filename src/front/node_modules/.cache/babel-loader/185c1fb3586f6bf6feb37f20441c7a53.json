{"ast":null,"code":"/*\n * Copyright (c) 2018, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst connection = require('./Connection');\n\nconst errors = require('../constants/errors');\n\nconst pool = require('./ConnectionPool');\n\nconst session = require('./Session');\n\nconst util = require('util');\n\nconst {\n  isValidPlainObject\n} = require('../validator');\n/**\n * Client abstraction to manage connections to the database, at the moment,\n * only using an internal connection pool.\n * @module Client\n * @example\n * const mysqlx = require('@mysqlx/xdevapi')\n * const client = mysqlx.getClient('mysqlx://root@localhost')\n *\n * return client.getSession()\n *   .then(session => {\n *     // A new session is created using a connection from the pool.\n *   })\n */\n\n/**\n * Extended client options.\n * @typedef {Object} Properties\n * @prop {module:ConnectionPool~Properties} [pooling] - connection pool configuration\n */\n\n\nconst VALID_OPTIONS = ['pooling'];\n/**\n * @alias module:Client\n * @param {Object} [state] - default client state\n * @returns {module:Client}\n */\n\nfunction Client() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const state = {\n    pool: null,\n    connection: null\n  };\n  return {\n    /**\n     * Client destructor (closes and cleans up all the connections in the pool).\n     * @function\n     * @name module:Client#close\n     * @example\n     * const client = mysqlx.getClient({ user: 'root' }, { pooling: { enabled: true, maxSize: 3 } })\n     *\n     * client.getSession()\n     *   .then(() => client.close());\n     * @returns {Promise}\n     */\n    close() {\n      if (options.pooling.enabled && state.pool === null) {\n        return Promise.reject(new Error(errors.MESSAGES.ER_DEVAPI_POOL_CLOSED));\n      }\n\n      if (!options.pooling.enabled && state.connection === null) {\n        return Promise.resolve();\n      }\n\n      if (!options.pooling.enabled) {\n        return state.connection.destroy().then(() => {\n          state.connection = null;\n        });\n      }\n\n      return state.pool.destroy().then(() => {\n        state.pool = null;\n      });\n    },\n\n    /**\n     * Create a new session using a connection from the pool (if one is available).\n     * @function\n     * @name module:Client#getSession\n     * @example\n     * const client = mysqlx.getClient({ user: 'root' }, { pooling: { enabled: true, maxSize: 3 } })\n     *\n     * client.getSession()\n     *   .then(session => {\n     *     console.log(session.inspect()); // { pooling: true, ... }\n     *   })\n     * @returns {Promise<Session>} The active session instance.\n     */\n    getSession() {\n      if (!options.pooling.enabled) {\n        state.connection = connection(options);\n        return state.connection.open().then(con => {\n          return session(con);\n        });\n      }\n\n      state.pool = state.pool || pool(options).create();\n      return state.pool.getConnection().then(con => {\n        return session(con);\n      });\n    }\n\n  };\n}\n/**\n * Validate the entire set of properties used to create a client.\n * @private\n * @param {Object} options - a mix of connection and extended client properties\n * @returns {boolean} Returns \"true\" if all properties and values are valid.\n * @throws when either the connection or connection pool properties are not\n * valid as well as when they contain unknown properties\n */\n\n\nClient.validate = function (options) {\n  // Validate the connection options.\n  connection.validate(options); // Validate the client options.\n\n  const validKeys = VALID_OPTIONS.concat(connection.VALID_OPTIONS);\n  const invalidKeys = Object.keys(options).filter(k => validKeys.indexOf(k) === -1);\n\n  if (invalidKeys.length) {\n    throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_BAD_CLIENT_OPTION, invalidKeys[0]));\n  }\n\n  if (!isValidPlainObject({\n    value: options.pooling\n  })) {\n    throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_BAD_CLIENT_OPTION_VALUE, 'pooling', options.pooling));\n  } // Assign proper default values to missing pooling options.\n\n\n  options.pooling = Object.assign({\n    enabled: true,\n    maxIdleTime: 0,\n    maxSize: 25,\n    queueTimeout: 0\n  }, options.pooling); // Validate the pooling options.\n\n  return pool.validate(options.pooling);\n};\n\nClient.VALID_OPTIONS = VALID_OPTIONS;\nmodule.exports = Client;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/Client.js"],"names":["connection","require","errors","pool","session","util","isValidPlainObject","VALID_OPTIONS","Client","options","state","close","pooling","enabled","Promise","reject","Error","MESSAGES","ER_DEVAPI_POOL_CLOSED","resolve","destroy","then","getSession","open","con","create","getConnection","validate","validKeys","concat","invalidKeys","Object","keys","filter","k","indexOf","length","format","ER_DEVAPI_BAD_CLIENT_OPTION","value","ER_DEVAPI_BAD_CLIENT_OPTION_VALUE","assign","maxIdleTime","maxSize","queueTimeout","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2018, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst connection = require('./Connection');\nconst errors = require('../constants/errors');\nconst pool = require('./ConnectionPool');\nconst session = require('./Session');\nconst util = require('util');\nconst { isValidPlainObject } = require('../validator');\n\n/**\n * Client abstraction to manage connections to the database, at the moment,\n * only using an internal connection pool.\n * @module Client\n * @example\n * const mysqlx = require('@mysqlx/xdevapi')\n * const client = mysqlx.getClient('mysqlx://root@localhost')\n *\n * return client.getSession()\n *   .then(session => {\n *     // A new session is created using a connection from the pool.\n *   })\n */\n\n/**\n * Extended client options.\n * @typedef {Object} Properties\n * @prop {module:ConnectionPool~Properties} [pooling] - connection pool configuration\n */\nconst VALID_OPTIONS = ['pooling'];\n\n/**\n * @alias module:Client\n * @param {Object} [state] - default client state\n * @returns {module:Client}\n */\nfunction Client (options = {}) {\n    const state = { pool: null, connection: null };\n\n    return {\n        /**\n         * Client destructor (closes and cleans up all the connections in the pool).\n         * @function\n         * @name module:Client#close\n         * @example\n         * const client = mysqlx.getClient({ user: 'root' }, { pooling: { enabled: true, maxSize: 3 } })\n         *\n         * client.getSession()\n         *   .then(() => client.close());\n         * @returns {Promise}\n         */\n        close () {\n            if (options.pooling.enabled && state.pool === null) {\n                return Promise.reject(new Error(errors.MESSAGES.ER_DEVAPI_POOL_CLOSED));\n            }\n\n            if (!options.pooling.enabled && state.connection === null) {\n                return Promise.resolve();\n            }\n\n            if (!options.pooling.enabled) {\n                return state.connection.destroy()\n                    .then(() => {\n                        state.connection = null;\n                    });\n            }\n\n            return state.pool.destroy()\n                .then(() => {\n                    state.pool = null;\n                });\n        },\n\n        /**\n         * Create a new session using a connection from the pool (if one is available).\n         * @function\n         * @name module:Client#getSession\n         * @example\n         * const client = mysqlx.getClient({ user: 'root' }, { pooling: { enabled: true, maxSize: 3 } })\n         *\n         * client.getSession()\n         *   .then(session => {\n         *     console.log(session.inspect()); // { pooling: true, ... }\n         *   })\n         * @returns {Promise<Session>} The active session instance.\n         */\n        getSession () {\n            if (!options.pooling.enabled) {\n                state.connection = connection(options);\n\n                return state.connection.open()\n                    .then(con => {\n                        return session(con);\n                    });\n            }\n\n            state.pool = state.pool || pool(options).create();\n\n            return state.pool.getConnection()\n                .then(con => {\n                    return session(con);\n                });\n        }\n    };\n}\n\n/**\n * Validate the entire set of properties used to create a client.\n * @private\n * @param {Object} options - a mix of connection and extended client properties\n * @returns {boolean} Returns \"true\" if all properties and values are valid.\n * @throws when either the connection or connection pool properties are not\n * valid as well as when they contain unknown properties\n */\nClient.validate = function (options) {\n    // Validate the connection options.\n    connection.validate(options);\n\n    // Validate the client options.\n    const validKeys = VALID_OPTIONS.concat(connection.VALID_OPTIONS);\n    const invalidKeys = Object.keys(options).filter(k => validKeys.indexOf(k) === -1);\n\n    if (invalidKeys.length) {\n        throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_BAD_CLIENT_OPTION, invalidKeys[0]));\n    }\n\n    if (!isValidPlainObject({ value: options.pooling })) {\n        throw new Error(util.format(errors.MESSAGES.ER_DEVAPI_BAD_CLIENT_OPTION_VALUE, 'pooling', options.pooling));\n    }\n\n    // Assign proper default values to missing pooling options.\n    options.pooling = Object.assign({ enabled: true, maxIdleTime: 0, maxSize: 25, queueTimeout: 0 }, options.pooling);\n\n    // Validate the pooling options.\n    return pool.validate(options.pooling);\n};\n\nClient.VALID_OPTIONS = VALID_OPTIONS;\n\nmodule.exports = Client;\n"]},"metadata":{},"sourceType":"script"}