{"ast":null,"code":"/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst errors = require('./constants/errors');\n/**\n * WorkQueue - A queue handling responses as they come over the wire\n *\n * This holds a queue of handlers for incoming operations. The front handler\n * will process response till it considers itself done and notifies this\n * queue. On a multiplexing connection each session requires it's queue\n *\n * The handler method will receive two arguments. Argument 1 being the message,\n * argument 2 the callback for signaling that the handler is done (i.e. after\n * receiving the end of a result set)\n */\n\n/**\n * Create a WorkQueue\n * @constructor\n * @private\n */\n\n\nfunction WorkQueue() {\n  // Currently we use a simple array with push and shift as queue implementation this should be efficient enough as we\n  // don't expect a long queue. This assumption might be wrong with bulk operations.\n  this._queue = [];\n}\n\nmodule.exports = WorkQueue;\n\nWorkQueue.prototype.push = function (handler) {\n  this._queue.push(handler);\n};\n\nWorkQueue.prototype.clear = function () {\n  this._queue = [];\n};\n\nWorkQueue.prototype.hasMore = function () {\n  return !!this._queue.length;\n};\n\nWorkQueue.prototype.process = function (message) {\n  if (!this._queue.length) {\n    throw new Error(errors.MESSAGES.ER_X_CLIENT_EMPTY_WORK_QUEUE);\n  }\n\n  this._queue[0](message, () => this._queue.shift());\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/WorkQueue.js"],"names":["errors","require","WorkQueue","_queue","module","exports","prototype","push","handler","clear","hasMore","length","process","message","Error","MESSAGES","ER_X_CLIENT_EMPTY_WORK_QUEUE","shift"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,oBAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,GAAsB;AAClB;AACA;AACA,OAAKC,MAAL,GAAc,EAAd;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiBH,SAAjB;;AAEAA,SAAS,CAACI,SAAV,CAAoBC,IAApB,GAA2B,UAAUC,OAAV,EAAmB;AAC1C,OAAKL,MAAL,CAAYI,IAAZ,CAAiBC,OAAjB;AACH,CAFD;;AAIAN,SAAS,CAACI,SAAV,CAAoBG,KAApB,GAA4B,YAAY;AACpC,OAAKN,MAAL,GAAc,EAAd;AACH,CAFD;;AAIAD,SAAS,CAACI,SAAV,CAAoBI,OAApB,GAA8B,YAAY;AACtC,SAAO,CAAC,CAAC,KAAKP,MAAL,CAAYQ,MAArB;AACH,CAFD;;AAIAT,SAAS,CAACI,SAAV,CAAoBM,OAApB,GAA8B,UAAUC,OAAV,EAAmB;AAC7C,MAAI,CAAC,KAAKV,MAAL,CAAYQ,MAAjB,EAAyB;AACrB,UAAM,IAAIG,KAAJ,CAAUd,MAAM,CAACe,QAAP,CAAgBC,4BAA1B,CAAN;AACH;;AAED,OAAKb,MAAL,CAAY,CAAZ,EAAeU,OAAf,EAAwB,MAAM,KAAKV,MAAL,CAAYc,KAAZ,EAA9B;AACH,CAND","sourcesContent":["/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst errors = require('./constants/errors');\n\n/**\n * WorkQueue - A queue handling responses as they come over the wire\n *\n * This holds a queue of handlers for incoming operations. The front handler\n * will process response till it considers itself done and notifies this\n * queue. On a multiplexing connection each session requires it's queue\n *\n * The handler method will receive two arguments. Argument 1 being the message,\n * argument 2 the callback for signaling that the handler is done (i.e. after\n * receiving the end of a result set)\n */\n\n/**\n * Create a WorkQueue\n * @constructor\n * @private\n */\nfunction WorkQueue () {\n    // Currently we use a simple array with push and shift as queue implementation this should be efficient enough as we\n    // don't expect a long queue. This assumption might be wrong with bulk operations.\n    this._queue = [];\n}\n\nmodule.exports = WorkQueue;\n\nWorkQueue.prototype.push = function (handler) {\n    this._queue.push(handler);\n};\n\nWorkQueue.prototype.clear = function () {\n    this._queue = [];\n};\n\nWorkQueue.prototype.hasMore = function () {\n    return !!this._queue.length;\n};\n\nWorkQueue.prototype.process = function (message) {\n    if (!this._queue.length) {\n        throw new Error(errors.MESSAGES.ER_X_CLIENT_EMPTY_WORK_QUEUE);\n    }\n\n    this._queue[0](message, () => this._queue.shift());\n};\n"]},"metadata":{},"sourceType":"script"}