{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst errors = require('../../../constants/errors');\n\nconst parsePlainAddress = require('./parsePlainAddress');\n\nmodule.exports = parse;\n/**\n * Parse a single address with an explicit priority.\n * @private\n * @param {string} input - formatted address tuple string\n * @throws {Error} When explicit priorities are not provided for all failover addresses.\n * @throws {Error} When failover address priorities are out of bounds.\n * @returns {Address} Object containing the address details.\n * @example\n * const ipv6Address = '(address=[::1]:33060, 100)'\n * const ipv4Address = '(address=127.0.0.1:33060, 98)'\n * const cnAddress = '(address=localhost:33060, 99)'\n */\n\nfunction parse(input) {\n  const addressMatch = input.trim().match(/^\\(?address=([^,]+), ?priority=([\\d-]+)\\)$/) || [];\n\n  if (!addressMatch[1]) {\n    throw new Error(errors.MESSAGES.ER_DEVAPI_MIXED_CONNECTION_ENDPOINT_PRIORITY);\n  }\n\n  const address = parsePlainAddress(addressMatch[1]);\n  const priority = parseInt(addressMatch[2], 10);\n\n  if (isNaN(priority) || priority < 0 || priority > 100) {\n    throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_CONNECTION_ENDPOINT_PRIORITY_RANGE);\n  }\n\n  return Object.assign(address, {\n    priority\n  });\n}","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/Util/URIParser/parsePriorityAddress.js"],"names":["errors","require","parsePlainAddress","module","exports","parse","input","addressMatch","trim","match","Error","MESSAGES","ER_DEVAPI_MIXED_CONNECTION_ENDPOINT_PRIORITY","address","priority","parseInt","isNaN","ER_DEVAPI_BAD_CONNECTION_ENDPOINT_PRIORITY_RANGE","Object","assign"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,2BAAD,CAAtB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,qBAAD,CAAjC;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,KAAT,CAAgBC,KAAhB,EAAuB;AACnB,QAAMC,YAAY,GAAGD,KAAK,CAACE,IAAN,GAAaC,KAAb,CAAmB,4CAAnB,KAAoE,EAAzF;;AAEA,MAAI,CAACF,YAAY,CAAC,CAAD,CAAjB,EAAsB;AAClB,UAAM,IAAIG,KAAJ,CAAUV,MAAM,CAACW,QAAP,CAAgBC,4CAA1B,CAAN;AACH;;AAED,QAAMC,OAAO,GAAGX,iBAAiB,CAACK,YAAY,CAAC,CAAD,CAAb,CAAjC;AACA,QAAMO,QAAQ,GAAGC,QAAQ,CAACR,YAAY,CAAC,CAAD,CAAb,EAAkB,EAAlB,CAAzB;;AAEA,MAAIS,KAAK,CAACF,QAAD,CAAL,IAAmBA,QAAQ,GAAG,CAA9B,IAAmCA,QAAQ,GAAG,GAAlD,EAAuD;AACnD,UAAM,IAAIJ,KAAJ,CAAUV,MAAM,CAACW,QAAP,CAAgBM,gDAA1B,CAAN;AACH;;AAED,SAAOC,MAAM,CAACC,MAAP,CAAcN,OAAd,EAAuB;AAAEC,IAAAA;AAAF,GAAvB,CAAP;AACH","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst errors = require('../../../constants/errors');\nconst parsePlainAddress = require('./parsePlainAddress');\n\nmodule.exports = parse;\n\n/**\n * Parse a single address with an explicit priority.\n * @private\n * @param {string} input - formatted address tuple string\n * @throws {Error} When explicit priorities are not provided for all failover addresses.\n * @throws {Error} When failover address priorities are out of bounds.\n * @returns {Address} Object containing the address details.\n * @example\n * const ipv6Address = '(address=[::1]:33060, 100)'\n * const ipv4Address = '(address=127.0.0.1:33060, 98)'\n * const cnAddress = '(address=localhost:33060, 99)'\n */\nfunction parse (input) {\n    const addressMatch = input.trim().match(/^\\(?address=([^,]+), ?priority=([\\d-]+)\\)$/) || [];\n\n    if (!addressMatch[1]) {\n        throw new Error(errors.MESSAGES.ER_DEVAPI_MIXED_CONNECTION_ENDPOINT_PRIORITY);\n    }\n\n    const address = parsePlainAddress(addressMatch[1]);\n    const priority = parseInt(addressMatch[2], 10);\n\n    if (isNaN(priority) || priority < 0 || priority > 100) {\n        throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_CONNECTION_ENDPOINT_PRIORITY_RANGE);\n    }\n\n    return Object.assign(address, { priority });\n}\n"]},"metadata":{},"sourceType":"script"}