{"ast":null,"code":"/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst inserting = require('./Inserting');\n\nconst parseFlexibleParamList = require('./Util/parseFlexibleParamList');\n\nconst query = require('./Query');\n\nconst result = require('./Result');\n\nconst category = query.Type.TABLE;\n/**\n * TableInsert factory.\n * @module TableInsert\n * @mixes Query\n * @mixes Inserting\n */\n\n/**\n * @private\n * @alias module:TableInsert\n * @param {Connection} connection - database connection context\n * @param {module:Schema} schema - schema to bind\n * @param {string} tableName - table name\n * @param {string[]} [columns] - list of column names\n * @returns {module:TableInsert}\n */\n\nfunction TableInsert(connection, schema, tableName, columns) {\n  return Object.assign({}, inserting({\n    columns\n  }), query({\n    category,\n    schema,\n    tableName\n  }), {\n    /**\n     * Execute the insert query.\n     * @function\n     * @name module:TableInsert#execute\n     * @returns {Promise.<module:Result>}\n     */\n    execute() {\n      // Before trying to send any message to the server, we need to\n      // check if the connection is open (has a client instance) or if\n      // it became idle in the meantime.\n      if (!connection.isOpen() || connection.isIdle()) {\n        // There is always a default error (ER_DEVAPI_CONNECTION_CLOSED).\n        return Promise.reject(connection.getError());\n      }\n\n      return connection.getClient().crudInsert(this).then(details => result(details));\n    },\n\n    /**\n     * Set row values.\n     * @function\n     * @name module:TableInsert:values\n     * @param {...string|string[]} ExprOrLiteral - column values\n     * @throws {Error} When there is a mismatch with the number columns in the query.\n     * @example\n     * // arguments as column values\n     * table.insert('foo', 'bar').values('baz', 'qux')\n     * table.insert(['foo', 'bar']).values('baz', 'qux')\n     *\n     * // array of column values\n     * table.insert('foo', 'bar').values(['baz', 'qux'])\n     * table.insert(['foo', 'bar']).values(['baz', 'qux'])\n     *\n     * // comma-separated string with column values\n     * table.insert('foo', 'bar').values('baz, qux'])\n     * table.insert(['foo', 'bar']).values('baz, qux')\n     *\n     * // chaining multiple inserts\n     * table.insert('foo', 'bar')\n     *      .values(['baz', 'qux'])\n     *      .values(['quux', 'biz'])\n     *      .values('foo, bar')\n     * @returns {module:TableInsert} The query instance\n     */\n    values() {\n      return this.setItems(this.getItems().concat([parseFlexibleParamList(Array.prototype.slice.call(arguments))]));\n    }\n\n  });\n}\n\nmodule.exports = TableInsert;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/TableInsert.js"],"names":["inserting","require","parseFlexibleParamList","query","result","category","Type","TABLE","TableInsert","connection","schema","tableName","columns","Object","assign","execute","isOpen","isIdle","Promise","reject","getError","getClient","crudInsert","then","details","values","setItems","getItems","concat","Array","prototype","slice","call","arguments","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,+BAAD,CAAtC;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AAEA,MAAMI,QAAQ,GAAGF,KAAK,CAACG,IAAN,CAAWC,KAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAsBC,UAAtB,EAAkCC,MAAlC,EAA0CC,SAA1C,EAAqDC,OAArD,EAA8D;AAC1D,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBd,SAAS,CAAC;AAAEY,IAAAA;AAAF,GAAD,CAA3B,EAA0CT,KAAK,CAAC;AAAEE,IAAAA,QAAF;AAAYK,IAAAA,MAAZ;AAAoBC,IAAAA;AAApB,GAAD,CAA/C,EAAkF;AACrF;AACR;AACA;AACA;AACA;AACA;AACQI,IAAAA,OAAO,GAAI;AACP;AACA;AACA;AACA,UAAI,CAACN,UAAU,CAACO,MAAX,EAAD,IAAwBP,UAAU,CAACQ,MAAX,EAA5B,EAAiD;AAC7C;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeV,UAAU,CAACW,QAAX,EAAf,CAAP;AACH;;AAED,aAAOX,UAAU,CAACY,SAAX,GAAuBC,UAAvB,CAAkC,IAAlC,EACFC,IADE,CACGC,OAAO,IAAIpB,MAAM,CAACoB,OAAD,CADpB,CAAP;AAEH,KAlBoF;;AAoBrF;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,MAAM,GAAI;AACN,aAAO,KAAKC,QAAL,CAAc,KAAKC,QAAL,GAAgBC,MAAhB,CAAuB,CAAC1B,sBAAsB,CAAC2B,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAD,CAAvB,CAAvB,CAAd,CAAP;AACH;;AAhDoF,GAAlF,CAAP;AAkDH;;AAEDC,MAAM,CAACC,OAAP,GAAiB3B,WAAjB","sourcesContent":["/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst inserting = require('./Inserting');\nconst parseFlexibleParamList = require('./Util/parseFlexibleParamList');\nconst query = require('./Query');\nconst result = require('./Result');\n\nconst category = query.Type.TABLE;\n\n/**\n * TableInsert factory.\n * @module TableInsert\n * @mixes Query\n * @mixes Inserting\n */\n\n/**\n * @private\n * @alias module:TableInsert\n * @param {Connection} connection - database connection context\n * @param {module:Schema} schema - schema to bind\n * @param {string} tableName - table name\n * @param {string[]} [columns] - list of column names\n * @returns {module:TableInsert}\n */\nfunction TableInsert (connection, schema, tableName, columns) {\n    return Object.assign({}, inserting({ columns }), query({ category, schema, tableName }), {\n        /**\n         * Execute the insert query.\n         * @function\n         * @name module:TableInsert#execute\n         * @returns {Promise.<module:Result>}\n         */\n        execute () {\n            // Before trying to send any message to the server, we need to\n            // check if the connection is open (has a client instance) or if\n            // it became idle in the meantime.\n            if (!connection.isOpen() || connection.isIdle()) {\n                // There is always a default error (ER_DEVAPI_CONNECTION_CLOSED).\n                return Promise.reject(connection.getError());\n            }\n\n            return connection.getClient().crudInsert(this)\n                .then(details => result(details));\n        },\n\n        /**\n         * Set row values.\n         * @function\n         * @name module:TableInsert:values\n         * @param {...string|string[]} ExprOrLiteral - column values\n         * @throws {Error} When there is a mismatch with the number columns in the query.\n         * @example\n         * // arguments as column values\n         * table.insert('foo', 'bar').values('baz', 'qux')\n         * table.insert(['foo', 'bar']).values('baz', 'qux')\n         *\n         * // array of column values\n         * table.insert('foo', 'bar').values(['baz', 'qux'])\n         * table.insert(['foo', 'bar']).values(['baz', 'qux'])\n         *\n         * // comma-separated string with column values\n         * table.insert('foo', 'bar').values('baz, qux'])\n         * table.insert(['foo', 'bar']).values('baz, qux')\n         *\n         * // chaining multiple inserts\n         * table.insert('foo', 'bar')\n         *      .values(['baz', 'qux'])\n         *      .values(['quux', 'biz'])\n         *      .values('foo, bar')\n         * @returns {module:TableInsert} The query instance\n         */\n        values () {\n            return this.setItems(this.getItems().concat([parseFlexibleParamList(Array.prototype.slice.call(arguments))]));\n        }\n    });\n}\n\nmodule.exports = TableInsert;\n"]},"metadata":{},"sourceType":"script"}