{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst AuthenticateStartStub = require('../../../Stubs/mysqlx_session_pb').AuthenticateStart;\n\nconst bytes = require('../../ScalarValues/bytes');\n\nconst serializable = require('../../Traits/Serializable');\n\nconst wraps = require('../../Traits/Wraps');\n/**\n * @private\n * @alias module:adapters.Mysqlx.Session.AuthenticateStart\n * @param {proto.Mysqlx.Session.AuthenticateStart} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Session.AuthenticateStart}\n */\n\n\nfunction AuthenticateStart(proto) {\n  return Object.assign({}, serializable(proto), wraps(proto), {\n    /**\n     * Serialize to JSON using a protobuf-like convention.\n     * @function\n     * @name module:adapters.Mysqlx.Session.AuthenticateStart#toJSON\n     * @returns {Object} The JSON representation\n     */\n    toJSON() {\n      return {\n        mech_name: proto.getMechName(),\n        auth_data: bytes(proto.getAuthData()).toJSON(),\n        initial_response: bytes(proto.getInitialResponse()).toJSON()\n      };\n    },\n\n    /**\n     * Return a plain JavaScript object version of the underlying protobuf instance.\n     * @function\n     * @name module:adapters.Mysqlx.Session.AuthenticateStart#toObject\n     * @returns {Object}\n     */\n    toObject() {\n      return proto.toObject();\n    }\n\n  });\n}\n/**\n * Creates and wraps a Mysqlx.Session.AuthenticateStart instance with a given token.\n * @returns {module:adapters.Mysqlx.Session.AuthenticateStart}\n */\n\n\nAuthenticateStart.create = function (mechanism, password) {\n  const proto = new AuthenticateStartStub();\n  proto.setMechName(mechanism);\n  proto.setAuthData(bytes.create(password).valueOf());\n  return AuthenticateStart(proto);\n};\n\nmodule.exports = AuthenticateStart;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Wrappers/Messages/Session/AuthenticateStart.js"],"names":["AuthenticateStartStub","require","AuthenticateStart","bytes","serializable","wraps","proto","Object","assign","toJSON","mech_name","getMechName","auth_data","getAuthData","initial_response","getInitialResponse","toObject","create","mechanism","password","setMechName","setAuthData","valueOf","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,kCAAD,CAAP,CAA4CC,iBAA1E;;AACA,MAAMC,KAAK,GAAGF,OAAO,CAAC,0BAAD,CAArB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,iBAAT,CAA4BI,KAA5B,EAAmC;AAC/B,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,YAAY,CAACE,KAAD,CAA9B,EAAuCD,KAAK,CAACC,KAAD,CAA5C,EAAqD;AACxD;AACR;AACA;AACA;AACA;AACA;AACQG,IAAAA,MAAM,GAAI;AACN,aAAO;AACHC,QAAAA,SAAS,EAAEJ,KAAK,CAACK,WAAN,EADR;AAEHC,QAAAA,SAAS,EAAET,KAAK,CAACG,KAAK,CAACO,WAAN,EAAD,CAAL,CAA2BJ,MAA3B,EAFR;AAGHK,QAAAA,gBAAgB,EAAEX,KAAK,CAACG,KAAK,CAACS,kBAAN,EAAD,CAAL,CAAkCN,MAAlC;AAHf,OAAP;AAKH,KAbuD;;AAexD;AACR;AACA;AACA;AACA;AACA;AACQO,IAAAA,QAAQ,GAAI;AACR,aAAOV,KAAK,CAACU,QAAN,EAAP;AACH;;AAvBuD,GAArD,CAAP;AAyBH;AAED;AACA;AACA;AACA;;;AACAd,iBAAiB,CAACe,MAAlB,GAA2B,UAAUC,SAAV,EAAqBC,QAArB,EAA+B;AACtD,QAAMb,KAAK,GAAG,IAAIN,qBAAJ,EAAd;AACAM,EAAAA,KAAK,CAACc,WAAN,CAAkBF,SAAlB;AACAZ,EAAAA,KAAK,CAACe,WAAN,CAAkBlB,KAAK,CAACc,MAAN,CAAaE,QAAb,EAAuBG,OAAvB,EAAlB;AAEA,SAAOpB,iBAAiB,CAACI,KAAD,CAAxB;AACH,CAND;;AAQAiB,MAAM,CAACC,OAAP,GAAiBtB,iBAAjB","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst AuthenticateStartStub = require('../../../Stubs/mysqlx_session_pb').AuthenticateStart;\nconst bytes = require('../../ScalarValues/bytes');\nconst serializable = require('../../Traits/Serializable');\nconst wraps = require('../../Traits/Wraps');\n\n/**\n * @private\n * @alias module:adapters.Mysqlx.Session.AuthenticateStart\n * @param {proto.Mysqlx.Session.AuthenticateStart} proto - protobuf stub\n * @returns {module:adapters.Mysqlx.Session.AuthenticateStart}\n */\nfunction AuthenticateStart (proto) {\n    return Object.assign({}, serializable(proto), wraps(proto), {\n        /**\n         * Serialize to JSON using a protobuf-like convention.\n         * @function\n         * @name module:adapters.Mysqlx.Session.AuthenticateStart#toJSON\n         * @returns {Object} The JSON representation\n         */\n        toJSON () {\n            return {\n                mech_name: proto.getMechName(),\n                auth_data: bytes(proto.getAuthData()).toJSON(),\n                initial_response: bytes(proto.getInitialResponse()).toJSON()\n            };\n        },\n\n        /**\n         * Return a plain JavaScript object version of the underlying protobuf instance.\n         * @function\n         * @name module:adapters.Mysqlx.Session.AuthenticateStart#toObject\n         * @returns {Object}\n         */\n        toObject () {\n            return proto.toObject();\n        }\n    });\n}\n\n/**\n * Creates and wraps a Mysqlx.Session.AuthenticateStart instance with a given token.\n * @returns {module:adapters.Mysqlx.Session.AuthenticateStart}\n */\nAuthenticateStart.create = function (mechanism, password) {\n    const proto = new AuthenticateStartStub();\n    proto.setMechName(mechanism);\n    proto.setAuthData(bytes.create(password).valueOf());\n\n    return AuthenticateStart(proto);\n};\n\nmodule.exports = AuthenticateStart;\n"]},"metadata":{},"sourceType":"script"}