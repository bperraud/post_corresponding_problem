{"ast":null,"code":"/*\n * Copyright (c) 2018, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst column = require('./Column');\n\nconst baseResult = require('./BaseResult');\n/**\n * Relational table API for retrieving data.\n * @module RowResult\n * @mixes module:BaseResult\n */\n\n/**\n * @private\n * @alias module:RowResult\n * @param {Object} state - result details\n * @returns {module:RowResult}\n */\n\n\nfunction RowResult(state) {\n  state = Object.assign({\n    index: 0,\n    metadata: [],\n    results: []\n  }, state);\n  return Object.assign({}, baseResult(state), {\n    /**\n     * Retrieve the number of documents affected by the operation.\n     * @function\n     * @name module:RowResult#getAffectedItemsCount\n     * @returns {number} The number of rows.\n     */\n    getAffectedItemsCount() {\n      return state.rowsAffected;\n    },\n\n    /**\n     * Consume the current result set from memory (and flush it).\n     * @function\n     * @name module:RowResult#fetchAll\n     * @example\n     * table.select()\n     *   .execute()\n     *   .then(res => {\n     *     // get the list of documents in the result set\n     *     var rows = res.fetchAll()\n     *   })\n     *\n     * session.sql(\"SELECT 'foo'\")\n     *   .execute()\n     *   .then(res => {\n     *     console.log(res.fetchAll()) // [['foo']]\n     *   })\n     * @returns {Array<Array>} A list of rows.\n     */\n    fetchAll() {\n      if (!state.results || !state.results.length) {\n        return [];\n      }\n\n      const current = state.results[state.index] || [];\n\n      if (current.length) {\n        state.results[state.index] = null;\n      } // fetchOne() might have been called already.\n\n\n      const lastNullable = current.lastIndexOf(null);\n      const startIndex = lastNullable > -1 ? lastNullable + 1 : 0;\n      return current.slice(startIndex, current.length).map(row => row.toArray());\n    },\n\n    /**\n     * Consume a single result set row from memory (and flush it).\n     * @function\n     * @name module:RowResult#fetchOne\n     * @example\n     * table.select()\n     *   .execute()\n     *   .then(res => {\n     *     // iterate over the documents in the result set\n     *     while (var row = res.fetchOne()) {\n     *       // do something with the current document\n     *     }\n     *   })\n     *\n     * session.sql(\"SELECT 'foo'\")\n     *   .execute()\n     *   .then(res => {\n     *     console.log(res.fetchOne()) // ['foo']\n     *   })\n     * @returns {Array} A row.\n     */\n    fetchOne() {\n      if (!state.results || !state.results.length) {\n        return;\n      }\n\n      const current = state.results[state.index] || [];\n      let i = 0;\n\n      while (i < current.length) {\n        if (current[i]) {\n          // consume the current item in the result set and deallocate the memory\n          const row = current[i];\n          current[i] = null;\n\n          if (i === current.length - 1) {\n            // the result set has been entirely consumed and the memory can be deallocated\n            state.results[state.index] = null;\n          }\n\n          return row.toArray();\n        }\n\n        ++i;\n      }\n    },\n\n    /**\n     * Retrieve the list of [columns]{@link module:Column} that are part of the result set.\n     * @function\n     * @name module:RowResult#getColumns\n     * @example\n     * session.sql(\"SELECT 'foo' AS name\")\n     *   .execute()\n     *   .then(res => {\n     *     var columns = res.getColumns()\n     *     console.log(columns[0].getColumnLabel()) // name\n     *   })\n     * @returns {Array<module:Column>} A list of [columns]{@link module:Column}.\n     */\n    getColumns() {\n      const columns = state.metadata[state.index] || [];\n      return columns.map(m => column(m));\n    },\n\n    /**\n     * Retrieve the entire result set (without flushing).\n     * @function\n     * @name module:RowResult#getResults\n     * @returns {Array<Array<Array>>}\n     */\n    getResults() {\n      return state.results;\n    },\n\n    /**\n     * Move to the next available result set.\n     * @function\n     * @name module:RowResult#nextResult\n     * @example\n     * // CREATE PROCEDURE proc() BEGIN\n     * //   SELECT 'foo' as name;\n     * //   SELECT 'bar' as name;\n     * // END\n     * session.sql('CALL proc()')\n     *   .execute()\n     *   .then(res => {\n     *     // iterate over multiple result sets\n     *     do {\n     *       console.log(res.fetchOne())\n     *     } while (res.nextResult())\n     *   })\n     * @returns {boolean}\n     */\n    nextResult() {\n      state.index += 1;\n\n      if (!state.results || !state.results.length || !state.results[state.index]) {\n        return false;\n      }\n\n      return true;\n    },\n\n    /**\n     * Returns the current result set (without flushing) as a JavaScript Arrray.\n     * @function\n     * @name module:RowResult#toArray\n     * @returns {Array}\n     */\n    toArray() {\n      return state.results[state.index].map(row => row.toArray());\n    }\n\n  });\n}\n\nmodule.exports = RowResult;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/RowResult.js"],"names":["column","require","baseResult","RowResult","state","Object","assign","index","metadata","results","getAffectedItemsCount","rowsAffected","fetchAll","length","current","lastNullable","lastIndexOf","startIndex","slice","map","row","toArray","fetchOne","i","getColumns","columns","m","getResults","nextResult","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2018, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst column = require('./Column');\nconst baseResult = require('./BaseResult');\n\n/**\n * Relational table API for retrieving data.\n * @module RowResult\n * @mixes module:BaseResult\n */\n\n/**\n * @private\n * @alias module:RowResult\n * @param {Object} state - result details\n * @returns {module:RowResult}\n */\nfunction RowResult (state) {\n    state = Object.assign({ index: 0, metadata: [], results: [] }, state);\n\n    return Object.assign({}, baseResult(state), {\n        /**\n         * Retrieve the number of documents affected by the operation.\n         * @function\n         * @name module:RowResult#getAffectedItemsCount\n         * @returns {number} The number of rows.\n         */\n        getAffectedItemsCount () {\n            return state.rowsAffected;\n        },\n\n        /**\n         * Consume the current result set from memory (and flush it).\n         * @function\n         * @name module:RowResult#fetchAll\n         * @example\n         * table.select()\n         *   .execute()\n         *   .then(res => {\n         *     // get the list of documents in the result set\n         *     var rows = res.fetchAll()\n         *   })\n         *\n         * session.sql(\"SELECT 'foo'\")\n         *   .execute()\n         *   .then(res => {\n         *     console.log(res.fetchAll()) // [['foo']]\n         *   })\n         * @returns {Array<Array>} A list of rows.\n         */\n        fetchAll () {\n            if (!state.results || !state.results.length) {\n                return [];\n            }\n\n            const current = state.results[state.index] || [];\n\n            if (current.length) {\n                state.results[state.index] = null;\n            }\n\n            // fetchOne() might have been called already.\n            const lastNullable = current.lastIndexOf(null);\n            const startIndex = lastNullable > -1 ? lastNullable + 1 : 0;\n\n            return current.slice(startIndex, current.length).map(row => row.toArray());\n        },\n\n        /**\n         * Consume a single result set row from memory (and flush it).\n         * @function\n         * @name module:RowResult#fetchOne\n         * @example\n         * table.select()\n         *   .execute()\n         *   .then(res => {\n         *     // iterate over the documents in the result set\n         *     while (var row = res.fetchOne()) {\n         *       // do something with the current document\n         *     }\n         *   })\n         *\n         * session.sql(\"SELECT 'foo'\")\n         *   .execute()\n         *   .then(res => {\n         *     console.log(res.fetchOne()) // ['foo']\n         *   })\n         * @returns {Array} A row.\n         */\n        fetchOne () {\n            if (!state.results || !state.results.length) {\n                return;\n            }\n\n            const current = state.results[state.index] || [];\n\n            let i = 0;\n\n            while (i < current.length) {\n                if (current[i]) {\n                    // consume the current item in the result set and deallocate the memory\n                    const row = current[i];\n                    current[i] = null;\n\n                    if (i === current.length - 1) {\n                        // the result set has been entirely consumed and the memory can be deallocated\n                        state.results[state.index] = null;\n                    }\n\n                    return row.toArray();\n                }\n\n                ++i;\n            }\n        },\n\n        /**\n         * Retrieve the list of [columns]{@link module:Column} that are part of the result set.\n         * @function\n         * @name module:RowResult#getColumns\n         * @example\n         * session.sql(\"SELECT 'foo' AS name\")\n         *   .execute()\n         *   .then(res => {\n         *     var columns = res.getColumns()\n         *     console.log(columns[0].getColumnLabel()) // name\n         *   })\n         * @returns {Array<module:Column>} A list of [columns]{@link module:Column}.\n         */\n        getColumns () {\n            const columns = state.metadata[state.index] || [];\n\n            return columns.map(m => column(m));\n        },\n\n        /**\n         * Retrieve the entire result set (without flushing).\n         * @function\n         * @name module:RowResult#getResults\n         * @returns {Array<Array<Array>>}\n         */\n        getResults () {\n            return state.results;\n        },\n\n        /**\n         * Move to the next available result set.\n         * @function\n         * @name module:RowResult#nextResult\n         * @example\n         * // CREATE PROCEDURE proc() BEGIN\n         * //   SELECT 'foo' as name;\n         * //   SELECT 'bar' as name;\n         * // END\n         * session.sql('CALL proc()')\n         *   .execute()\n         *   .then(res => {\n         *     // iterate over multiple result sets\n         *     do {\n         *       console.log(res.fetchOne())\n         *     } while (res.nextResult())\n         *   })\n         * @returns {boolean}\n         */\n        nextResult () {\n            state.index += 1;\n\n            if (!state.results || !state.results.length || !state.results[state.index]) {\n                return false;\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns the current result set (without flushing) as a JavaScript Arrray.\n         * @function\n         * @name module:RowResult#toArray\n         * @returns {Array}\n         */\n        toArray () {\n            return state.results[state.index].map(row => row.toArray());\n        }\n    });\n}\n\nmodule.exports = RowResult;\n"]},"metadata":{},"sourceType":"script"}