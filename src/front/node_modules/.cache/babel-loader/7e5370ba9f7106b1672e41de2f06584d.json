{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\nvar jspb = require('google-protobuf');\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar mysqlx_pb = require('./mysqlx_pb.js');\n\nvar mysqlx_datatypes_pb = require('./mysqlx_datatypes_pb.js');\n\ngoog.exportSymbol('proto.Mysqlx.Sql.StmtExecute', null, global);\ngoog.exportSymbol('proto.Mysqlx.Sql.StmtExecuteOk', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.Mysqlx.Sql.StmtExecute = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Sql.StmtExecute.repeatedFields_, null);\n};\n\ngoog.inherits(proto.Mysqlx.Sql.StmtExecute, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Sql.StmtExecute.displayName = 'proto.Mysqlx.Sql.StmtExecute';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.Mysqlx.Sql.StmtExecute.repeatedFields_ = [2];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Sql.StmtExecute.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Sql.StmtExecute.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Sql.StmtExecute} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Sql.StmtExecute.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      namespace: jspb.Message.getFieldWithDefault(msg, 3, \"sql\"),\n      stmt: msg.getStmt_asB64(),\n      argsList: jspb.Message.toObjectList(msg.getArgsList(), mysqlx_datatypes_pb.Any.toObject, includeInstance),\n      compactMetadata: jspb.Message.getFieldWithDefault(msg, 4, false)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Sql.StmtExecute}\n */\n\n\nproto.Mysqlx.Sql.StmtExecute.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Sql.StmtExecute();\n  return proto.Mysqlx.Sql.StmtExecute.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Sql.StmtExecute} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Sql.StmtExecute}\n */\n\n\nproto.Mysqlx.Sql.StmtExecute.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 3:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setNamespace(value);\n        break;\n\n      case 1:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setStmt(value);\n        break;\n\n      case 2:\n        var value = new mysqlx_datatypes_pb.Any();\n        reader.readMessage(value, mysqlx_datatypes_pb.Any.deserializeBinaryFromReader);\n        msg.addArgs(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setCompactMetadata(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Sql.StmtExecute.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Sql.StmtExecute} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Sql.StmtExecute.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {string} */\n  jspb.Message.getField(message, 3);\n\n  if (f != null) {\n    writer.writeString(3, f);\n  }\n\n  f =\n  /** @type {!(string|Uint8Array)} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeBytes(1, f);\n  }\n\n  f = message.getArgsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(2, f, mysqlx_datatypes_pb.Any.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {boolean} */\n  jspb.Message.getField(message, 4);\n\n  if (f != null) {\n    writer.writeBool(4, f);\n  }\n};\n/**\n * optional string namespace = 3;\n * @return {string}\n */\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.getNamespace = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 3, \"sql\")\n  );\n};\n/** @param {string} value */\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.setNamespace = function (value) {\n  jspb.Message.setField(this, 3, value);\n};\n\nproto.Mysqlx.Sql.StmtExecute.prototype.clearNamespace = function () {\n  jspb.Message.setField(this, 3, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.hasNamespace = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * required bytes stmt = 1;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.getStmt = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * required bytes stmt = 1;\n * This is a type-conversion wrapper around `getStmt()`\n * @return {string}\n */\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.getStmt_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getStmt())\n  );\n};\n/**\n * required bytes stmt = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getStmt()`\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.getStmt_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getStmt())\n  );\n};\n/** @param {!(string|Uint8Array)} value */\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.setStmt = function (value) {\n  jspb.Message.setField(this, 1, value);\n};\n\nproto.Mysqlx.Sql.StmtExecute.prototype.clearStmt = function () {\n  jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.hasStmt = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * repeated Mysqlx.Datatypes.Any args = 2;\n * @return {!Array.<!proto.Mysqlx.Datatypes.Any>}\n */\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.getArgsList = function () {\n  return (\n    /** @type{!Array.<!proto.Mysqlx.Datatypes.Any>} */\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_datatypes_pb.Any, 2)\n  );\n};\n/** @param {!Array.<!proto.Mysqlx.Datatypes.Any>} value */\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.setArgsList = function (value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n/**\n * @param {!proto.Mysqlx.Datatypes.Any=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Datatypes.Any}\n */\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.addArgs = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Mysqlx.Datatypes.Any, opt_index);\n};\n\nproto.Mysqlx.Sql.StmtExecute.prototype.clearArgsList = function () {\n  this.setArgsList([]);\n};\n/**\n * optional bool compact_metadata = 4;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val === true/false} in those cases.\n * @return {boolean}\n */\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.getCompactMetadata = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getFieldWithDefault(this, 4, false)\n  );\n};\n/** @param {boolean} value */\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.setCompactMetadata = function (value) {\n  jspb.Message.setField(this, 4, value);\n};\n\nproto.Mysqlx.Sql.StmtExecute.prototype.clearCompactMetadata = function () {\n  jspb.Message.setField(this, 4, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.hasCompactMetadata = function () {\n  return jspb.Message.getField(this, 4) != null;\n};\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Mysqlx.Sql.StmtExecuteOk = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Mysqlx.Sql.StmtExecuteOk, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Sql.StmtExecuteOk.displayName = 'proto.Mysqlx.Sql.StmtExecuteOk';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Mysqlx.Sql.StmtExecuteOk.prototype.toObject = function (opt_includeInstance) {\n    return proto.Mysqlx.Sql.StmtExecuteOk.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Mysqlx.Sql.StmtExecuteOk} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Mysqlx.Sql.StmtExecuteOk.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {};\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Sql.StmtExecuteOk}\n */\n\n\nproto.Mysqlx.Sql.StmtExecuteOk.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Sql.StmtExecuteOk();\n  return proto.Mysqlx.Sql.StmtExecuteOk.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Sql.StmtExecuteOk} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Sql.StmtExecuteOk}\n */\n\n\nproto.Mysqlx.Sql.StmtExecuteOk.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Mysqlx.Sql.StmtExecuteOk.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Sql.StmtExecuteOk.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Sql.StmtExecuteOk} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Mysqlx.Sql.StmtExecuteOk.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n};\n\ngoog.object.extend(exports, proto.Mysqlx.Sql);","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/Stubs/mysqlx_sql_pb.js"],"names":["jspb","require","goog","global","Function","mysqlx_pb","mysqlx_datatypes_pb","exportSymbol","proto","Mysqlx","Sql","StmtExecute","opt_data","Message","initialize","repeatedFields_","inherits","DEBUG","COMPILED","displayName","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","namespace","getFieldWithDefault","stmt","getStmt_asB64","argsList","toObjectList","getArgsList","Any","compactMetadata","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","value","readString","setNamespace","readBytes","setStmt","readMessage","addArgs","readBool","setCompactMetadata","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","undefined","getField","writeString","writeBytes","length","writeRepeatedMessage","writeBool","getNamespace","setField","clearNamespace","hasNamespace","getStmt","bytesAsB64","getStmt_asU8","bytesAsU8","clearStmt","hasStmt","getRepeatedWrapperField","setArgsList","setRepeatedWrapperField","opt_value","opt_index","addToRepeatedWrapperField","Datatypes","clearArgsList","getCompactMetadata","clearCompactMetadata","hasCompactMetadata","StmtExecuteOk","object","extend","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar mysqlx_pb = require('./mysqlx_pb.js');\nvar mysqlx_datatypes_pb = require('./mysqlx_datatypes_pb.js');\ngoog.exportSymbol('proto.Mysqlx.Sql.StmtExecute', null, global);\ngoog.exportSymbol('proto.Mysqlx.Sql.StmtExecuteOk', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Sql.StmtExecute = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Sql.StmtExecute.repeatedFields_, null);\n};\ngoog.inherits(proto.Mysqlx.Sql.StmtExecute, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Sql.StmtExecute.displayName = 'proto.Mysqlx.Sql.StmtExecute';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Mysqlx.Sql.StmtExecute.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Sql.StmtExecute.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Sql.StmtExecute.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Sql.StmtExecute} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Sql.StmtExecute.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    namespace: jspb.Message.getFieldWithDefault(msg, 3, \"sql\"),\n    stmt: msg.getStmt_asB64(),\n    argsList: jspb.Message.toObjectList(msg.getArgsList(),\n    mysqlx_datatypes_pb.Any.toObject, includeInstance),\n    compactMetadata: jspb.Message.getFieldWithDefault(msg, 4, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Sql.StmtExecute}\n */\nproto.Mysqlx.Sql.StmtExecute.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Sql.StmtExecute;\n  return proto.Mysqlx.Sql.StmtExecute.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Sql.StmtExecute} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Sql.StmtExecute}\n */\nproto.Mysqlx.Sql.StmtExecute.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setNamespace(value);\n      break;\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setStmt(value);\n      break;\n    case 2:\n      var value = new mysqlx_datatypes_pb.Any;\n      reader.readMessage(value,mysqlx_datatypes_pb.Any.deserializeBinaryFromReader);\n      msg.addArgs(value);\n      break;\n    case 4:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setCompactMetadata(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Sql.StmtExecute.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Sql.StmtExecute.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Sql.StmtExecute} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Sql.StmtExecute.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {string} */ (jspb.Message.getField(message, 3));\n  if (f != null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getArgsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      mysqlx_datatypes_pb.Any.serializeBinaryToWriter\n    );\n  }\n  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));\n  if (f != null) {\n    writer.writeBool(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string namespace = 3;\n * @return {string}\n */\nproto.Mysqlx.Sql.StmtExecute.prototype.getNamespace = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"sql\"));\n};\n\n\n/** @param {string} value */\nproto.Mysqlx.Sql.StmtExecute.prototype.setNamespace = function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.clearNamespace = function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Sql.StmtExecute.prototype.hasNamespace = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * required bytes stmt = 1;\n * @return {!(string|Uint8Array)}\n */\nproto.Mysqlx.Sql.StmtExecute.prototype.getStmt = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * required bytes stmt = 1;\n * This is a type-conversion wrapper around `getStmt()`\n * @return {string}\n */\nproto.Mysqlx.Sql.StmtExecute.prototype.getStmt_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getStmt()));\n};\n\n\n/**\n * required bytes stmt = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getStmt()`\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Sql.StmtExecute.prototype.getStmt_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getStmt()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.Mysqlx.Sql.StmtExecute.prototype.setStmt = function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.clearStmt = function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Sql.StmtExecute.prototype.hasStmt = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * repeated Mysqlx.Datatypes.Any args = 2;\n * @return {!Array.<!proto.Mysqlx.Datatypes.Any>}\n */\nproto.Mysqlx.Sql.StmtExecute.prototype.getArgsList = function() {\n  return /** @type{!Array.<!proto.Mysqlx.Datatypes.Any>} */ (\n    jspb.Message.getRepeatedWrapperField(this, mysqlx_datatypes_pb.Any, 2));\n};\n\n\n/** @param {!Array.<!proto.Mysqlx.Datatypes.Any>} value */\nproto.Mysqlx.Sql.StmtExecute.prototype.setArgsList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.Mysqlx.Datatypes.Any=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Mysqlx.Datatypes.Any}\n */\nproto.Mysqlx.Sql.StmtExecute.prototype.addArgs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Mysqlx.Datatypes.Any, opt_index);\n};\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.clearArgsList = function() {\n  this.setArgsList([]);\n};\n\n\n/**\n * optional bool compact_metadata = 4;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val === true/false} in those cases.\n * @return {boolean}\n */\nproto.Mysqlx.Sql.StmtExecute.prototype.getCompactMetadata = function() {\n  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));\n};\n\n\n/** @param {boolean} value */\nproto.Mysqlx.Sql.StmtExecute.prototype.setCompactMetadata = function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.Mysqlx.Sql.StmtExecute.prototype.clearCompactMetadata = function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Mysqlx.Sql.StmtExecute.prototype.hasCompactMetadata = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Mysqlx.Sql.StmtExecuteOk = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Mysqlx.Sql.StmtExecuteOk, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Mysqlx.Sql.StmtExecuteOk.displayName = 'proto.Mysqlx.Sql.StmtExecuteOk';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Mysqlx.Sql.StmtExecuteOk.prototype.toObject = function(opt_includeInstance) {\n  return proto.Mysqlx.Sql.StmtExecuteOk.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Mysqlx.Sql.StmtExecuteOk} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Sql.StmtExecuteOk.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Mysqlx.Sql.StmtExecuteOk}\n */\nproto.Mysqlx.Sql.StmtExecuteOk.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Mysqlx.Sql.StmtExecuteOk;\n  return proto.Mysqlx.Sql.StmtExecuteOk.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Mysqlx.Sql.StmtExecuteOk} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Mysqlx.Sql.StmtExecuteOk}\n */\nproto.Mysqlx.Sql.StmtExecuteOk.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Mysqlx.Sql.StmtExecuteOk.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Mysqlx.Sql.StmtExecuteOk.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Mysqlx.Sql.StmtExecuteOk} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Mysqlx.Sql.StmtExecuteOk.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\ngoog.object.extend(exports, proto.Mysqlx.Sql);\n"]},"metadata":{},"sourceType":"script"}