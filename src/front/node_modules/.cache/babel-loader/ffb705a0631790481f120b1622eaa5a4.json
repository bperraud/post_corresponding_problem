{"ast":null,"code":"/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst BaseHandler = require('./BaseHandler');\n\nconst authenticateContinue = require('../Wrappers/Messages/Session/AuthenticateContinue');\n\nconst authenticateOk = require('../Wrappers/Messages/Session/AuthenticateOk');\n\nconst notice = require('../Wrappers/Messages/Notice/Frame');\n\nconst logger = require('../../logger');\n\nconst sessionStateChanged = require('../Wrappers/Messages/Notice/SessionStateChanged');\n\nconst util = require('util');\n\nconst log = logger('protocol:inbound:Mysqlx');\n\nfunction AuthenticationHandler(auth, protocol) {\n  BaseHandler.call(this);\n  this._auth = auth;\n  this._client = protocol;\n}\n\nutil.inherits(AuthenticationHandler, BaseHandler);\n\nAuthenticationHandler.prototype[notice.MESSAGE_ID] = function (payload) {\n  const inboundNotice = notice.deserialize(payload);\n  log.info('Notice.Frame', inboundNotice);\n\n  if (inboundNotice.getTypeId() !== notice.Type.SESSION_STATE_CHANGED) {\n    return;\n  }\n\n  const inboundSessionStateChanged = inboundNotice.getPayload();\n\n  if (inboundSessionStateChanged.getParameterId() !== sessionStateChanged.Parameter.CLIENT_ID_ASSIGNED) {\n    return;\n  } // otherwise, there is a connection id available\n\n\n  this._connectionId = inboundSessionStateChanged.toObject().values[0];\n};\n\nAuthenticationHandler.prototype[authenticateContinue.MESSAGE_ID] = function (payload, queueDone) {\n  const inboundAuthenticateContinue = authenticateContinue.deserialize(payload);\n  log.info('Session.AuthenticateContinue', inboundAuthenticateContinue);\n  const data = Buffer.from(inboundAuthenticateContinue.toObject().authData, 'base64');\n\n  try {\n    this._client.authenticateContinue(this._auth.getNextAuthData(data), this);\n  } catch (err) {\n    queueDone();\n\n    this._fail(err);\n  }\n};\n\nAuthenticationHandler.prototype[authenticateOk.MESSAGE_ID] = function (payload, queueDone) {\n  queueDone();\n  const inboundAuthenticateOk = authenticateOk.deserialize(payload);\n  log.info('Session.AuthenticateOk', inboundAuthenticateOk);\n\n  this._resolve({\n    connectionId: this._connectionId\n  });\n};\n\nmodule.exports = AuthenticationHandler;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/Protocol/InboundHandlers/AuthenticationHandler.js"],"names":["BaseHandler","require","authenticateContinue","authenticateOk","notice","logger","sessionStateChanged","util","log","AuthenticationHandler","auth","protocol","call","_auth","_client","inherits","prototype","MESSAGE_ID","payload","inboundNotice","deserialize","info","getTypeId","Type","SESSION_STATE_CHANGED","inboundSessionStateChanged","getPayload","getParameterId","Parameter","CLIENT_ID_ASSIGNED","_connectionId","toObject","values","queueDone","inboundAuthenticateContinue","data","Buffer","from","authData","getNextAuthData","err","_fail","inboundAuthenticateOk","_resolve","connectionId","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst BaseHandler = require('./BaseHandler');\nconst authenticateContinue = require('../Wrappers/Messages/Session/AuthenticateContinue');\nconst authenticateOk = require('../Wrappers/Messages/Session/AuthenticateOk');\nconst notice = require('../Wrappers/Messages/Notice/Frame');\nconst logger = require('../../logger');\nconst sessionStateChanged = require('../Wrappers/Messages/Notice/SessionStateChanged');\nconst util = require('util');\n\nconst log = logger('protocol:inbound:Mysqlx');\n\nfunction AuthenticationHandler (auth, protocol) {\n    BaseHandler.call(this);\n    this._auth = auth;\n    this._client = protocol;\n}\n\nutil.inherits(AuthenticationHandler, BaseHandler);\n\nAuthenticationHandler.prototype[notice.MESSAGE_ID] = function (payload) {\n    const inboundNotice = notice.deserialize(payload);\n    log.info('Notice.Frame', inboundNotice);\n\n    if (inboundNotice.getTypeId() !== notice.Type.SESSION_STATE_CHANGED) {\n        return;\n    }\n\n    const inboundSessionStateChanged = inboundNotice.getPayload();\n\n    if (inboundSessionStateChanged.getParameterId() !== sessionStateChanged.Parameter.CLIENT_ID_ASSIGNED) {\n        return;\n    }\n\n    // otherwise, there is a connection id available\n    this._connectionId = inboundSessionStateChanged.toObject().values[0];\n};\n\nAuthenticationHandler.prototype[authenticateContinue.MESSAGE_ID] = function (payload, queueDone) {\n    const inboundAuthenticateContinue = authenticateContinue.deserialize(payload);\n    log.info('Session.AuthenticateContinue', inboundAuthenticateContinue);\n\n    const data = Buffer.from(inboundAuthenticateContinue.toObject().authData, 'base64');\n\n    try {\n        this._client.authenticateContinue(this._auth.getNextAuthData(data), this);\n    } catch (err) {\n        queueDone();\n        this._fail(err);\n    }\n};\n\nAuthenticationHandler.prototype[authenticateOk.MESSAGE_ID] = function (payload, queueDone) {\n    queueDone();\n\n    const inboundAuthenticateOk = authenticateOk.deserialize(payload);\n    log.info('Session.AuthenticateOk', inboundAuthenticateOk);\n\n    this._resolve({ connectionId: this._connectionId });\n};\n\nmodule.exports = AuthenticationHandler;\n"]},"metadata":{},"sourceType":"script"}