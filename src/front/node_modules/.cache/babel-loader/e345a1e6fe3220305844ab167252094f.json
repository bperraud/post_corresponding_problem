{"ast":null,"code":"/*\n * Copyright (c) 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n/**\n * Utilities for input validation.\n * @private\n * @module Validator\n */\n\n/**\n * Check if a value is a valid array under the given conditions.\n * @private\n * @param {Object} [options]\n * @param {boolean} [options.required=false] - should not be undefined\n * @param {*} [options.value] - value to check\n * @param {function} [options.validator] - validator function to apply for each item in the array\n * @returns {boolean}\n */\nfunction isValidArray() {\n  let {\n    required = false,\n    value,\n    validator\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (typeof value === 'undefined' && required === true) {\n    return false;\n  }\n\n  if (typeof value !== 'undefined' && !Array.isArray(value)) {\n    return false;\n  } // If the value is an array and there is an item validator, we need to\n  // validate the items.\n  // For now, we assume that if a validator is provided, the array should\n  // not be empty and should not contain \"undefined\" values\n\n\n  if (typeof value !== 'undefined' && typeof validator === 'function') {\n    // If the array is empty, the index validator cannot complete.\n    if (!value.length) {\n      return false;\n    } // The index validator only makes sense if the value is not\n    // \"undefined\".\n\n\n    return value.every(v => validator({\n      required: true,\n      value: v\n    }));\n  }\n\n  return true;\n}\n\n;\n/**\n * Check if a value is a valid boolean under the given conditions.\n * @private\n * @param {Object} [options]\n * @param {boolean} [options.required=false] - should not be undefined\n * @param {*} [options.value] - value to check\n * @returns {boolean}\n */\n\nfunction isValidBoolean() {\n  let {\n    required = false,\n    value\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (typeof value === 'undefined' && required === true) {\n    return false;\n  }\n\n  if (typeof value !== 'undefined' && typeof value !== 'boolean') {\n    return false;\n  }\n\n  return true;\n}\n\n;\n/**\n * Check if a value is a valid integer under the given conditions.\n * @private\n * @param {Object} [options]\n * @param {boolean} [options.required=false] - should not be undefined\n * @param {*} [options.value] - value to check\n * @returns {boolean}\n */\n\nfunction isValidInteger() {\n  let {\n    required = false,\n    max = Number.MAX_SAFE_INTEGER,\n    min = Number.MIN_SAFE_INTEGER,\n    value\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (typeof value === 'undefined' && required === true) {\n    return false;\n  }\n\n  if (typeof value !== 'undefined' && !Number.isInteger(value)) {\n    return false;\n  } // By this point, the value is an integer.\n\n\n  if (value < min || value > max) {\n    return false;\n  }\n\n  return true;\n}\n\n;\n/**\n * Check if a value contains valid PEM content in compliance with the code\n * Node.js API to create a secure context.\n * https://nodejs.org/docs/v12.0.0/api/tls.html#tls_tls_createsecurecontext_options\n * @private\n * @param {Object} [options]\n * @param {boolean} [options.required=false] - should not be undefined\n * @param {*} [options.value] - value to check\n * @returns {boolean}\n */\n\nfunction isValidPEM() {\n  let {\n    required = false,\n    value\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const validPEMPattern = '(-----BEGIN [^-]+-----[^-]+-----END [^-]+-----)+';\n\n  if (typeof value === 'undefined' && required === true) {\n    return false;\n  }\n\n  if (typeof value !== 'undefined' && !Buffer.isBuffer(value) && !isValidString({\n    value,\n    pattern: validPEMPattern\n  })) {\n    return false;\n  }\n\n  return true;\n}\n\n;\n/**\n * Check if a value is a valid plain object under the given conditions.\n * @private\n * @param {Object} [options]\n * @param {boolean} [options.required=false] - should not be undefined\n * @param {*} [options.value] - value to check\n * @returns {boolean}\n */\n\nfunction isValidPlainObject() {\n  let {\n    required = false,\n    value\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (typeof value === 'undefined' && required === true) {\n    return false;\n  } // Since JavaScript arrays are also a type of \"object\", we need to ensure\n  // the value is not one.\n\n\n  if (typeof value !== 'undefined' && typeof value !== 'object' || Array.isArray(value) || value === null) {\n    return false;\n  }\n\n  return true;\n}\n\n;\n/**\n * Check if a value is a valid string under the given conditions.\n * @private\n * @param {Object} [options]\n * @param {string} [options.pattern=''] - regular expression pattern to test\n * @param {boolean} [options.required=false] - should not be undefined\n * @param {*} [options.value] - value to check\n * @returns {boolean}\n */\n\nfunction isValidString() {\n  let {\n    pattern = '',\n    required = false,\n    value\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (typeof value === 'undefined' && required === true) {\n    return false;\n  }\n\n  if (typeof value !== 'undefined' && typeof value !== 'string') {\n    return false;\n  }\n\n  if (typeof value !== 'undefined' && !new RegExp(pattern).test(value)) {\n    return false;\n  }\n\n  return true;\n}\n\n;\nmodule.exports = {\n  isValidArray,\n  isValidBoolean,\n  isValidInteger,\n  isValidPEM,\n  isValidPlainObject,\n  isValidString\n};","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/validator.js"],"names":["isValidArray","required","value","validator","Array","isArray","length","every","v","isValidBoolean","isValidInteger","max","Number","MAX_SAFE_INTEGER","min","MIN_SAFE_INTEGER","isInteger","isValidPEM","validPEMPattern","Buffer","isBuffer","isValidString","pattern","isValidPlainObject","RegExp","test","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n/**\n * Utilities for input validation.\n * @private\n * @module Validator\n */\n\n/**\n * Check if a value is a valid array under the given conditions.\n * @private\n * @param {Object} [options]\n * @param {boolean} [options.required=false] - should not be undefined\n * @param {*} [options.value] - value to check\n * @param {function} [options.validator] - validator function to apply for each item in the array\n * @returns {boolean}\n */\nfunction isValidArray ({ required = false, value, validator } = {}) {\n    if (typeof value === 'undefined' && required === true) {\n        return false;\n    }\n\n    if (typeof value !== 'undefined' && !Array.isArray(value)) {\n        return false;\n    }\n\n    // If the value is an array and there is an item validator, we need to\n    // validate the items.\n    // For now, we assume that if a validator is provided, the array should\n    // not be empty and should not contain \"undefined\" values\n    if (typeof value !== 'undefined' && typeof validator === 'function') {\n        // If the array is empty, the index validator cannot complete.\n        if (!value.length) {\n            return false;\n        }\n\n        // The index validator only makes sense if the value is not\n        // \"undefined\".\n        return value.every(v => validator({ required: true, value: v }));\n    }\n\n    return true;\n};\n\n/**\n * Check if a value is a valid boolean under the given conditions.\n * @private\n * @param {Object} [options]\n * @param {boolean} [options.required=false] - should not be undefined\n * @param {*} [options.value] - value to check\n * @returns {boolean}\n */\nfunction isValidBoolean ({ required = false, value } = {}) {\n    if (typeof value === 'undefined' && required === true) {\n        return false;\n    }\n\n    if (typeof value !== 'undefined' && typeof value !== 'boolean') {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Check if a value is a valid integer under the given conditions.\n * @private\n * @param {Object} [options]\n * @param {boolean} [options.required=false] - should not be undefined\n * @param {*} [options.value] - value to check\n * @returns {boolean}\n */\nfunction isValidInteger ({ required = false, max = Number.MAX_SAFE_INTEGER, min = Number.MIN_SAFE_INTEGER, value } = {}) {\n    if (typeof value === 'undefined' && required === true) {\n        return false;\n    }\n\n    if (typeof value !== 'undefined' && !Number.isInteger(value)) {\n        return false;\n    }\n\n    // By this point, the value is an integer.\n    if (value < min || value > max) {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Check if a value contains valid PEM content in compliance with the code\n * Node.js API to create a secure context.\n * https://nodejs.org/docs/v12.0.0/api/tls.html#tls_tls_createsecurecontext_options\n * @private\n * @param {Object} [options]\n * @param {boolean} [options.required=false] - should not be undefined\n * @param {*} [options.value] - value to check\n * @returns {boolean}\n */\nfunction isValidPEM ({ required = false, value } = {}) {\n    const validPEMPattern = '(-----BEGIN [^-]+-----[^-]+-----END [^-]+-----)+';\n\n    if (typeof value === 'undefined' && required === true) {\n        return false;\n    }\n\n    if (typeof value !== 'undefined' && !Buffer.isBuffer(value) && !isValidString({ value, pattern: validPEMPattern })) {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Check if a value is a valid plain object under the given conditions.\n * @private\n * @param {Object} [options]\n * @param {boolean} [options.required=false] - should not be undefined\n * @param {*} [options.value] - value to check\n * @returns {boolean}\n */\nfunction isValidPlainObject ({ required = false, value } = {}) {\n    if (typeof value === 'undefined' && required === true) {\n        return false;\n    }\n\n    // Since JavaScript arrays are also a type of \"object\", we need to ensure\n    // the value is not one.\n    if ((typeof value !== 'undefined' && typeof value !== 'object') || Array.isArray(value) || value === null) {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Check if a value is a valid string under the given conditions.\n * @private\n * @param {Object} [options]\n * @param {string} [options.pattern=''] - regular expression pattern to test\n * @param {boolean} [options.required=false] - should not be undefined\n * @param {*} [options.value] - value to check\n * @returns {boolean}\n */\nfunction isValidString ({ pattern = '', required = false, value } = {}) {\n    if (typeof value === 'undefined' && required === true) {\n        return false;\n    }\n\n    if (typeof value !== 'undefined' && typeof value !== 'string') {\n        return false;\n    }\n\n    if (typeof value !== 'undefined' && !(new RegExp(pattern)).test(value)) {\n        return false;\n    }\n\n    return true;\n};\n\nmodule.exports = {\n    isValidArray,\n    isValidBoolean,\n    isValidInteger,\n    isValidPEM,\n    isValidPlainObject,\n    isValidString\n};\n"]},"metadata":{},"sourceType":"script"}