{"ast":null,"code":"/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst RowLock = require('../Protocol/Stubs/mysqlx_crud_pb').Find.RowLock;\n\nconst RowLockOptions = require('../Protocol/Stubs/mysqlx_crud_pb').Find.RowLockOptions;\n\nconst errors = require('../constants/errors');\n\nconst preparing = require('./Preparing');\n/**\n * Enum to identify row locking types.\n * @readonly\n * @private\n * @name Type\n * @enum {number}\n */\n\n\nconst Type = Object.assign({\n  NONE: 0\n}, RowLock);\n/**\n * Enum to identify row locking modes.\n * @readonly\n * @name LockContention\n * @enum {number}\n * @example\n * LockContention.NOWAIT\n * LockContention.SKIP_LOCKED\n */\n\nconst LockContention = Object.assign({\n  DEFAULT: 0\n}, RowLockOptions);\n/**\n * Locking mixin.\n * @mixin\n * @alias Locking\n * @param {Object} state - locking properties\n * @returns {Locking}\n */\n\nfunction Locking(state) {\n  state = Object.assign({\n    mode: LockContention.DEFAULT,\n    rowLock: Type.NONE,\n    preparable: preparing()\n  }, state);\n  return {\n    /**\n     * Retrieve the mode used by the current row lock type.\n     * @function\n     * @private\n     * @name Locking#getLockContention\n     * @returns {LockContention} The row lock mode enum value.\n     */\n    getLockContention() {\n      return state.mode;\n    },\n\n    /**\n     * Retrieve the type of row lock used by the query.\n     * @function\n     * @private\n     * @name Locking#getRowLock\n     * @returns {Type} The lock type enum value.\n     */\n    getRowLock() {\n      return state.rowLock;\n    },\n\n    /**\n     * Use a shared lock for the query.\n     * @function\n     * @name Locking#lockShared\n     * @param {LockContention} [mode] - row locking mode\n     * @example\n     * collection.find().lockShared();\n     * collection.find().lockShared(mysqlx.LockContention.NOWAIT)\n     * collection.find().lockShared(mysqlx.LockContention.SKIP_LOCKED)\n     * @returns {Locking} The query instance.\n     */\n    lockShared(mode) {\n      state.preparable.forceRestart();\n      return this.setRowLock(Type.SHARED_LOCK).setLockContention(mode);\n    },\n\n    /**\n     * Use an exclusive lock for the query.\n     * @function\n     * @name Locking#lockExclusive\n     * @param {LockContention} [mode] - row locking mode\n     * @example\n     * collection.find().lockExclusive();\n     * collection.find().lockExclusive(mysqlx.LockContention.NOWAIT)\n     * collection.find().lockExclusive(mysqlx.LockContention.SKIP_LOCKED)\n     * @returns {Locking} The query instance.\n     */\n    lockExclusive(mode) {\n      state.preparable.forceRestart();\n      return this.setRowLock(Type.EXCLUSIVE_LOCK).setLockContention(mode);\n    },\n\n    /**\n     * Set the mode of the current row lock.\n     * @function\n     * @private\n     * @name Locking#setLockContention\n     * @param {LockContention} mode - lock mode enum value\n     * @returns {Locking} The query instance.\n     */\n    setLockContention(mode) {\n      mode = mode || LockContention.DEFAULT;\n\n      if (!Object.keys(LockContention).some(c => LockContention[c] === mode)) {\n        throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_LOCK_CONTENTION_MODE);\n      }\n\n      state.mode = mode;\n      return this;\n    },\n\n    /**\n     * Set the type of row lock used by the query.\n     * @function\n     * @private\n     * @name Locking#setRowLock\n     * @param {Type} rowLock - lock type enum value\n     * @returns {Locking} The query instance.\n     */\n    setRowLock(rowLock) {\n      state.rowLock = rowLock;\n      return this;\n    }\n\n  };\n}\n/**\n * Row locking types.\n * @type {Type}\n * @const\n */\n\n\nLocking.Type = Type;\n/**\n * Row locking modes.\n * @type {LockContention}\n * @const\n */\n\nLocking.LockContention = LockContention;\nmodule.exports = Locking;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/Locking.js"],"names":["RowLock","require","Find","RowLockOptions","errors","preparing","Type","Object","assign","NONE","LockContention","DEFAULT","Locking","state","mode","rowLock","preparable","getLockContention","getRowLock","lockShared","forceRestart","setRowLock","SHARED_LOCK","setLockContention","lockExclusive","EXCLUSIVE_LOCK","keys","some","c","Error","MESSAGES","ER_DEVAPI_BAD_LOCK_CONTENTION_MODE","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst RowLock = require('../Protocol/Stubs/mysqlx_crud_pb').Find.RowLock;\nconst RowLockOptions = require('../Protocol/Stubs/mysqlx_crud_pb').Find.RowLockOptions;\nconst errors = require('../constants/errors');\nconst preparing = require('./Preparing');\n\n/**\n * Enum to identify row locking types.\n * @readonly\n * @private\n * @name Type\n * @enum {number}\n */\nconst Type = Object.assign({ NONE: 0 }, RowLock);\n\n/**\n * Enum to identify row locking modes.\n * @readonly\n * @name LockContention\n * @enum {number}\n * @example\n * LockContention.NOWAIT\n * LockContention.SKIP_LOCKED\n */\nconst LockContention = Object.assign({ DEFAULT: 0 }, RowLockOptions);\n\n/**\n * Locking mixin.\n * @mixin\n * @alias Locking\n * @param {Object} state - locking properties\n * @returns {Locking}\n */\nfunction Locking (state) {\n    state = Object.assign({ mode: LockContention.DEFAULT, rowLock: Type.NONE, preparable: preparing() }, state);\n\n    return {\n        /**\n         * Retrieve the mode used by the current row lock type.\n         * @function\n         * @private\n         * @name Locking#getLockContention\n         * @returns {LockContention} The row lock mode enum value.\n         */\n        getLockContention () {\n            return state.mode;\n        },\n\n        /**\n         * Retrieve the type of row lock used by the query.\n         * @function\n         * @private\n         * @name Locking#getRowLock\n         * @returns {Type} The lock type enum value.\n         */\n        getRowLock () {\n            return state.rowLock;\n        },\n\n        /**\n         * Use a shared lock for the query.\n         * @function\n         * @name Locking#lockShared\n         * @param {LockContention} [mode] - row locking mode\n         * @example\n         * collection.find().lockShared();\n         * collection.find().lockShared(mysqlx.LockContention.NOWAIT)\n         * collection.find().lockShared(mysqlx.LockContention.SKIP_LOCKED)\n         * @returns {Locking} The query instance.\n         */\n        lockShared (mode) {\n            state.preparable.forceRestart();\n\n            return this.setRowLock(Type.SHARED_LOCK).setLockContention(mode);\n        },\n\n        /**\n         * Use an exclusive lock for the query.\n         * @function\n         * @name Locking#lockExclusive\n         * @param {LockContention} [mode] - row locking mode\n         * @example\n         * collection.find().lockExclusive();\n         * collection.find().lockExclusive(mysqlx.LockContention.NOWAIT)\n         * collection.find().lockExclusive(mysqlx.LockContention.SKIP_LOCKED)\n         * @returns {Locking} The query instance.\n         */\n        lockExclusive (mode) {\n            state.preparable.forceRestart();\n\n            return this.setRowLock(Type.EXCLUSIVE_LOCK).setLockContention(mode);\n        },\n\n        /**\n         * Set the mode of the current row lock.\n         * @function\n         * @private\n         * @name Locking#setLockContention\n         * @param {LockContention} mode - lock mode enum value\n         * @returns {Locking} The query instance.\n         */\n        setLockContention (mode) {\n            mode = mode || LockContention.DEFAULT;\n\n            if (!Object.keys(LockContention).some(c => LockContention[c] === mode)) {\n                throw new Error(errors.MESSAGES.ER_DEVAPI_BAD_LOCK_CONTENTION_MODE);\n            }\n\n            state.mode = mode;\n\n            return this;\n        },\n\n        /**\n         * Set the type of row lock used by the query.\n         * @function\n         * @private\n         * @name Locking#setRowLock\n         * @param {Type} rowLock - lock type enum value\n         * @returns {Locking} The query instance.\n         */\n        setRowLock (rowLock) {\n            state.rowLock = rowLock;\n\n            return this;\n        }\n    };\n}\n\n/**\n * Row locking types.\n * @type {Type}\n * @const\n */\nLocking.Type = Type;\n\n/**\n * Row locking modes.\n * @type {LockContention}\n * @const\n */\nLocking.LockContention = LockContention;\n\nmodule.exports = Locking;\n"]},"metadata":{},"sourceType":"script"}