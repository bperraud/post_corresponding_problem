{"ast":null,"code":"/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n'use strict';\n\nconst binding = require('./Binding');\n\nconst limiting = require('./Limiting');\n\nconst collectionOrdering = require('./CollectionOrdering');\n\nconst errors = require('../constants/errors');\n\nconst logger = require('../logger');\n\nconst preparing = require('./Preparing');\n\nconst query = require('./Query');\n\nconst result = require('./Result');\n\nconst type = require('../Protocol/Stubs/mysqlx_prepare_pb').Prepare.OneOfMessage.Type.UPDATE;\n\nconst updating = require('./Updating');\n\nconst util = require('util');\n\nconst warnings = require('../constants/warnings');\n\nconst log = logger('api:collection:modify');\n/**\n * CollectionModify factory.\n * @module CollectionModify\n * @mixes Binding\n * @mixes Limiting\n * @mixes CollectionOrdering\n * @mixes Query\n * @mixes Updating\n */\n\n/**\n * @private\n * @alias module:CollectionModify\n * @param {Connection} connection - database connection context\n * @param {module:Schema} schema - schema to bind\n * @param {string} tableName - collection name\n * @param {string} [criteria] - filtering criteria expression\n * @returns {module:CollectionModify}\n */\n\nfunction CollectionModify(connection, schema, tableName, criteria) {\n  const state = {\n    preparable: preparing({\n      connection\n    })\n  };\n  const base = Object.assign({}, binding({\n    criteria: criteria || ''\n  }), collectionOrdering(state), limiting(state), query({\n    schema,\n    tableName,\n    type\n  }), updating());\n  state.preparable = Object.assign({}, base, state.preparable);\n  return Object.assign({}, base, {\n    /**\n     * Append element to an array field.\n     * @function\n     * @name module:CollectionModify#arrayAppend\n     * @param {string} field - document array field\n     * @param {*} any - value to append\n     * @returns {module:CollectionModify} The query instance.\n     */\n    arrayAppend(field, any) {\n      state.preparable.forceRestart();\n      const operations = this.getOperations().concat({\n        type: updating.Operation.ARRAY_APPEND,\n        source: field,\n        value: any\n      });\n      return this.setOperations(operations);\n    },\n\n    /**\n     * Delete element from an array.\n     * @function\n     * @name module:CollectionModify#arrayDelete\n     * @param {string} field - document array field\n     * @returns {module:CollectionModify} The query instance\n     * @deprecated since version 8.0.12. Will be removed in future versions. Use {@link module:CollectionModify#unset|CollectionModify.unset()} instead.\n     */\n    arrayDelete(field) {\n      log.warning('arrayDelete', warnings.MESSAGES.WARN_DEPRECATED_ARRAY_DELETE, {\n        type: warnings.TYPES.DEPRECATION,\n        code: warnings.CODES.DEPRECATION\n      });\n      return this.unset(field);\n    },\n\n    /**\n     * Insert element into an array field.\n     * @function\n     * @name module:CollectionModify#arrayInsert\n     * @param {string} field - document array field\n     * @param {*} any - value to insert\n     * @returns {module:CollectionModify} The query instance.\n     */\n    arrayInsert(field, any) {\n      state.preparable.forceRestart();\n      const operations = this.getOperations().concat({\n        type: updating.Operation.ARRAY_INSERT,\n        source: field,\n        value: any\n      });\n      return this.setOperations(operations);\n    },\n\n    /**\n     * Execute modify operation.\n     * @function\n     * @name module:CollectionModify#execute\n     * @return {Promise.<module:Result>}\n     */\n    execute() {\n      const criteria = this.getCriteria().trim(); // An explicit criteria needs to be provided. This is to avoid\n      // updating all documents in a collection by mistake.\n\n      if (!criteria.length) {\n        return Promise.reject(new Error(util.format(errors.MESSAGES.ER_DEVAPI_MISSING_DOCUMENT_CRITERIA, 'modify()')));\n      } // Before trying to send any message to the server, we need to\n      // check if the connection is open (has a client instance) or if\n      // it became idle in the meantime.\n\n\n      if (!connection.isOpen() || connection.isIdle()) {\n        // There is always a default error (ER_DEVAPI_CONNECTION_CLOSED).\n        return Promise.reject(connection.getError());\n      }\n\n      const fn = () => connection.getClient().crudModify(this);\n\n      return state.preparable.execute(fn).then(details => result(details));\n    },\n\n    /**\n     * Update multiple document properties.\n     * @function\n     * @name module:CollectionModify#patch\n     * @param {Object} properties - properties to update\n     * @return {module:CollectionModify} The query instance.\n     */\n    patch(properties) {\n      state.preparable.forceRestart();\n      const operations = this.getOperations().concat({\n        source: '$',\n        type: updating.Operation.MERGE_PATCH,\n        value: properties\n      });\n      return this.setOperations(operations);\n    },\n\n    /**\n     * Set the value of a given document field.\n     * @function\n     * @name module:CollectionModify#set\n     * @param {string} field - document field\n     * @param {*} any -  value to assign\n     * @returns {module:CollectionModify} The query instance.\n     */\n    set(field, any) {\n      state.preparable.forceRestart();\n      const operations = this.getOperations().concat({\n        type: updating.Operation.ITEM_SET,\n        source: field,\n        value: any\n      });\n      return this.setOperations(operations);\n    },\n\n    /**\n     * Unset the value of document fields.\n     * @function\n     * @name module:CollectionModify#unset\n     * @param {(string|string[])} fields\n     * @returns {module:CollectionModify} The query instance.\n     */\n    unset(fields) {\n      state.preparable.forceRestart();\n      const operations = this.getOperations().concat([].concat(fields).map(field => ({\n        type: updating.Operation.ITEM_REMOVE,\n        source: field\n      })));\n      return this.setOperations(operations);\n    }\n\n  });\n}\n\nmodule.exports = CollectionModify;","map":{"version":3,"sources":["/home/ad/Bureau/infof308/src/node_modules/@mysql/xdevapi/lib/DevAPI/CollectionModify.js"],"names":["binding","require","limiting","collectionOrdering","errors","logger","preparing","query","result","type","Prepare","OneOfMessage","Type","UPDATE","updating","util","warnings","log","CollectionModify","connection","schema","tableName","criteria","state","preparable","base","Object","assign","arrayAppend","field","any","forceRestart","operations","getOperations","concat","Operation","ARRAY_APPEND","source","value","setOperations","arrayDelete","warning","MESSAGES","WARN_DEPRECATED_ARRAY_DELETE","TYPES","DEPRECATION","code","CODES","unset","arrayInsert","ARRAY_INSERT","execute","getCriteria","trim","length","Promise","reject","Error","format","ER_DEVAPI_MISSING_DOCUMENT_CRITERIA","isOpen","isIdle","getError","fn","getClient","crudModify","then","details","patch","properties","MERGE_PATCH","set","ITEM_SET","fields","map","ITEM_REMOVE","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2015, 2021, Oracle and/or its affiliates.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License, version 2.0, as\n * published by the Free Software Foundation.\n *\n * This program is also distributed with certain software (including\n * but not limited to OpenSSL) that is licensed under separate terms,\n * as designated in a particular file or component or in included license\n * documentation.  The authors of MySQL hereby grant you an\n * additional permission to link the program and your derivative works\n * with the separately licensed software that they have included with\n * MySQL.\n *\n * Without limiting anything contained in the foregoing, this file,\n * which is part of MySQL Connector/Node.js, is also subject to the\n * Universal FOSS Exception, version 1.0, a copy of which can be found at\n * http://oss.oracle.com/licenses/universal-foss-exception.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License, version 2.0, for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n */\n\n'use strict';\n\nconst binding = require('./Binding');\nconst limiting = require('./Limiting');\nconst collectionOrdering = require('./CollectionOrdering');\nconst errors = require('../constants/errors');\nconst logger = require('../logger');\nconst preparing = require('./Preparing');\nconst query = require('./Query');\nconst result = require('./Result');\nconst type = require('../Protocol/Stubs/mysqlx_prepare_pb').Prepare.OneOfMessage.Type.UPDATE;\nconst updating = require('./Updating');\nconst util = require('util');\nconst warnings = require('../constants/warnings');\n\nconst log = logger('api:collection:modify');\n\n/**\n * CollectionModify factory.\n * @module CollectionModify\n * @mixes Binding\n * @mixes Limiting\n * @mixes CollectionOrdering\n * @mixes Query\n * @mixes Updating\n */\n\n/**\n * @private\n * @alias module:CollectionModify\n * @param {Connection} connection - database connection context\n * @param {module:Schema} schema - schema to bind\n * @param {string} tableName - collection name\n * @param {string} [criteria] - filtering criteria expression\n * @returns {module:CollectionModify}\n */\nfunction CollectionModify (connection, schema, tableName, criteria) {\n    const state = { preparable: preparing({ connection }) };\n    const base = Object.assign({}, binding({ criteria: criteria || '' }), collectionOrdering(state), limiting(state), query({ schema, tableName, type }), updating());\n\n    state.preparable = Object.assign({}, base, state.preparable);\n\n    return Object.assign({}, base, {\n        /**\n         * Append element to an array field.\n         * @function\n         * @name module:CollectionModify#arrayAppend\n         * @param {string} field - document array field\n         * @param {*} any - value to append\n         * @returns {module:CollectionModify} The query instance.\n         */\n        arrayAppend (field, any) {\n            state.preparable.forceRestart();\n\n            const operations = this.getOperations().concat({\n                type: updating.Operation.ARRAY_APPEND,\n                source: field,\n                value: any\n            });\n\n            return this.setOperations(operations);\n        },\n\n        /**\n         * Delete element from an array.\n         * @function\n         * @name module:CollectionModify#arrayDelete\n         * @param {string} field - document array field\n         * @returns {module:CollectionModify} The query instance\n         * @deprecated since version 8.0.12. Will be removed in future versions. Use {@link module:CollectionModify#unset|CollectionModify.unset()} instead.\n         */\n        arrayDelete (field) {\n            log.warning('arrayDelete', warnings.MESSAGES.WARN_DEPRECATED_ARRAY_DELETE, {\n                type: warnings.TYPES.DEPRECATION,\n                code: warnings.CODES.DEPRECATION\n            });\n\n            return this.unset(field);\n        },\n\n        /**\n         * Insert element into an array field.\n         * @function\n         * @name module:CollectionModify#arrayInsert\n         * @param {string} field - document array field\n         * @param {*} any - value to insert\n         * @returns {module:CollectionModify} The query instance.\n         */\n        arrayInsert (field, any) {\n            state.preparable.forceRestart();\n\n            const operations = this.getOperations().concat({\n                type: updating.Operation.ARRAY_INSERT,\n                source: field,\n                value: any\n            });\n\n            return this.setOperations(operations);\n        },\n\n        /**\n         * Execute modify operation.\n         * @function\n         * @name module:CollectionModify#execute\n         * @return {Promise.<module:Result>}\n         */\n        execute () {\n            const criteria = this.getCriteria().trim();\n            // An explicit criteria needs to be provided. This is to avoid\n            // updating all documents in a collection by mistake.\n            if (!criteria.length) {\n                return Promise.reject(new Error(util.format(errors.MESSAGES.ER_DEVAPI_MISSING_DOCUMENT_CRITERIA, 'modify()')));\n            }\n\n            // Before trying to send any message to the server, we need to\n            // check if the connection is open (has a client instance) or if\n            // it became idle in the meantime.\n            if (!connection.isOpen() || connection.isIdle()) {\n                // There is always a default error (ER_DEVAPI_CONNECTION_CLOSED).\n                return Promise.reject(connection.getError());\n            }\n\n            const fn = () => connection.getClient().crudModify(this);\n\n            return state.preparable.execute(fn)\n                .then(details => result(details));\n        },\n\n        /**\n         * Update multiple document properties.\n         * @function\n         * @name module:CollectionModify#patch\n         * @param {Object} properties - properties to update\n         * @return {module:CollectionModify} The query instance.\n         */\n        patch (properties) {\n            state.preparable.forceRestart();\n\n            const operations = this.getOperations().concat({\n                source: '$',\n                type: updating.Operation.MERGE_PATCH,\n                value: properties\n            });\n\n            return this.setOperations(operations);\n        },\n\n        /**\n         * Set the value of a given document field.\n         * @function\n         * @name module:CollectionModify#set\n         * @param {string} field - document field\n         * @param {*} any -  value to assign\n         * @returns {module:CollectionModify} The query instance.\n         */\n        set (field, any) {\n            state.preparable.forceRestart();\n\n            const operations = this.getOperations().concat({\n                type: updating.Operation.ITEM_SET,\n                source: field,\n                value: any\n            });\n\n            return this.setOperations(operations);\n        },\n\n        /**\n         * Unset the value of document fields.\n         * @function\n         * @name module:CollectionModify#unset\n         * @param {(string|string[])} fields\n         * @returns {module:CollectionModify} The query instance.\n         */\n        unset (fields) {\n            state.preparable.forceRestart();\n\n            const operations = this.getOperations().concat([].concat(fields).map(field => ({\n                type: updating.Operation.ITEM_REMOVE,\n                source: field\n            })));\n\n            return this.setOperations(operations);\n        }\n    });\n}\n\nmodule.exports = CollectionModify;\n"]},"metadata":{},"sourceType":"script"}